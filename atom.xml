<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Thinking in Crowd / 鹄思乱想</title>
  <subtitle>Swan flying in the immense sky</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.thinkingincrowd.me/"/>
  <updated>2017-03-25T02:10:25.000Z</updated>
  <id>http://www.thinkingincrowd.me/</id>
  
  <author>
    <name>鹄思乱想</name>
    <email>chengusky@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最值得投资的东西，你却可能把它忘了</title>
    <link href="http://www.thinkingincrowd.me/2017/03/25/The-most-important-thing-to-invest-in-and-you-may-forget/"/>
    <id>http://www.thinkingincrowd.me/2017/03/25/The-most-important-thing-to-invest-in-and-you-may-forget/</id>
    <published>2017-03-25T02:08:47.000Z</published>
    <updated>2017-03-25T02:10:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="值得投资的东西太多"><a href="#值得投资的东西太多" class="headerlink" title="值得投资的东西太多"></a>值得投资的东西太多</h2><p>什么东西最值得投资？不同的人有不同的答案。  </p>
<p>最直接的想法，投资嘛，股票，比特币，房子都是最值得投资的，尤其是大家炒的热火朝天的时候。每次只是恨自己怎么不早点知道。  </p>
<p>健身风潮来的时候，又有很多人会说，最重要的是身体和健康。因为没有了健康，就什么都没有了。身体是本钱，根基。  </p>
<p>最近学习风潮很猛烈，说是开启和进入了知识付费和变现的年代。各种直播，学习的平台都推出教大家如何自我管理，理财，长眼界等投资自己的课程。最值得投资的，变成了知识，能力，成长，注意力等。  </p>
<p>其实什么东西才是最值得投资的东西呢？  </p>
<h2 id="什么才最重要"><a href="#什么才最重要" class="headerlink" title="什么才最重要"></a>什么才最重要</h2><p>3 月 23 号晚上，笑来老师在得到为他的「通往财富自由之路」专栏做直播。直播里提取了专栏讲到的一些重要的概念，当然就有注意力，投资，心态等。  </p>
<p>可是，让我感触最深，直播完后我第一时间和朋友说的一个观念就是：“<strong>重要的是把精力放在你身边对你很重要的人身上。以身作则地影响 Ta，改变 Ta，和 Ta 一起变得更好。</strong>”  </p>
<h2 id="谁才重要的人"><a href="#谁才重要的人" class="headerlink" title="谁才重要的人"></a>谁才重要的人</h2><p>他们可能是你的大学舍友，同事，父母，伴侣，或者儿女，就是那些<strong>和你接触时间最长的人</strong>。  </p>
<p>试想一下，  </p>
<p>如果你不愿意去帮助你的同事，教导你的下属，他们遇到问题的时候，你老是抱怨他们能力不够而不是耐心培训他们，你怎么可能解脱出来，去做更有挑战性的事情？工作那么多年来，任何同事有问题来找我，我都努力帮助他们。我也从无保留地传递我认为有价值的知识和信息给我带过的团队成员。所以，一直以来，我也比不少人有更多机会和较好的口碑。  </p>
<p>如果你的父母，老是干涉你的生活，唠叨你去找男女朋友，或者用不恰当的价值观评判你现男女朋友，而你却不肯花时间慢慢和他们聊天，改变他们的想法，你怎么可能用你想要的方式生活。或者他们三天两头吵架，你成了磨心，时不时收到投诉电话，那怎么可能安心生活和工作。  </p>
<p>如果你的伴侣，经常对你抱怨，或者在儿女的教育方法上和你产生分歧和争吵，你怎么可能静心在家里学习和自我成长。可能你都不愿意下班回家。  </p>
<p>如果你的儿女，经常在外面闯祸，被老师投诉，你想想你能有多少时间安下心做自己想做的事情。  </p>
<p>或许，你可以说，我不管还不行吗？如果真的可以，那他们并不能被定义为对你来说重要的人。如果你真的可以不管和离开，那他们和路人可能没什么区别。除非你真的真的真的能彻底离开，否则是没法放弃治疗的。  </p>
<h2 id="如何处理亲密关系"><a href="#如何处理亲密关系" class="headerlink" title="如何处理亲密关系"></a>如何处理亲密关系</h2><p>这是一个超级复杂的问题，对我来说超级头疼。  </p>
<p>以前，我仅仅是一个“听话的儿子”，所以身份相对简单，家庭也比较和谐。所以，一直以来，我只需要关注“自己的”成长，没有或者很少<strong>「主动地关注」身边最重要的人的需要</strong>。很多时候，我都在<strong>「被动地处理」一些发生了和要面对的事情</strong>。  </p>
<p>这种生活和行为方式一直比较适用。现在，我已经是人之夫，和有了自己的儿子。当我的角色发生那么多的变化后，以前那种模式肯定是无法满足需求的。可是，我这方面的学习的转变一直比较慢，真是辛苦我的夫人了。  </p>
<p>留个悬念，下篇文章再说说我自己的经历和想法。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;值得投资的东西太多&quot;&gt;&lt;a href=&quot;#值得投资的东西太多&quot; class=&quot;headerlink&quot; title=&quot;值得投资的东西太多&quot;&gt;&lt;/a&gt;值得投资的东西太多&lt;/h2&gt;&lt;p&gt;什么东西最值得投资？不同的人有不同的答案。  &lt;/p&gt;
&lt;p&gt;最直接的想法，投资嘛，
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="成长" scheme="http://www.thinkingincrowd.me/tags/%E6%88%90%E9%95%BF/"/>
    
      <category term="关系" scheme="http://www.thinkingincrowd.me/tags/%E5%85%B3%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 微信后台搭建系列 - 登录验证和授权</title>
    <link href="http://www.thinkingincrowd.me/2017/02/25/Node-js-Wechat-Web-App-Tutorial-Access-Control/"/>
    <id>http://www.thinkingincrowd.me/2017/02/25/Node-js-Wechat-Web-App-Tutorial-Access-Control/</id>
    <published>2017-02-25T15:20:00.000Z</published>
    <updated>2017-03-25T02:09:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>帐号登录验证和权限设置，可以说是任何一个系统都必须具备的基本功能。无论是电商，社交，还是企业系统，甚至连输入法等工具，都可以让你注册一个帐号。方式从最传统的帐号密码登录，到用社交帐号绑定不等。  </p>
<h2 id="登录验证（Authentication）"><a href="#登录验证（Authentication）" class="headerlink" title="登录验证（Authentication）"></a>登录验证（Authentication）</h2><p>登录有什么用呢？最基本的目的当然是为了让系统在茫茫人海中认得你。你上次来干什么了，做到哪一步，这次需要接着做吗？当然，验证的部分是为了不让其他人冒充你。所以，最基本的功能就是：  </p>
<ul>
<li>记得之前的你  </li>
<li>确保真的是你  </li>
</ul>
<h3 id="会话（Session）"><a href="#会话（Session）" class="headerlink" title="会话（Session）"></a>会话（Session）</h3><p>为了让系统记得之前的你，后台当然要保存和记录一些数据，比如你的个人资料，上次没有写完的文档。但是，比如说你用浏览器打开了你的邮箱，写邮件，系统怎么知道这次保存的邮件内容，是你的，而不是别人的呢？不可能让你每保存一次都用密码验证一下吧？  </p>
<p>其实，当你成功登录验证后，服务器端通常会生成并维护一个会话，同时为这个会话绑定一个 ID（Session ID）。然后它把这个 ID 通过 Cookie 保留在你访问服务器的浏览器端。  </p>
<p>后面每一次对服务器的请求或操作，浏览器都会带上这个 Cookie，服务器通过 Session ID 来提取相应的 Session 数据，并识别出你。所以你的每一个操作，系统都能知道是你，并记得之前的你。但是，如果这个会话过期了（比如说登录后长时间没任何操作），系统就需要你重新登录验证一次才能继续操作。  </p>
<p>虽然服务器的 Session 允许存储不少信息，但是一般只存储用户 ID 就够了。<strong>数据存储的越多，越浪费内存和影响性能</strong>。同时，在一些用户量大，需要做负载均衡的系统，任何一个请求都不能保证下一次和这次通信的服务器是同一个，所以 Session 的数据一般都存储在所有服务器都能访问的内存型数据库，比如 Redis。  </p>
<p>在 <code>evergrow</code> 框架里面，Session 的配置代码在 <code>/system/session-manager.js</code> 文件里。<code>evergrow</code> 也是使用 Redis 来存储 Session 资料，所以在你需要使用 Session 功能时，记得启动 Redis 服务器。  </p>
<h3 id="Passport"><a href="#Passport" class="headerlink" title="Passport"></a>Passport</h3><p>为了确保真的是你，系统必须使用某一种方式来登录验证。要自己写一个登录验证的功能不难。但是要写一个好用，并且容易扩展的验证功能就不容易了。<code>evergrow</code> 使用了一个叫 <a href="http://passportjs.org/" target="_blank" rel="external">Passport</a> 的中间件，并默认提供了最基本的帐号密码登录的方式。等你了解了 Passport 的使用后，你就可以轻松地改成用微信，微博登录等。  </p>
<p>我们先来看看 Passport 的配置。代码基本都在 <code>/module/auth/auth-manager.js</code> 里面，才 50 行。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1) Part 1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">configureAuth</span>(<span class="params">app</span>) </span>&#123;</div><div class="line">  app.use(passport.initialize())</div><div class="line">  app.use(passport.session())</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2) Part 2</span></div><div class="line">passport.serializeUser(<span class="function"><span class="keyword">function</span>(<span class="params">user, done</span>) </span>&#123;</div><div class="line">  done(<span class="literal">null</span>, user._id)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">passport.deserializeUser(<span class="function"><span class="keyword">function</span>(<span class="params">id, done</span>) </span>&#123;</div><div class="line">  UserManager.load(id)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</div><div class="line">      done(<span class="literal">null</span>, user)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 3) Part 3</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">localAuth</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> passport.authenticate(<span class="string">'local'</span>, &#123;failWithError: <span class="literal">true</span>&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">passport.use(<span class="keyword">new</span> LocalStrategy(&#123;</div><div class="line">  usernameField: <span class="string">'loginId'</span>,</div><div class="line">  passwordField: <span class="string">'password'</span>,</div><div class="line">  passReqToCallback: <span class="literal">true</span></div><div class="line">&#125;,</div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">req, loginId, password, verified</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!loginId || !password) &#123;</div><div class="line">    verified(<span class="literal">null</span>, <span class="literal">false</span>, &#123;message: <span class="string">'Invalid login info.'</span>&#125;) <span class="comment">// err, user, info</span></div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  UserManager.findLocalUser(loginId)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> UserManager.validatePassword(password, user)</div><div class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params">isValid</span>) </span>&#123;</div><div class="line">          <span class="keyword">if</span> (user) &#123;</div><div class="line">            <span class="keyword">delete</span> user.password</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">return</span> isValid ? user : <span class="literal">null</span></div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (user === <span class="literal">null</span>) &#123;</div><div class="line">        verified(<span class="literal">null</span>, <span class="literal">false</span>, &#123;message: <span class="string">'Invalid login info.'</span>&#125;)</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      logger.info(&#123;req: req&#125;, <span class="string">'User Login successfully'</span>)</div><div class="line">      verified(<span class="literal">null</span>, user)</div><div class="line">    &#125;)</div><div class="line">    .catch(verified)</div><div class="line">&#125;))</div></pre></td></tr></table></figure>
<p>第一部分只是配置。<code>configureAuth</code> 方法在 <code>/system/server-manager.js</code> 里面被调用。要注意的是它应该在配置 Session 之后才调用。  </p>
<p>第二部分是序列化（serialize）和反序列化（deserialize）用户信息。这里就是前面说的在 Session 里存储什么数据了。序列化的时候，你们看到我只存了 <code>user._id</code>。反序列化的时候，通过前面存的 id 在通过查找数据库 <code>UserManager.load(id)</code> 来获取用户，然后放到 Session 里，供后续的中间件或代码使用（通过 <code>req.user</code> 获取）。  </p>
<p>第三部分是注册验证手段到 Passport 里面。因为默认 <code>evergrow</code> 用的是帐号密码登录，所以这里的配置就是用的 <code>LocalStrategy</code>。不同的验证方式在 Passport 里面是通过注册不同的插件来实现的。这部分代码其实不难，大意就是通过哪些字段获取帐号和密码信息，然后如何根据这些信息判断是否有这样的用户，和提供的资料是否准确。如果你想换不同的登录验证方式，找另一个插件来配置一下就可以了。  </p>
<p>如何使用配置好的登录验证方式呢？其实就在登录的那个路由，文件 <code>/module/auth/auth-routes.js</code> 里。<code>AuthManager.localAuth()</code> 方法返回的中间件，就是我们配置的插件，会自动帮我们做登录验证。登录验证通过后，操作就会传递到 <code>AuthController.signin</code> 里做下一步操作了，比如根据用户类型跳转去不同的页面。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  method: <span class="string">'post'</span>,</div><div class="line">  path: <span class="string">'/signin'</span>,</div><div class="line">  summary: <span class="string">'Sign In'</span>,</div><div class="line">  description: <span class="string">''</span>,</div><div class="line">  action: [AuthManager.localAuth(), AuthController.signin],</div><div class="line">  validators: &#123;</div><div class="line">    body: joi.object().keys(&#123;</div><div class="line">      loginId: joi.string().required(),</div><div class="line">      password: joi.string().required()</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>登录验证配置部分到这里就完了，下面我们看看如何让系统知道每一次操作的人是谁，并知道他的身份和权限。  </p>
<h2 id="授权（Authorization）"><a href="#授权（Authorization）" class="headerlink" title="授权（Authorization）"></a>授权（Authorization）</h2><p>登录验证是为了确定你的身份，有机会进入系统的大门。授权是为了确定做的操作，都是被允许的，你有被赋予权限。系统需要知道你是普通用户，还是论坛坛主，又或者是整个系统的超级管理员。  </p>
<p><code>evergrow</code> 里通过 <code>/module/user/user-model.js</code> 的 <code>isAdmin</code> 标记来简单区分你是管理员还是普通用户。虽然简单，但是搞清楚原理后，再按照自己需求修改就可以使用 ACL 或者 RBAC 之类的模式。  </p>
<h3 id="如何控制权限"><a href="#如何控制权限" class="headerlink" title="如何控制权限"></a>如何控制权限</h3><p>最简单的权限控制，可以是根据登录的用户类型，在浏览器的页面里，禁止或者隐藏相应的按钮或者链接。因为现在很多页面都是通过 Ajax 来请求数据并动态渲染，所以不少人会简单在前端来实现这样的功能。但是，这样做是相当危险的。稍微有点开发知识的人，都能轻易显示你网页上隐藏的内容。  </p>
<p>那么，是否通过服务端渲染页面来隐藏就可以了呢？这也是不够的。如果你的请求路由和参数被猜到，但是没有限制特定的人群才能访问，比如修改用户资料的接口，那么一些黑客就能夺取你系统的超级用户权限。  </p>
<p>有兴趣的朋友可以看一看 <a href="https://arstechnica.com/business/2012/03/hacker-commandeers-github-to-prove-vuln-in-ruby/?comments=1" target="_blank" rel="external">Hacker commandeers GitHub to prove Rails vulnerability</a> 这篇文章。里面提到的「Mass assignment vulnerability」在 Ruby on Rails 和 Node.js 系统里面很常见。所以，在 <code>evergrow</code> 框架，每一个请求都用 <code>joi</code> 来限定能提交的参数名字和类型，并通过中间件来保护特定的接口。  </p>
<p>我们来看下面的代码：  </p>
<ul>
<li><code>AuthController.ensureAuthenticated</code> 这个中间件，就是帮我们确认用户是否已经登录。  </li>
<li><code>UserController.isAdmin</code> 确保操作的用户是管理员。  </li>
<li><code>UserController.isOwner</code> 确保链接传的 <code>id</code> 参数，是当前登录用户的 <code>id</code>。  </li>
</ul>
<p>所以，下面的配置意思就是：获取用户的接口只能是登录后的用户，并且是管理员才能调用。修改用户资料的接口，只允许指定的字段提交修改，像 <code>isAdmin</code> 这样的字段肯定不能提交。用户自己只能修改自己的信息。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  method: <span class="string">'get'</span>,</div><div class="line">  path: <span class="string">'/'</span>,</div><div class="line">  summary: <span class="string">'Gets all users'</span>,</div><div class="line">  description: <span class="string">''</span>,</div><div class="line">  action: [AuthController.ensureAuthenticated, UserController.isAdmin, UserController.listUser],</div><div class="line">  validators: &#123;</div><div class="line">    query: joi.object().keys(&#123;</div><div class="line">      search: joi.string().allow(<span class="string">''</span>),</div><div class="line">      order: joi.string().valid(<span class="string">'desc'</span>, <span class="string">'asc'</span>).default(<span class="string">'asc'</span>),</div><div class="line">      limit: joi.number().integer().max(<span class="number">100</span>).default(<span class="number">10</span>),</div><div class="line">      offset: joi.number().integer()</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">  method: <span class="string">'post'</span>,</div><div class="line">  path: <span class="string">'/:id'</span>,</div><div class="line">  summary: <span class="string">'Updates user profile'</span>,</div><div class="line">  description: <span class="string">''</span>,</div><div class="line">  action: [AuthController.ensureAuthenticated, UserController.isOwner, UserController.updateUser],</div><div class="line">  validators: &#123;</div><div class="line">    body: joi.object().keys(&#123;</div><div class="line">      loginId: joi.string().required(),</div><div class="line">      phone: joi.string().required(),</div><div class="line">      email: joi.string().email(),</div><div class="line">      password: joi.string(),</div><div class="line">      imageUrl: joi.string(),</div><div class="line">      confirmPassword: joi.string()</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="evergrow-的设置"><a href="#evergrow-的设置" class="headerlink" title="evergrow 的设置"></a>evergrow 的设置</h2><p>为了方便测试，所以还没有加任何权限控制在前两章的 API 上，现在是时候了。假设我们的需求是：  </p>
<ol>
<li>任何人都能看到所有没有删除的，审批通过的图片。  </li>
<li>登录后，自己还可以看到审批中，或者自己删除了的图片，并可以重新上传图片。  </li>
<li>管理员可以做上面任何操作，并且可以通过，或者拒绝任何图片。  </li>
</ol>
<p>我先带大家在 evergrow 里实现前两点，第三点作为练习。  </p>
<h3 id="页面权限控制"><a href="#页面权限控制" class="headerlink" title="页面权限控制"></a>页面权限控制</h3><p>既然所有人都能看到图片，我们先在导航栏放一个链接打开图片列表页。打开 <code>/view/common/_nav.html</code>，可以看到有这么一小段代码：  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">typeof</span>(<span class="attr">currentUser</span>) !== <span class="string">'undefined'</span> &amp;&amp; <span class="attr">currentUser</span> &amp;&amp; <span class="attr">currentUser.isAdmin</span>) &#123; %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/user/page/list"</span>&gt;</span>User Management<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure>
<p>这里有两个链接：  </p>
<ul>
<li><code>/</code> Home 页面在最左边。谁都可以访问</li>
<li><code>/user/page/list</code> 是用户管理页面，但是只有管理员（有 <code>isAdmin</code> 标记的用户）才能访问</li>
</ul>
<p>这里比较特别的地方就是 <code>&lt;% ... %&gt;</code> 里面包含的代码。首先，如视图那章所说，它是被模板引擎执行的代码。然后这里访问的 <code>currentUser</code> 是什么呢？它就是当前登录的用户。如果你的页面路由调用了 <code>AuthController.ensureAuthenticated</code> 或者 <code>AuthController.setUserToResources</code> 中间件，在页面模板里面就能访问这个变量。  </p>
<p>所以，这段代码的意思就是，只有当浏览页面的用户是管理员的话，才能把 User Manangement 的链接代码包含到页面里。用 Chrome 打开页面，按 F12（Windows 里）或者 Option+Command+I（Mac 里）调出开发者工具，使用元素选择工具点击 Home 链接，就能看到效果如下图。这就是后端渲染和权限控制的好处之一。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/08-access-control-server-rendering.png" alt="Server Rendering"></p>
<p>所以，如果你要加谁都可以访问的图片列表页，只要把下面一段代码加到它们中间好了。  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/image/page/list"</span>&gt;</span>Image List<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://thinkingincrowd.u.qiniudn.com/08-access-control-image-list-stage-1.png" alt="Image List - Stage 1"></p>
<p>不过由于我们的页面没有任何控制，所以 <code>Create</code> 按钮和列表里面的 <code>Action</code> 操作栏都存在，所以我们要改进一下。同上面的原理一样，我们可以在 <code>/view/image/imageList.html</code> 做一点小改动：  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Image List<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-12"</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 10px"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">typeof</span>(<span class="attr">currentUser</span>) !== <span class="string">'undefined'</span> &amp;&amp; <span class="attr">currentUser</span>) &#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pull-left"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">v-on:click</span>=<span class="string">"createImage"</span>&gt;</span>Create<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">// 省略</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> isLogin = <span class="literal">false</span></div><div class="line"><span class="keyword">var</span> userId = <span class="literal">null</span></div><div class="line"></div><div class="line">&lt;% <span class="keyword">if</span> (<span class="keyword">typeof</span>(currentUser) !== <span class="string">'undefined'</span> &amp;&amp; currentUser) &#123; %&gt;</div><div class="line">  isLogin = <span class="literal">true</span></div><div class="line">  userId = <span class="string">'&lt;%= currentUser._id %&gt;'</span></div><div class="line">&lt;% &#125; %&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span></div><div class="line">  <span class="attr">block</span>('<span class="attr">moduleScript</span>')<span class="attr">.append</span>(</div><div class="line">    <span class="attr">Loader</span>('/<span class="attr">public</span>/<span class="attr">build</span>/<span class="attr">imageList.min.js</span>')</div><div class="line">      <span class="attr">.js</span>('/<span class="attr">public</span>/<span class="attr">js</span>/<span class="attr">common</span>/<span class="attr">common.js</span>')</div><div class="line">      <span class="attr">.js</span>('/<span class="attr">public</span>/<span class="attr">js</span>/<span class="attr">image</span>/<span class="attr">imageList.js</span>')</div><div class="line">      <span class="attr">.done</span>(<span class="attr">assets</span>, <span class="attr">config.site_static_host</span>)</div><div class="line">  )</div><div class="line">%&gt;</div></pre></td></tr></table></figure>
<p>这里有一点点不同的就是，多了一个 <code>&lt;script&gt;</code> 标记。里面定义了一个 <code>isLogin</code>，<code>userId</code> 变量，然后根据用户是否登录来设置它的值，最后在 <code>/public/js/image/imageList.js</code> 里根据它们来决定是否把最后一列放到 <code>columns</code> 数组里面。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 省略</span></div><div class="line"></div><div class="line">&#125;, &#123;</div><div class="line">  field: <span class="string">'deleted'</span>,</div><div class="line">  title: <span class="string">'Deleted?'</span>,</div><div class="line">  width: <span class="number">60</span>,</div><div class="line">  align: <span class="string">'center'</span>,</div><div class="line">  halign: <span class="string">'center'</span>,</div><div class="line">  formatter: <span class="function"><span class="keyword">function</span>(<span class="params">value, row, index</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> value === <span class="literal">true</span> ? <span class="string">'Deleted'</span> : <span class="string">''</span></div><div class="line">  &#125;</div><div class="line">&#125;]</div><div class="line"></div><div class="line"><span class="keyword">if</span> (isLogin) &#123;</div><div class="line">  columns.push(&#123;</div><div class="line">    field: <span class="string">''</span>,</div><div class="line">    title: <span class="string">''</span>,</div><div class="line">    width: <span class="number">60</span>,</div><div class="line">    align: <span class="string">'center'</span>,</div><div class="line">    halign: <span class="string">'center'</span>,</div><div class="line">    events: &#123;</div><div class="line">      <span class="string">'click .edit'</span>: (e, value, row, index, activeBtn) =&gt; &#123;</div><div class="line">        $(<span class="string">'#imageId'</span>).val(row._id)</div><div class="line">        $(<span class="string">'#imageUrl'</span>).val(row.url)</div><div class="line">        $(<span class="string">'#gender'</span>).val(row.gender)</div><div class="line">        $(<span class="string">'#deleted'</span>).prop(<span class="string">'checked'</span>, row.deleted)</div><div class="line">        $(<span class="string">'#imageDialog'</span>).modal(<span class="string">'toggle'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    formatter: <span class="function"><span class="keyword">function</span>(<span class="params">value, row, index</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (row.createdUserId !== userId) &#123; <span class="comment">// 如果图片不是当前用户创建的，不能修改</span></div><div class="line">        <span class="keyword">return</span> <span class="string">''</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="string">`&lt;div class="btn-group dropdown"&gt;</span></div><div class="line">        &lt;button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"&gt;</div><div class="line">          Action &lt;span class="caret"&gt;&lt;/span&gt;</div><div class="line">        &lt;/button&gt;</div><div class="line">        &lt;ul class="dropdown-menu"&gt;</div><div class="line">          &lt;li class="edit"&gt;&lt;a href="#"&gt;Edit&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">      &lt;/div&gt;`</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</div><div class="line"><span class="comment">// 省略</span></div></pre></td></tr></table></figure>
<p>好了，页面处理完了，剩下就是控制后台如何区分登录还是没有登录，最后决定列出不同的图片给用户。  </p>
<h3 id="后端权限控制"><a href="#后端权限控制" class="headerlink" title="后端权限控制"></a>后端权限控制</h3><p>我们找到图片列表对应的 Controller，把查询的逻辑修改如下就可以了。<code>req.user</code> 就是获取登录用户的方式。如果没有这个信息，操作的就是没有登录的用户。  </p>
<p>查询数据库的时候，一般只要把 Model 里面的字段，和对应你想过滤的值，设到 params 里面就可以了，像没登录那种情况一下。  </p>
<p>不过这里还有一些特殊的符号，如 <code>$or</code>, <code>$ne</code>。它们是 MongoDB 的操作符，对应的意思是<code>或者</code>，<code>不等于</code>（not equal），详情可参考 MongoDB API。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">listImage</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  req.query.sort = <span class="string">'updatedAt'</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> params = parseRequestParams(req)</div><div class="line">  <span class="keyword">var</span> user = req.user</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!user) &#123;</div><div class="line">    <span class="comment">// 没登录</span></div><div class="line">    params.deleted = <span class="literal">false</span></div><div class="line">    params.status = IMAGE_CONSTANTS.STATUS_APPROVED</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!user.isAdmin) &#123;</div><div class="line">    <span class="comment">// 登录，普通用户</span></div><div class="line">    <span class="keyword">var</span> userId = user._id.toString()</div><div class="line"></div><div class="line">    params.$or = [&#123;</div><div class="line">        createdUserId: userId</div><div class="line">      &#125;, &#123;</div><div class="line">        createdUserId: &#123;$ne: userId&#125;,</div><div class="line">        deleted: <span class="literal">false</span>,</div><div class="line">        status: IMAGE_CONSTANTS.STATUS_APPROVED</div><div class="line">      &#125;]</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 管理员什么特殊处理也不需要</span></div><div class="line"></div><div class="line">  ImageManager.list(params)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">entities</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> res.json(parseResultForTable(entities))</div><div class="line">    &#125;)</div><div class="line">    .catch(next)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后的页面效果如下图：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/08-access-control-image-list-stage-2.png" alt="Image List - Stage 2"></p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ul>
<li>只有打开自己创建的图片，才能有修改的权限。（参考用户资料修改页面相关代码：<code>loadUserPage</code>, <code>/view/user/userProfile.html</code>, <code>/public/js/user/userProfile.js</code>）</li>
<li>管理员可以浏览，删除，修改，通过，或者拒绝任何图片。  </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;帐号登录验证和权限设置，可以说是任何一个系统都必须具备的基本功能。无论是电商，社交，还是企业系统，甚至连输入法等工具，都可以让你注册一个帐号。方式从最传统的帐号密码登录，到用社交帐号绑定不等。  &lt;/p&gt;
&lt;h2 id=&quot;登录验证（Authentication）&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Wechat" scheme="http://www.thinkingincrowd.me/tags/Wechat/"/>
    
      <category term="Node.js" scheme="http://www.thinkingincrowd.me/tags/Node-js/"/>
    
      <category term="Tutorial" scheme="http://www.thinkingincrowd.me/tags/Tutorial/"/>
    
      <category term="Access Control" scheme="http://www.thinkingincrowd.me/tags/Access-Control/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 微信后台搭建系列 - 视图</title>
    <link href="http://www.thinkingincrowd.me/2017/02/12/Node-js-Wechat-Web-App-Tutorial-View/"/>
    <id>http://www.thinkingincrowd.me/2017/02/12/Node-js-Wechat-Web-App-Tutorial-View/</id>
    <published>2017-02-12T07:25:00.000Z</published>
    <updated>2017-03-25T02:09:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然后端开发人员并不一定要学前端，自测也可以借助别的工具完成。但是，了解前端开发的特性，困难点，你才能更好地设计 API，成为一个前端人员乐意合作的好伙伴。  </p>
<h2 id="evergrow-脚手架生成的视图"><a href="#evergrow-脚手架生成的视图" class="headerlink" title="evergrow 脚手架生成的视图"></a>evergrow 脚手架生成的视图</h2><p>用 <code>evergrow</code> 脚手架生成视图相关的文件是非常方便的。要接着构建 <code>Image</code> 模块的视图，只需要用命令 <code>yo evergrow:view Image</code> 就能够生成表格和详情视图所需的 4 个基本文件。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/07-view-boilerplate.png" alt="View Boilerplate"></p>
<h3 id="模板引擎（Template-Engine）"><a href="#模板引擎（Template-Engine）" class="headerlink" title="模板引擎（Template Engine）"></a>模板引擎（Template Engine）</h3><p>生成上面的几个基本文件后，其实你在浏览器输入 <code>http://localhost:3000/image/page/list</code> 就能够看到如下的默认表格视图。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/07-view-default-list.png" alt="Default List"></p>
<p>根据上一章节的教程，应该不难从代码里找到路由对应的 Controller 为：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">listImagePage</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  res.render(<span class="string">'image/imageList'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和之前介绍的 RESTful API 不同，<code>res</code> 在这里调用的是 <code>render</code> 方法。这个方法调用模板引擎去寻找匹配的视图模板，处理后返回给前端。<strong>模板引擎最基本的作用</strong>是什么呢？  </p>
<ul>
<li><strong>编译</strong>。浏览器要渲染的视图，是 HTML 格式的文本。我们可以用其它格式（如 Jade）来编写视图模板，再由模板引擎编译成 HTML。  </li>
<li><strong>填充动态数据，控制显示样式</strong>。比如，论坛页面可以根据打开用户判断，自己发的帖子或回复能有编辑按钮，其它人就没有。  </li>
</ul>
<p>具体 Express 框架里怎么使用模板引擎我就不详细介绍了，感兴趣的同学可以看<a href="http://expressjs.com/en/guide/using-template-engines.html" target="_blank" rel="external">官方文档</a>。在 evergrow 框架里面，具体的配置在 <code>server-manager.js</code>：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// View engine</span></div><div class="line">app.set(<span class="string">'views'</span>, <span class="string">'./view/'</span>) <span class="comment">// 模板放置的文件夹</span></div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>)</div><div class="line">app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">'ejs-mate'</span>)) <span class="comment">// 我们选择的模板引擎是 EJS</span></div></pre></td></tr></table></figure>
<h2 id="HTML-amp-CSS"><a href="#HTML-amp-CSS" class="headerlink" title="HTML &amp; CSS"></a>HTML &amp; CSS</h2><p>上述路由对应的页面 <code>/view/image/imageList.html</code> 是一个包含了表格的视图。表格是一种相当常见的表现形式，尤其在企业级系统和后台管理页面。它多数用于展示多个同级别的数据。  </p>
<p>实现这个页面的代码其实很简单，HTML 的视图模板和 JavaScript 加起来才 100 行左右的代码。必须注意的是<strong>一开始别深入细节，先从整体结构上面来理解</strong>。  </p>
<p>我们来解构一下 HTML 视图模板。页面分了五大部分：  </p>
<ol>
<li>标题（<code>h2</code> 标签）  </li>
<li>工具栏按钮（<code>button</code> 标签）  </li>
<li>表格（<code>table</code> 标签，下图中的蓝色框部分）  </li>
<li>编辑数据的弹窗（<code>modal</code>，默认隐藏，绿色框部分）  </li>
<li>外部 JavaScript 文件引用（最下面）  </li>
</ol>
<p><img src="http://thinkingincrowd.u.qiniudn.com/07-view-default-list-code.png" alt="Default List Code"></p>
<p>HTML 语言强调的是页面布局。默认情况下，块状元素 <code>h2</code>, <code>table</code>, <code>div</code> 它们就像叠积木一样从上往下堆叠在一起。所以，写前端最基本就是要想好整个页面，是怎么切割成一个个盒子模型（box model），然后组装在一起。  </p>
<p>CSS 能更丰富和精确地定位和布局页面。非纯前端不用了解太细，碰到什么常见的，看得懂就差不多了。比如说，<code>class=&quot;col-sm-12&quot;</code> 是 Bootstrap 框架的 <a href="http://getbootstrap.com/css/#grid" target="_blank" rel="external">Grid System</a>。Grid System 其实就是把你的屏幕像栅栏那样平均分割成 12 列。那个 CSS 的意思就是它的大小占满整个屏幕。  </p>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>用 HTML 和 CSS 完成页面布局后，我们就需要用 JavaScript 来为页面的元素赋予行为，比如为用户的鼠标点击做出反应。页面最下方 <code>&lt;% ... %&gt;</code> 中间的部分，其实是在后台被模板引擎执行的。怎么用你先不用理会，只要知道引用了 <code>common.js</code> 和 <code>imageList.js</code> 两个文件就可以了。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">  &lt;%</div><div class="line">    block(<span class="string">'moduleScript'</span>).append(</div><div class="line">      Loader(<span class="string">'/public/build/imageList.min.js'</span>)</div><div class="line">        .js(<span class="string">'/public/js/common/common.js'</span>)</div><div class="line">        .js(<span class="string">'/public/js/image/imageList.js'</span>)</div><div class="line">        .done(assets, config.site_static_host)</div><div class="line">    )</div><div class="line">  %&gt;</div><div class="line"><span class="string">``</span><span class="string">`  </span></div><div class="line"></div><div class="line">### Vue.js</div><div class="line"></div><div class="line">这个框架是一个轻量级的**双向数据绑定**的前端框架，我们只需要知道最基本的使用方法就够了。我们对着 `/public/js/image/imageList.js<span class="string">` 里面的代码一点点来看吧。  </span></div><div class="line"></div><div class="line">首先 `el: <span class="string">'#imageList'</span><span class="string">` 对应了上图红色框框 `</span>id=<span class="string">"imageList"</span><span class="string">` 部分。它表示 Vue.js 框架监控这个 `</span>id<span class="string">` 对应的元素里面包含的所有元素。  </span></div><div class="line"></div><div class="line">#### 数据</div><div class="line"></div><div class="line">[Data Binding]: http://v1.vuejs.org/guide/syntax.html</div><div class="line"></div><div class="line">`data<span class="string">` 部分是 Vue.js 要监控的 **数据**。如果页面的元素用到了这些数据，当你代码改变这些数据的时候，页面引用的地方也会相应更改。`</span>url<span class="string">` 在黄色框框的 `</span>:data-url=<span class="string">"url"</span><span class="string">` 使用了。`</span>:<span class="string">` 这个小冒号就是让 Vue.js 监控它的意思，并把 `</span>url<span class="string">` 对应的数据 `</span><span class="string">'/image'</span><span class="string">` 赋值给 `</span>data-url<span class="string">` 这个给 `</span>bootstrap-table<span class="string">` 库在绘制表格时用到的参数。小冒号是 `</span>v-bind:<span class="string">` 的缩写。都是 Vue.js 的 [Data Binding][] 语法。仔细看看 `</span>pageList<span class="string">` 在页面的使用有什么不同？  </span></div><div class="line"></div><div class="line">`<span class="string">``</span>javascript</div><div class="line">  data: &#123;</div><div class="line">    url: <span class="string">'/image'</span>,</div><div class="line">    pageList: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>],</div><div class="line">    errorMsg: <span class="string">''</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h4><p><code>methods</code> 部分是 Vue.js 监控的<strong>行为</strong>。第一个行为就是点击工具栏的 <code>Create</code> 按钮的时候，页面跳转到新建图片的页面。它的绑定方式是 <code>v-on:click=&quot;createImage&quot;</code>。另一个行为是在弹窗里修改完图片资料后，点击 Save 保存的。绑定的方式是 <code>@click=&quot;saveImage()&quot;</code>。后面一种写法也是缩写。无论绑定方法名，还是像后一种那样绑定表达式都是可以的。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  createImage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">window</span>.location = <span class="string">'/image/page/load'</span></div><div class="line">  &#125;,</div><div class="line">  saveImage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> id = $(<span class="string">'#imageId'</span>).val()</div><div class="line"></div><div class="line">    <span class="keyword">let</span> params = &#123;</div><div class="line">      method: <span class="string">'post'</span>,</div><div class="line">      url: <span class="string">'/image/'</span> + id,</div><div class="line">      data: &#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ajaxRequest(params, (data) =&gt; &#123;</div><div class="line">      $(<span class="string">'#imageTable'</span>).bootstrapTable(<span class="string">'refresh'</span>)</div><div class="line">      $(<span class="string">'#imageDialog'</span>).modal(<span class="string">'toggle'</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Vue.js 的这些绑定方式，在编程里属于<strong>声明式编程</strong>。HTML 和 CSS 语言其实也是声明式编程。下面我们通过对 jQuery 的学习，来对比一下<strong>命令式编程</strong>的不同之处。  </p>
<h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>仅仅在 HTML 里面用一个 <code>table</code> 标签其实是不足够的，里面的标题和内容还需要 <code>thead</code>，<code>tbody</code>，<code>tr</code> 和 <code>td</code> 等标签才能完成。所以，代码里其实通过调用 <code>bootstrap-table</code> 这个库，按照我们的配置，包括获取数据的路由，和要显示的列等生成你们看到的表格。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> columns = [&#123;</div><div class="line">  field: <span class="string">'createdAt'</span>,</div><div class="line">  title: <span class="string">'Created At'</span>,</div><div class="line">  width: <span class="number">60</span>,</div><div class="line">  align: <span class="string">'center'</span>,</div><div class="line">  halign: <span class="string">'center'</span>,</div><div class="line">  formatter: timeFormatter</div><div class="line">&#125;, &#123;</div><div class="line">  field: <span class="string">'createdUser'</span>,</div><div class="line">  title: <span class="string">'Created By'</span>,</div><div class="line">  width: <span class="number">60</span>,</div><div class="line">  align: <span class="string">'center'</span>,</div><div class="line">  halign: <span class="string">'center'</span></div><div class="line">&#125;, &#123;</div><div class="line">  field: <span class="string">'updatedAt'</span>,</div><div class="line">  title: <span class="string">'Updated At'</span>,</div><div class="line">  width: <span class="number">60</span>,</div><div class="line">  align: <span class="string">'center'</span>,</div><div class="line">  halign: <span class="string">'center'</span>,</div><div class="line">  formatter: timeFormatter</div><div class="line">&#125;, &#123;</div><div class="line">  field: <span class="string">'updatedUser'</span>,</div><div class="line">  title: <span class="string">'Updated By'</span>,</div><div class="line">  width: <span class="number">60</span>,</div><div class="line">  align: <span class="string">'center'</span>,</div><div class="line">  halign: <span class="string">'center'</span></div><div class="line">&#125;, &#123;</div><div class="line">  field: <span class="string">'deleted'</span>,</div><div class="line">  title: <span class="string">''</span>,</div><div class="line">  width: <span class="number">60</span>,</div><div class="line">  align: <span class="string">'center'</span>,</div><div class="line">  halign: <span class="string">'center'</span>,</div><div class="line">  formatter: <span class="function"><span class="keyword">function</span>(<span class="params">value, row, index</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> value === <span class="literal">true</span> ? <span class="string">'Deleted'</span> : <span class="string">''</span></div><div class="line">  &#125;</div><div class="line">&#125;, &#123;</div><div class="line">  field: <span class="string">''</span>,</div><div class="line">  title: <span class="string">''</span>,</div><div class="line">  width: <span class="number">60</span>,</div><div class="line">  align: <span class="string">'center'</span>,</div><div class="line">  halign: <span class="string">'center'</span>,</div><div class="line">  events: &#123;</div><div class="line">    <span class="string">'click .edit'</span>: (e, value, row, index, activeBtn) =&gt; &#123;</div><div class="line">      $(<span class="string">'#imageId'</span>).val(row._id)</div><div class="line">      $(<span class="string">'#imageDialog'</span>).modal(<span class="string">'toggle'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  formatter: <span class="function"><span class="keyword">function</span>(<span class="params">value, row, index</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`&lt;div class="btn-group dropdown"&gt;</span></div><div class="line">      &lt;button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"&gt;</div><div class="line">        Action &lt;span class="caret"&gt;&lt;/span&gt;</div><div class="line">      &lt;/button&gt;</div><div class="line">      &lt;ul class="dropdown-menu"&gt;</div><div class="line">        &lt;li class="edit"&gt;&lt;a href="#"&gt;Edit&lt;/a&gt;&lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;`</div><div class="line">  &#125;</div><div class="line">&#125;]</div><div class="line"></div><div class="line"><span class="comment">// 省略中间部分</span></div><div class="line"></div><div class="line">ready: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'#imageTable'</span>).bootstrapTable(&#123;</div><div class="line">    columns: columns,</div><div class="line">    queryParams: (p) =&gt; &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">in</span> self.params) &#123;</div><div class="line">        p[v] = self.params[v]</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> p</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当页面的元素准备好后， <code>ready</code> 方法会被调用。jQuery 库（也就是这个美元符号 <code>$</code>）根据我们提供的 ID <code>#imageTable</code>，还有表格列的定义 <code>columns</code> 来生成。  </p>
<p>那么，我们要在表格加上 <code>image-model.js</code> 里面用到的 <code>gender</code> 和 <code>url</code> 数据，只需要多加两列的配置就可以了。通过提供一个 <code>formatter</code> 方法，还能自定义数据的显示方式。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  field: <span class="string">'url'</span>,</div><div class="line">  title: <span class="string">'Image'</span>,</div><div class="line">  width: <span class="number">60</span>,</div><div class="line">  align: <span class="string">'center'</span>,</div><div class="line">  halign: <span class="string">'center'</span>,</div><div class="line">  formatter: <span class="function"><span class="keyword">function</span>(<span class="params">value, row, index</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (value) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">`&lt;a href="/image/page/load/<span class="subst">$&#123;row._id&#125;</span>"&gt;&lt;img src="<span class="subst">$&#123;value&#125;</span>" width="50px" height="50px"&gt;&lt;/a&gt;`</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span></div><div class="line">  &#125;</div><div class="line">&#125;, &#123;</div><div class="line">  field: <span class="string">'gender'</span>,</div><div class="line">  title: <span class="string">'Gender'</span>,</div><div class="line">  width: <span class="number">60</span>,</div><div class="line">  align: <span class="string">'center'</span>,</div><div class="line">  halign: <span class="string">'center'</span>,</div><div class="line">  formatter: <span class="function"><span class="keyword">function</span>(<span class="params">value, row, index</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span>(value) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'F'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'女'</span></div><div class="line">      <span class="keyword">case</span> <span class="string">'M'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">'男'</span></div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://thinkingincrowd.u.qiniudn.com/07-view-customized-list.png" alt="Customized List"></p>
<h4 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h4><p>打开详情页是编辑数据的一种方式。不过，在单页面应用，或者想提供一种更便捷的数据更改方式的话，弹窗也是一种使用手段。  </p>
<p>在操作列有一个下拉菜单，里面的选项通过 <code>li</code> 标签实现。把它的 <code>class</code> 属性值 <code>edit</code> 和事件定义 <code>events</code> 里面的点击事件（<code>click</code>）绑定后，点菜单项就会触发 Event Handler 里面的两行代码，弹窗就显示出来了。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">events: &#123;</div><div class="line">  <span class="string">'click .edit'</span>: (e, value, row, index, activeBtn) =&gt; &#123;</div><div class="line">    $(<span class="string">'#imageId'</span>).val(row._id)</div><div class="line">    $(<span class="string">'#imageDialog'</span>).modal(<span class="string">'toggle'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 省略中间部分</span></div><div class="line"></div><div class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"edit"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>Event Handler 里面的两行代码其实就是命令式编程的形式（一步一步教电脑怎么做）：  </p>
<ol>
<li>获取页面 ID 为 <code>imageId</code> 的元素：<code>$(&#39;#imageId&#39;)</code>  </li>
<li>把数据 ID 赋值给它：<code>.val(row._id)</code>  </li>
<li>获取弹窗元素：<code>$(&#39;#imageDialog&#39;)</code>  </li>
<li>显示：<code>.modal(&#39;toggle&#39;)</code>  </li>
</ol>
<p>相应的，<code>saveImage</code> 方法里面也是一步步列出保存数据到服务器前要经过的步骤：  </p>
<ol>
<li>获取数据  </li>
<li>准备参数并提交服务器  </li>
<li>成功后刷新表格，隐藏弹窗  </li>
</ol>
<p><img src="http://thinkingincrowd.u.qiniudn.com/07-view-default-modal.png" alt="Detaul Modal"></p>
<p>默认的弹窗只有些象征性的文字，我们可通过下面的代码，实现修改 Model 里的 <code>gender</code> 和 <code>deleted</code> 数据的功能。（虽然图片链接不能直接改，但是因为接口限制了数据 <code>url</code> 不能为空，所以还是加上隐藏元素，保存时也一起发给服务器）  </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"imageUrl"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"gender"</span>&gt;</span>Gender<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"gender"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"F"</span>&gt;</span>Female<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"M"</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"deleted"</span>&gt;</span> Deleted？</div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">events: &#123;</div><div class="line">  <span class="string">'click .edit'</span>: (e, value, row, index, activeBtn) =&gt; &#123;</div><div class="line">    $(<span class="string">'#imageId'</span>).val(row._id)</div><div class="line">    $(<span class="string">'#imageUrl'</span>).val(row.url)</div><div class="line">    $(<span class="string">'#gender'</span>).val(row.gender)</div><div class="line">    $(<span class="string">'#deleted'</span>).prop(<span class="string">'checked'</span>, row.deleted)</div><div class="line">    $(<span class="string">'#imageDialog'</span>).modal(<span class="string">'toggle'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 省略中间部分</span></div><div class="line"></div><div class="line">saveImage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> id = $(<span class="string">'#imageId'</span>).val()</div><div class="line">  <span class="keyword">var</span> gender = $(<span class="string">'#gender'</span>).val()</div><div class="line">  <span class="keyword">var</span> url = $(<span class="string">'#imageUrl'</span>).val()</div><div class="line"></div><div class="line">  <span class="keyword">var</span> params = &#123;</div><div class="line">    method: <span class="string">'post'</span>,</div><div class="line">    url: <span class="string">'/image/'</span> + id,</div><div class="line">    data: &#123;</div><div class="line">      gender: gender,</div><div class="line">      url: url</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ajaxRequest(params, (data) =&gt; &#123;</div><div class="line">    $(<span class="string">'#imageTable'</span>).bootstrapTable(<span class="string">'refresh'</span>)</div><div class="line">    $(<span class="string">'#imageDialog'</span>).modal(<span class="string">'toggle'</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://thinkingincrowd.u.qiniudn.com/07-view-customized-modal.png" alt="Customized Modal"></p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ul>
<li>修改详情页 <code>/view/image/imageProfile.html</code> 和 <code>/js/image/imageProfile.js</code> 实现图片和字段 <code>gender</code>, <code>deleted</code> 的显示，并且能够修改字段 <code>gender</code>, <code>deleted</code>。</li>
</ul>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul>
<li>前端页面通过 Ajax 拿数据和 JavaScript 逻辑也可以动态往页面添加数据和控制样式，那用模板引擎来处理有什么好处呢？  </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然后端开发人员并不一定要学前端，自测也可以借助别的工具完成。但是，了解前端开发的特性，困难点，你才能更好地设计 API，成为一个前端人员乐意合作的好伙伴。  &lt;/p&gt;
&lt;h2 id=&quot;evergrow-脚手架生成的视图&quot;&gt;&lt;a href=&quot;#evergrow-脚手架生成的
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Wechat" scheme="http://www.thinkingincrowd.me/tags/Wechat/"/>
    
      <category term="Node.js" scheme="http://www.thinkingincrowd.me/tags/Node-js/"/>
    
      <category term="Tutorial" scheme="http://www.thinkingincrowd.me/tags/Tutorial/"/>
    
      <category term="View" scheme="http://www.thinkingincrowd.me/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>2016 会是我的转折点吗？</title>
    <link href="http://www.thinkingincrowd.me/2016/12/31/2016-retrospect-and-2017-goal-setting/"/>
    <id>http://www.thinkingincrowd.me/2016/12/31/2016-retrospect-and-2017-goal-setting/</id>
    <published>2016-12-31T03:14:30.000Z</published>
    <updated>2016-12-31T03:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>2016 年对我和我的家人来说，是变化很大的一年。我离职了，从传统企业开发领域转到互联网领域，从珠海转战北京，只身漂泊异地。老婆年末也刚离职，打算专心在家休养和负责儿子的教育一段时间。  </p>
<h2 id="我为什么去北京"><a href="#我为什么去北京" class="headerlink" title="我为什么去北京"></a>我为什么去北京</h2><h3 id="外部诱因"><a href="#外部诱因" class="headerlink" title="外部诱因"></a>外部诱因</h3><p>当初，我加入了李笑来老师的「新生大学」社群，那时的社群 App 非常不稳定，经常有问题。有一次，我在 App 的群里收发不到消息，笑来老师做客服，让我加他微信。就这样，我加到了崇拜已久的人的微信。虽然正常来说没什么卵用。笑来老师一般不聊天，只发朋友圈。  </p>
<p>6 月份的时候，我突然看到笑来老师在微信朋友圈的一条动态：“求多个全栈工程师。求推荐，推荐成功大餐伺候”。虽然不知道笑来老师想干什么，但是心中种下了一颗种子，默默记着这件事情。  </p>
<p>凑巧的是，过后不久一位朋友想做一些事情，问我有没有空去北京帮忙几天。我因为当时还剩下好一些年假，本来就打算安排销假，所以就答应朋友了。请了两天年假，加上周末，准备飞去北京朋友那帮忙，顺便当旅游。出发前，我的心里就一直惦记着笑来老师朋友圈的那句话，反复念叨着：“我是不是可以尝试一下？”  </p>
<h3 id="内部诱因"><a href="#内部诱因" class="headerlink" title="内部诱因"></a>内部诱因</h3><p>从我 2004 年毕业后，我一直在珠海的两家港资公司做企业开发。我在东方海外货柜航运公司，参与开发公司的企业级航运系统也差不多 5 年了。在我离职前，这个系统主体功能已经开发完备，并上线了一段时间，逐步替换之前用 Smalltalk 写的系统。一些开发也陆续转移到用 Node.js 开发一些实验性项目，我和我带的几个小伙伴参与其中。  </p>
<p>虽然，我终于用上自己一直希望尝试实践的 Node.js 来做项目，但是更希望去看看互联网公司怎么使用。而且，我毕业后就一直在珠海待了 12 年，也做了企业 ERP 开发 12 年。在互联网迅猛发展的时代，我其实并没加入浪潮。我在想，自己年龄也不小了，如果这个时候还不去尝试和了解一下互联网的 2C 领域有什么不同，再过几年就很难再做大变动了。儿子刚要上二年级，父母已经退休并搬到珠海和我们定居。可能现在我短暂离开，儿子方面的照顾问题也不是很大。所以，我忍不住问老婆：“如果我有机会去外地工作一段时间，你支持我吗？” 我和她说笑来可能在找人，我去试试怎么样。得到老婆的许可，我终于忍不住问笑来老师：“你还要找全栈工程师吗？你看我可以吗？” 和笑来老师来回了几条微信，我和他说：“我迟些去北京，或许有机会见个面？” </p>
<h3 id="见面"><a href="#见面" class="headerlink" title="见面"></a>见面</h3><p>帮朋友忙活完事情，我约了笑来老师在他的住所见面，并一起吃盒饭（如果自荐算的话，说好的大餐伺候好像没下闻了）。我问他找全栈工程师是为了什么？他说想改变传统的软件工程师培训的模式，用 JavaScript 这门无论在前端，后端甚至桌面开发都能应用的语言来培训全栈工程师。对于一个想深入应用 JavaScript 开发的人而言，我听了当然很激动。笑来老师问了我一些问题，看我对 Node.js 这块和相关的工具链是否熟悉。当他问我是否拿 Node.js 做过什么 production 级别的产品时，我坦白地说：“没有。我只是做过一些工具，pet project 和公司内部的一些实验性项目”。他也很坦白地回复我：“你别介意啊。你现在可能还镇不住场子。” 这个我当然能理解，而且这也是我寻求机会实践的原因。后面笑来老师再和我分享了他的一些想法，并说他晚上约了 xdite 谈培训方面的事情。下午参观了一下新生大学，见到了 CTO，并大家聊了一下笑来老师的那些关于全栈培训的想法。由于我要赶飞机回珠海，所以那天并无缘见到 xdite 老师。  </p>
<p>当天晚上，天气原因，我回北京的飞机取消了，被迫在机场待了一个晚上。我一直在想，笑来老师这次的见面，最后也没有说我是否通过了面试，我也不知道如果我去了，是具体做什么，只是和培训相关。就这样，我带着兴奋和疑惑回了珠海。  </p>
<h3 id="启程"><a href="#启程" class="headerlink" title="启程"></a>启程</h3><p>回到珠海后，基本没怎么多纠结，我就基本决定离职了。主要考虑的两点是：  </p>
<ol>
<li><p>技术上，如果新生大学内已经使用 Node.js 很牛了，那正是我学习的机会。如果也只是开始阶段，那也能让自己参与实际项目来深入实践。  </p>
</li>
<li><p>方向上，教育培训领域也是我感兴趣，并在之前的公司实践过一段时间的事情。我带过不少新人，也参与不少企业内培训。其实我一直都挺喜欢相互分享和学习的。  </p>
</li>
</ol>
<h3 id="实际工作"><a href="#实际工作" class="headerlink" title="实际工作"></a>实际工作</h3><p>7 月 11 日我到新生大学上班，王秒都不知道原来有人要入职。说明来意后，一开始我就和运营坐一块，然后和 xdite 的助理聊了一下，并熟悉第一期培训班相关事宜。  </p>
<p>后来，我兼职参加第一期培训班当助教，并把新生大学的浓缩书独立出来成为一个外部系统。国庆前后又全副精力转战到公众号「一块听听」的后台开发。  </p>
<p>其实来了新生大学后，做的事情和笑来老师当初分享的全栈工程师培训方面的工作有点出入。我也转了两个项目。笑来老师的想法是太多了。所以后来他在「一块听听」里面的「和时间做朋友的这十年」分享他失败的经历，说到他可能自己并不是一个好的产品经理时，我也会心一笑。他说他把「新生大学」做的太复杂了，现在希望能把「一块听听」做尽量简单。即便我也认为「一块听听」是比「新生大学」简单很多，但我觉得还是应该更专注和简单些。中间也还是走了些弯路。  </p>
<p>不过，我觉得做「一块听听」还是很有意思的。我也从中体会到 2C 领域和企业内项目的区别。  </p>
<ul>
<li><p>企业项目基本是按照公司业务方向走，领域都比较清晰。用户都是员工，所以需求都以协助线下业务为主，基本上能跑通流程，和把功能做得顺畅好用就行。企业内探索新方向的项目，如果是原有业务方向的突破，难度非常大。即要求产品和项目领导人有资深的业务能力，又需要跨部门和领域协调，还可能要打破原有的业务。方向和决心很重要，而且内部壁垒重重。  </p>
</li>
<li><p>2C 的领域，虽然业务方向还是按老板想法出发，并受之影响。但是用户的群体和多样性多了很多。大众用户是否认同和愿意参与，就不是老板说了算了。像「一块听听」的领域，我们既要照顾分享者，那些大中小 V，也要慎重考虑听众。当我们考虑从听众出发，还是从分享者出发，甚至以大中小V 哪个为主，考虑的角度不同，最后打造的产品就截然不同。运营和引流的方式也不同。  </p>
</li>
</ul>
<p>我想我后续的精力主要还是会在「一块听听」上面。虽然和原先设想的全栈工程师培训有点出入，但是这个产品也是知识分享领域内的一种探索，而且我能从头参与它的开发，上线，业务调整，优化等。期间对产品的思考，Node.js 的深入实践，架构调整和性能优化都是很有意思的。期待这个产品越走越好。  </p>
<h2 id="个人成长"><a href="#个人成长" class="headerlink" title="个人成长"></a>个人成长</h2><p>一个人在北京，对我来说，最重要的就两点：</p>
<ol>
<li>健康  </li>
<li>成长  </li>
</ol>
<p>这两点都是对自己和家人负责，所以我的时间都分配到这两大块上面。  </p>
<h3 id="锻炼健身"><a href="#锻炼健身" class="headerlink" title="锻炼健身"></a>锻炼健身</h3><p>健康主要通过每天的锻炼和健身。来北京前，零散的举哑铃和练引体向上。一星期跑两次 5 公里左右。来了北京后一开始根据囚徒健身那本书练习，打下一些基础。最近两个月因为健身房有优惠活动，所以去玩耍一下。年后可能会回归囚徒多一些，如果公司新办公室有了健身房，那还是会玩一下。成果上来说，肌肉长了 1 kg 左右，脂肪掉了 1.5 kg。变化不是太大，但是对于我这易瘦体质来说，算是差不多了。最重要的是坚持，健康就好。  </p>
<h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><h4 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h4><p>2016 年里，我总共在公众号写了下面一些文章。也终于能够在 9 月 23 号申请原创，10 月 17 日申请赞赏。  </p>
<ul>
<li><a href="http://www.thinkingincrowd.me/2016/01/02/Modulization-and-Bundling-with-TypeScript-and-Webpack-for-JS-Full-Stack-Project/">在 JavaScript 全栈项目里面如何模块化以及用 TypeScript 和 Webpack 打包文件</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/03/08/How-to-delegate/">如何授权和分配工作</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/03/08/Novice-vs-Experienced/">有经验和没经验的程序员的区别</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/03/13/transition-to-managing-others/">转变到“管理他人”的路上最容易摔倒的地方</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/03/18/I-believe-I-can-change/">I Believe I Can Fly</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/04/21/How-to-Read-a-Book/">什么样的读书姿势才正确</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/05/16/How-to-use-Sinon-js-to-test-Ajax-in-ExtJS/">How to use Sinon.js and ExtPromise to test Ajax in ExtJS</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/06/05/How-to-make-long-running-loop-breakable/">How to make long running loop breakable?</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/06/06/How-to-avoid-Stack-overflow-error-on-recursive/">How to avoid Stack overflow error on recursion</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/06/09/prototype-chain-and-relationship-among-prototype-proto-and-constructor-in-JavaScript/">Prototype chain, and relationship among prototype, <strong>proto</strong> and constructor in JavaScript</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/07/10/Milestones-in-Life/">人生中哪一个阶段才是最重要的？</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/08/03/How-to-protect-your-most-valuable-treasure/">如何保证自己最重要的财富不被偷走？</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/08/28/What-is-programming-should-I-learn/">编程是什么？我要学吗？</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/08/31/my-programming-path/">一个野生程序员的成长之路</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/09/04/Why-I-choose-convict-conditioning/">我为什么选择囚徒健身？</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/09/15/Capability-for-Learning-Programming-Abstraction/">学习编程需要具备的基本能力 - 抽象</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/09/16/Capability-for-Learning-Programming-Breakdown/">学习编程需要具备的基本能力 - 问题分解</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/09/17/Capability-for-Learning-Programming-Ask-Wisely/">学习编程需要具备的基本能力 - 正确提问</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/09/29/Leave-the-past-behind-and-move-on/">这些年，放下，前行的点滴和感触</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/10/12/Importance-of-Breakdown-and-read-thoroughly/">问题分解和逐字阅读的重要性 - 青云部署小记</a>  </li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDEwMDk2NQ==&amp;mid=2649704313&amp;idx=1&amp;sn=c2ce04c42fb3a54c3338d958cc8211d2&amp;chksm=f1791d73c60e9465e9dca0ce33c3bef44e378dbe55a06c7e297b2207acec752ee837cba90990&amp;scene=21#wechat_redirect" target="_blank" rel="external">雾霾中的一缕阳光和小确幸</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/10/22/Back-to-basics-Wechat-Development/">第一原理 - 微信开发小记</a>  </li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDEwMDk2NQ==&amp;mid=2649704320&amp;idx=1&amp;sn=3aadf88f808e51f1d05a0089865b6ebd&amp;chksm=f1791d8ac60e949c8584cd36c1f8e32ee6eb482b6da5b81bb290c13da2ccdee7a20a6456b72d&amp;scene=21#wechat_redirect" target="_blank" rel="external">打算建一个 JavaScript 学习群</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDEwMDk2NQ==&amp;mid=2649704323&amp;idx=1&amp;sn=e536097904fcc880b7fcb5be68d6777e&amp;chksm=f1791d89c60e949f19752a082c6945ba9c13c2c697c23a47767711e2a5b8b5b3c77fcd1dfa81&amp;scene=21#wechat_redirect" target="_blank" rel="external">如何一个命令生成 Node.js Web Application</a>  </li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDEwMDk2NQ==&amp;mid=2649704326&amp;idx=1&amp;sn=f8c07cbef0c287980a549387db25f7c7&amp;chksm=f1791d8cc60e949a6673ba2901f6f6b7080bb635d92bb7ecf4a78fce33c8596e02cfa3666fca&amp;scene=21#wechat_redirect" target="_blank" rel="external">写作，英语，编程，我到底应该学哪个？怎么够时间？</a>  </li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDEwMDk2NQ==&amp;mid=2649704333&amp;idx=1&amp;sn=c8f5e3b7ed51f42afef4de0ca01aa25f&amp;chksm=f1791d87c60e94912e8be19221574df48fa0f78499e344e35bccc0568e159fcffe309fc4e733&amp;scene=21#wechat_redirect" target="_blank" rel="external">人性的弱点，是如何影响独立思考和发表见解</a>  </li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDEwMDk2NQ==&amp;mid=2649704339&amp;idx=1&amp;sn=a415945b8ecc8f3181a1a8f44ae813e1&amp;chksm=f1791d99c60e948f6823cd78fe69eedeff76951fae767803eae10b89a4e7811b3c34c3009242&amp;scene=21#wechat_redirect" target="_blank" rel="external">答一位前端初学者的困惑</a>  </li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDEwMDk2NQ==&amp;mid=2649704348&amp;idx=1&amp;sn=2127f084087ceb491378060b3b814afd&amp;chksm=f1791d96c60e948010d12d22dc6b590de7923e85cb30177ace92d6e156b5989a82bd843be5ff&amp;scene=21#wechat_redirect" target="_blank" rel="external">「垫底辣妹」背后的力量</a>  </li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzI0NDEwMDk2NQ==&amp;mid=2649704358&amp;idx=1&amp;sn=f00f2756fb62d7c1bcedcde60afa61f4&amp;chksm=f1791dacc60e94bad1b9506ba1f4946721a4d2cd1596bf0396e54507d0d3d25293b70ea36813&amp;scene=21#wechat_redirect" target="_blank" rel="external">永远值得尊重的专业人士</a>  </li>
</ul>
<h3 id="JavaScript-全栈培训系列"><a href="#JavaScript-全栈培训系列" class="headerlink" title="JavaScript 全栈培训系列"></a>JavaScript 全栈培训系列</h3><p>因为本来打算在 JavaScript 培训做些事情嘛，同时自己总结和回顾一些知识，所以做了下面一些不同的东西。  </p>
<h4 id="Tasting-JavaScript"><a href="#Tasting-JavaScript" class="headerlink" title="Tasting JavaScript"></a>Tasting JavaScript</h4><p>自己为了锻炼英语和写作，就尝试写这一本英文版的 JavaScript <a href="https://leanpub.com/tasting-javascript" target="_blank" rel="external">入门书</a>。从 06-22 日第一个 Commit 到现在。写了 7 章，基本把第一大部分 JavaScript 的基础写完了。包括：  </p>
<ol>
<li>简介和环境配置  </li>
<li>数据类型  </li>
<li>程序结构和流程  </li>
<li>函数  </li>
<li>对象和数组  </li>
<li>面向对象编程  </li>
<li>函数式编程  </li>
</ol>
<p>后面再加上 Error 和 Regex 就打算结束基本知识部分了。关于 Node.js 和 Browser 方面的两大部分只能留待明年，并等我把微信后台搭建教程搞完了再继续了。样本在微信后台搭建教程那个项目里面有链接下载。  </p>
<h4 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h4><p><a href="https://github.com/kenspirit/generator-evergrow" target="_blank" rel="external">Evergrow</a> 是自己弄的一个快速搭建 Node.js 的脚手架。因为考虑用来和基础 JavaScript 学习使用，就没有用 ES6 语法和包括编译打包部分，不想搞的太复杂。后面有机会我再看看是否用 TypeScript 重写吧，前端改成 AngularJS 2。  </p>
<h4 id="微信后台搭建教程"><a href="#微信后台搭建教程" class="headerlink" title="微信后台搭建教程"></a>微信后台搭建教程</h4><p>这个教程放在 <a href="https://github.com/kenspirit/javascript-study-group" target="_blank" rel="external">Github</a> 上面。目前已经写了 4 章：  </p>
<ol>
<li>环境配置  </li>
<li>数据建模  </li>
<li>业务逻辑  </li>
<li>路由和控制器  </li>
</ol>
<h4 id="JavaScript-学习群"><a href="#JavaScript-学习群" class="headerlink" title="JavaScript 学习群"></a>JavaScript 学习群</h4><p>这个学习群已经在新生大学里面建立。群人数不多，活跃人数更少。可能因为我定的群规比较严格，自己也不怎么会运作一个群。另一部分原因是，很多人其实说想学习一些东西，都是三分钟热度的。我看到那个「经济学的魅力」群，活跃人数一开始非常多，又买书又什么的，现在每周六群主分享的时候，估计人都很少，也没什么人提问。免费的知识分享，可能真的要重新考虑。  </p>
<p>所以，这个学习群，还是让那些真正想学习的人，跟着「微信后台搭建教程」那个项目走，我在上面回答问题，当个教练辅助一下好了。你自己不去健脑房，不动手，我怎么可能帮到你？我也真的没有精力，也没有必要照顾那些不是真正想学习的人。所以，我现在发现通过高价格来作为筛选门槛可能还是一种非常好的方式。既然现在没有筛选门槛，就看他们自己了。  </p>
<h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>2017 年应该会非常忙碌和充实。希望「一块听听」能不断成长，我也能和团队一起把它打造成 production 级别的稳定的产品。我那些未完成的个人作品，也会持续投入并完成它们。期待和老婆，家人共同成长，健健康康，寻找到更美好的生活。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016 年对我和我的家人来说，是变化很大的一年。我离职了，从传统企业开发领域转到互联网领域，从珠海转战北京，只身漂泊异地。老婆年末也刚离职，打算专心在家休养和负责儿子的教育一段时间。  &lt;/p&gt;
&lt;h2 id=&quot;我为什么去北京&quot;&gt;&lt;a href=&quot;#我为什么去北京&quot; cl
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Goal" scheme="http://www.thinkingincrowd.me/tags/Goal/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 微信后台搭建系列 - 路由和控制器</title>
    <link href="http://www.thinkingincrowd.me/2016/12/23/Node-js-Wechat-Web-App-Tutorial-Controller-Routing/"/>
    <id>http://www.thinkingincrowd.me/2016/12/23/Node-js-Wechat-Web-App-Tutorial-Controller-Routing/</id>
    <published>2016-12-23T15:00:39.000Z</published>
    <updated>2017-03-25T02:09:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>这一章我们要讲的是 <a href="https://en.wikipedia.org/wiki/Model–view–controller" target="_blank" rel="external">MVC</a> 的 C，也就是 Controller。在 Web Application 里谈到 Controller，我们就不可避免地要了解 <strong>MVC 对数据处理的流程</strong>和涉及<strong>路由</strong>这个概念。大家可以通过这个简略的流程图来辅助理解下面的一些概念。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/06-controller-routing-mvc-flow.png" alt="MVC Flow"></p>
<h2 id="MVC-处理流程和路由"><a href="#MVC-处理流程和路由" class="headerlink" title="MVC 处理流程和路由"></a>MVC 处理流程和路由</h2><p><a href="http://www.thinkingincrowd.me/2016/11/27/Node-js-Wechat-Web-App-Tutorial-Business-Logic/">http://www.thinkingincrowd.me/2016/11/27/Node-js-Wechat-Web-App-Tutorial-Business-Logic/</a></p>
<p>通过在浏览器输入上面的网址（URL），我们就能看到相应的网页内容。这背后其实是有相应的服务器，根据网址把与其相对应的内容返回给你。服务器由域名，也就是 <strong>www.thinkingincrowd.me</strong> 部分决定。而具体内容就是根据路径 <strong>2016/11/27/Node-js-Wechat-Web-App-Tutorial-Business-Logic</strong> 来定位的。  </p>
<p><strong>MVC 中的路由，就是路径和 Controller 的对应关系</strong>。</p>
<p>路由大致可分为两种：静态文件，和动态内容。但是它们的原理是一样的。静态文件的路由，就是那个路径直接对应了服务器背后的图片，HTML，JS 或者 CSS 等静态文件，服务器不需要额外处理，找到了就直接返回文件的内容。<strong>Web Application 中处理动态内容的路由，需要通过调用绑定的 Controller，再经过 Model 或业务逻辑层处理，最后把结果返回</strong>。服务器如果根据路径找不到对应的 Controller，一般会返回 404 状态，而你们就有可能见到这种类似的页面。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/06-controller-routing-404.png" alt="404 Page"></p>
<h2 id="Controller-控制器"><a href="#Controller-控制器" class="headerlink" title="Controller 控制器"></a>Controller 控制器</h2><p>Controller 的功能是什么呢？  </p>
<h3 id="收集用户提交的数据"><a href="#收集用户提交的数据" class="headerlink" title="收集用户提交的数据"></a>收集用户提交的数据</h3><p>浏览网页的时候，用户可能不需要提供额外的数据给服务器，只需要网址 URL 就可以了。但是，比如当我们要查询酒店信息，下订单的时候，我们还是要提交相应的数据让服务器处理。  </p>
<p>用户和服务器打交道，其实是通过 HTTP 协议提供的 GET, POST, PUT, PATCH, DELETE 等操作来实现的。  </p>
<ul>
<li><p>GET: 这种操作是从服务器获取数据。<strong>它不应该对你要获取的数据做任何的修改</strong>。当我们通过 GET 操作和服务器沟通的时候，数据是同 URL 网址一起传到服务器的，会受到长度的限制。  </p>
</li>
<li><p>POST: 这种操作是创建或更改后台数据。POST 操作的数据是放在请求体里面，并没有数据大小的限制。  </p>
</li>
</ul>
<p>大多数情况，我们用的是这两种 HTTP 操作，其它几种在一些旧的服务器中并不支持。所以，我们暂时了解 GET 和 POST 的不同，以及要注意的地方就够了。大家有时间可以看看<a href="http://www.restapitutorial.com/lessons/httpmethods.html" target="_blank" rel="external">这个简易教程</a>来了解其它 HTTP 操作，但不是必须。  </p>
<h3 id="转交给业务逻辑层处理"><a href="#转交给业务逻辑层处理" class="headerlink" title="转交给业务逻辑层处理"></a>转交给业务逻辑层处理</h3><p>很多新手，都会把大量的代码写到 Controller，使之变得越来越臃肿，庞大。究其原因，就是因为他们没法很好区分 M 和 C 的区别，并把代码组织得更加合理。我们写代码的时候，应该时刻考虑它们是应该放到 Controller，还是业务逻辑层。  </p>
<p>最关键的判断依据就是：<strong>Controller 里面只放和 V (View) 相关的逻辑，不同的 V，通常有不同的 C 来对应和处理。业务逻辑层的代码，不应该和 View 有关系，而是应该可以给不同的 Controller 和 View 共用</strong>。  </p>
<p>View 是什么？就是不同的表现层，不同的前端界面。同样的一个业务逻辑，是可以提供给不同的界面，比如 Web 页面，iOS，Android，邮件或者外部系统等。当然，现在大家可能无法很好的理解这一点。先留个印象，代码写的越多，就越有体会。  </p>
<h3 id="把业务逻辑层处理后的结果，按照要求的格式返回"><a href="#把业务逻辑层处理后的结果，按照要求的格式返回" class="headerlink" title="把业务逻辑层处理后的结果，按照要求的格式返回"></a>把业务逻辑层处理后的结果，按照要求的格式返回</h3><p>什么叫要求的格式呢？谁提出来的要求？前端。  </p>
<ul>
<li>对于静态页面来说，返回的是某一个 HTML 文件内容  </li>
<li>对于动态页面来说，返回的是填充了内容的 HTML 页面模板  </li>
<li>对于 Ajax 请求来说，返回的是 JSON 或者 XML 格式的数据  </li>
</ul>
<p>其实不同的格式要求，也是可以看作是不同 View 的其中一种情况。  </p>
<h2 id="evergrow-脚手架的路由和控制器"><a href="#evergrow-脚手架的路由和控制器" class="headerlink" title="evergrow 脚手架的路由和控制器"></a>evergrow 脚手架的路由和控制器</h2><p>现在我们来结合 evergrow 脚手架生成的代码，进一步理解上面说的基本概念和使用套路。  </p>
<h3 id="定义-Controller"><a href="#定义-Controller" class="headerlink" title="定义 Controller"></a>定义 Controller</h3><p>在<a href="./05-business-logic.md">业务逻辑层那一章</a>，我们讲到 CRUD 这四个最基本的数据操作。Controller <code>module/image/image-controller.js</code> 其实也包含了对应的几个方法：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  listImagePage: listImagePage,</div><div class="line">  loadImagePage: loadImagePage,</div><div class="line">  listImage: listImage,</div><div class="line">  loadImage: loadImage,</div><div class="line">  createImage: createImage,</div><div class="line">  updateImage: updateImage,</div><div class="line">  removeImage: removeImage</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em><code>listImagePage</code> 和 <code>loadImagePage</code> 是打开图片列表页和详情页的，就像你上淘宝或者京东那种产品列表和产品详情页。这个我们回头讲 View 的时候再展开，我们先来看其它的 CRUD 方法。</em>  </p>
<p>首先，我们来看读取单一图片数据的方法：  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImage</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  ImageManager.load(req.params.id)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">entity</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> res.json(buildApiResponse(entity))</div><div class="line">    &#125;)</div><div class="line">    .catch(next)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法是我们 MVC 的一个 Controller，但其实也是一个 <a href="http://expressjs.com/en/guide/writing-middleware.html" target="_blank" rel="external">Express 框架的中间件</a>。中间件是什么呢？我们来看下图：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/06-controller-routing-express-middleware.png" alt="Express Middleware"></p>
<ul>
<li>Req 是请求。它承载着请求的HTTP 操作（GET/POST），路径（URL），和参数等。  </li>
<li>Res 是回复。我们通过它决定什么时候返回，以及返回什么数据给发出请求的人或系统。  </li>
<li>Middleware 就是 Express 的中间件。  <ol>
<li>对应一个 URL 路径，我们可以设置一到多个中间件  </li>
<li>请求依次通过每一个中间件，如果没有中途返回（红色那些虚线）的话  </li>
</ol>
</li>
</ul>
<p>我们可以把中间件想像成流水线上负责不同生产步骤的工人。每一个工人都拿着上游传递过来的半成品（Req）进行检查或处理。如果某一位置的工人处理时发现半成品有问题，可以中途打回，如果没问题，加工后再传递到下一层。能顺利通过所有的检查和处理的，就到达业务逻辑层，最后经由（Res）返回成品。  </p>
<p>所以，上面的方法 <code>loadImage</code> 其实是最后一个 Middleware。数据到达这里开始交给业务逻辑层 <code>ImageManager</code> 处理。然后（then）通过调用 <code>res.json()</code> 方法返回 JSON (JavaScript Object Notation) 格式的数据。  </p>
<p>大家如果仔细看文件 <code>image-controller.js</code> 里面几个不同的 Controller，会发现有几个微小的 <code>req</code> 用法差异：</p>
<ul>
<li><code>req.query</code>  </li>
<li><code>req.params.id</code>  </li>
<li><code>req.body</code>  </li>
</ul>
<p>它们的作用都是从 <code>req</code> 里面获取用户请求的数据。具体的使用方法，将在下面讲解路由的时候结合说明。  </p>
<h4 id="延伸内容"><a href="#延伸内容" class="headerlink" title="延伸内容"></a>延伸内容</h4><p>Controller 里面有两个比较特别的东西。这里只做基本的解释，如果大家暂时觉得不好理解，可以先记住它们的作用，学会在框架里使用这种套路就好。  </p>
<ul>
<li><code>next</code>：它是一个函数。调用方法 <code>next()</code> 其实就会把控制权交到下一个 Middleware，把请求交给它处理。  </li>
<li><code>catch</code>：它能捕获上面处理业务逻辑时候的错误。把 <code>next</code> 放在这里，作用就是，当有错误发生的时候，Express 注册的<a href="http://expressjs.com/en/guide/error-handling.html" target="_blank" rel="external">错误处理中间件</a>就会处理这个错误。  </li>
</ul>
<h3 id="定义路由"><a href="#定义路由" class="headerlink" title="定义路由"></a>定义路由</h3><p>前面说到：<strong>MVC 中的路由，就是路径和 Controller 的对应关系</strong>。那在这个框架里面，我们怎么定义这个对应关系呢？答案就在 <code>module/image/image-routes.js</code>。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  method: <span class="string">'get'</span>,</div><div class="line">  path: <span class="string">'/'</span>,</div><div class="line">  summary: <span class="string">'Gets all Images'</span>,</div><div class="line">  description: <span class="string">''</span>,</div><div class="line">  action: ImageController.listImage,</div><div class="line">  validators: &#123;</div><div class="line">    query: joi.object().keys(&#123;</div><div class="line">      sort: joi.string().valid(<span class="string">'createdAt'</span>, <span class="string">'updatedAt'</span>),</div><div class="line">      direction: joi.string().valid(<span class="string">'desc'</span>, <span class="string">'asc'</span>).default(<span class="string">'desc'</span>),</div><div class="line">      limit: joi.number().integer().max(<span class="number">100</span>).default(<span class="number">10</span>),</div><div class="line">      page: joi.number().integer()</div><div class="line">    &#125;).with(<span class="string">'sort'</span>, <span class="string">'direction'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">  method: <span class="string">'post'</span>,</div><div class="line">  path: <span class="string">'/'</span>,</div><div class="line">  summary: <span class="string">'Creates Image'</span>,</div><div class="line">  description: <span class="string">''</span>,</div><div class="line">  action: ImageController.createImage</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">  method: <span class="string">'get'</span>,</div><div class="line">  path: <span class="string">'/:id'</span>,</div><div class="line">  summary: <span class="string">'Load Image profile'</span>,</div><div class="line">  description: <span class="string">''</span>,</div><div class="line">  action: ImageController.loadImage</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这三个路由，分别定义的对应关系是：  </p>
<ul>
<li>HTTP <code>GET</code> 和 URL <code>&#39;/&#39;</code> 对应了 <code>listImage</code>，也就是批量读取图片。  </li>
<li>HTTP <code>POST</code> 和 URL <code>&#39;/&#39;</code> 对应了 <code>createImage</code>，也就是创建图片。  </li>
<li>HTTP <code>GET</code> 和 URL <code>&#39;/:id&#39;</code> 对应了 <code>loadImage</code>，也就是读取单一图片。  </li>
</ul>
<p>因为在 <code>image-routes.js</code> 里还有这么一段：<code>module.exports.basePath = &#39;/image&#39;</code>，所以，批量读取图片的完整 URL 路径就是 <code>/image/</code>。<code>basePath</code> 的作用是为了隔离不同模块。  </p>
<p>这里有两大点要注意:  </p>
<ol>
<li>路由的定义和匹配，是按 HTTP 方法 + URL 两者来标识的。  </li>
<li>路由定义的顺序是有讲究的。在 <code>module.exports.routes</code> 数组里面，URL 和 Controller 的对应关系，是按顺序注册到 Express 框架里面的。所以，如果一不小心，顺序安排不当，前端发起的请求很可能就被意料之外的 Controller 拦截。  </li>
</ol>
<h3 id="REST-API-服务的测试"><a href="#REST-API-服务的测试" class="headerlink" title="REST API 服务的测试"></a>REST API 服务的测试</h3><p>到这里，其实我们可以测试一下那些能操作图片数据的服务了。没有页面测不了？作为后端开发者，肯定不能说要依赖页面才能测试自己写好的 REST API。下面我们来看看怎么使用 <a href="https://www.getpostman.com/" target="_blank" rel="external">Postman</a> 来做测试。  </p>
<p>我们先启动我们的项目。在命令行，进入项目目录，输入 <code>node index.js</code>。项目启动成功应该会输出类似的日志。  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/06-controller-routing-server-started.png" alt="Server Started"></p>
<p>然后我们启动 Postman：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/06-controller-routing-postman-started.png" alt="Postman Started"></p>
<h4 id="C-Create"><a href="#C-Create" class="headerlink" title="C - Create"></a>C - Create</h4><p>我们先通过它来创建一条图片记录：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/06-controller-routing-restful-create.png" alt="Create Image"></p>
<p>大家在红色框的地方输入相应的参数，然后点击 Send 按钮，就可以看到服务器给予正确的返回了。这样就表示数据库已经成功地创建了一条记录。  </p>
<p>Controller 里面使用的 <code>req.body</code> 所获取的数据，就是我们在 <code>Body</code> 这里输入的 JSON 数据。大家可以尝试一下，在 JSON 数据里面加多一些属性，比如 width, height 之类的，看能否保存到数据库。  </p>
<p>另外，我们其实还可以对传过去的参数做一定的限制和检查。如果我们把路由的定义稍微改一下，你们看如果一些数据不传有什么结果。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  method: <span class="string">'post'</span>,</div><div class="line">  path: <span class="string">'/'</span>,</div><div class="line">  summary: <span class="string">'Creates Image'</span>,</div><div class="line">  description: <span class="string">''</span>,</div><div class="line">  action: ImageController.createImage,</div><div class="line">  validators: &#123;</div><div class="line">    body: joi.object().keys(&#123;</div><div class="line">      url: joi.string().required(),</div><div class="line">      createdUserId: joi.string().required(),</div><div class="line">      sex: joi.string()</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/hapijs/joi" target="_blank" rel="external">joi</a> 还有更多有趣的用法，有兴趣的可以自己去了解一下。</p>
<h4 id="R-Read"><a href="#R-Read" class="headerlink" title="R - Read"></a>R - Read</h4><p>通过上面的练习和尝试，我们应该已经创建出来一些测试数据了。现在我们来测试读取记录。  </p>
<p>首先是读取某一条记录：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/06-controller-routing-restful-load.png" alt="Load Image"></p>
<p>服务器怎么知道我要读哪一条记录？Controller 里使用的 <code>req.params.id</code> 其实对应的是路由里配置的 <code>&#39;/:id&#39;</code>，它通过和真正的URL <code>http://localhost:3000/image/585699146c7b082fba163580</code> 进行匹配。截取出来的最后一段，就是记录的 <code>id</code>。  </p>
<p>批量读取多条记录的方式就如下图：  </p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/06-controller-routing-restful-list.png" alt="List Image"></p>
<p>大家可以看到，GET 请求的另一种传递参数方式是如何拼接到 URL 上面的。在 Controller 里面通过 <code>req.query</code> 就能获取到这些参数。大家可以通过在 Controller 里加上 <code>console.log(req.query)</code> 的方法来调试并打印数据出来看看。你们看到那些特殊的参数，是 evergrow 框架在批量读取数据时，支持的一些特定的系统参数。它们的作用是指示后台如何在数据量比较多的时候，分页返回记录。  </p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ul>
<li>你能够为 <code>Updates Image profile</code> 这个路由，完善好 <code>body</code> 的验证部分吗？可以给前面一章新加的 <code>approve</code> 方法，加对应的 Controller 和路由吗？  </li>
</ul>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul>
<li>大家看到 Controller 和 Manager 这个业务逻辑层有什么不同吗？哪些代码放在 Controller，哪些放在业务层？什么是和 View 相关的处理逻辑？  </li>
</ul>
<ul>
<li>扩展阅读：<a href="http://expressjs.com/en/guide/routing.html" target="_blank" rel="external">Express Routing Guide</a>。为什么我的写法和 Express 的不同？猜猜我为什么要这样定义，和尝试寻找在什么地方和 Express 结合的？  </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一章我们要讲的是 &lt;a href=&quot;https://en.wikipedia.org/wiki/Model–view–controller&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MVC&lt;/a&gt; 的 C，也就是 Controller。在 Web A
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Wechat" scheme="http://www.thinkingincrowd.me/tags/Wechat/"/>
    
      <category term="Node.js" scheme="http://www.thinkingincrowd.me/tags/Node-js/"/>
    
      <category term="Tutorial" scheme="http://www.thinkingincrowd.me/tags/Tutorial/"/>
    
      <category term="Controller" scheme="http://www.thinkingincrowd.me/tags/Controller/"/>
    
      <category term="Routing" scheme="http://www.thinkingincrowd.me/tags/Routing/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 微信后台搭建系列 - 业务逻辑层</title>
    <link href="http://www.thinkingincrowd.me/2016/11/27/Node-js-Wechat-Web-App-Tutorial-Business-Logic/"/>
    <id>http://www.thinkingincrowd.me/2016/11/27/Node-js-Wechat-Web-App-Tutorial-Business-Logic/</id>
    <published>2016-11-27T08:35:39.000Z</published>
    <updated>2017-03-25T02:09:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一章我们说到，<strong>数据建模其实就是为后台 MVC 模式里面的 Model 建模</strong>。那是不是 <a href="https://en.wikipedia.org/wiki/Model–view–controller" target="_blank" rel="external">MVC</a> 的 M 就仅仅是数据模型而已？其实 M 并不仅仅包含数据模型，它还包含对数据的处理，也就是业务逻辑部分。  </p>
<p>那数据的处理包含什么？什么算是业务逻辑呢？我们根据脚手架生成的代码来看一下。  </p>
<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>大家可以看上次通过命令 <code>yo evergrow:model Image</code> 生成出来的文件 <code>image-manager.js</code>，里面包含这样一部分代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</div><div class="line"><span class="keyword">var</span> ImageModel = <span class="built_in">require</span>(<span class="string">'./image-model'</span>)</div><div class="line"><span class="keyword">var</span> executeQuery = <span class="built_in">require</span>(<span class="string">'../../system/db-manager'</span>).executeQuery</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  list: list,</div><div class="line">  load: load,</div><div class="line">  create: create,</div><div class="line">  update: update,</div><div class="line">  remove: remove</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些代码是什么意思呢？<code>image-manager.js</code> 这个文件其实是一个模块，它后面可以被其它模块使用。同时它也引用了安装过的全局模块 <code>lodash</code> 和我们项目本身的 <code>image-model</code> 和 <code>db-manager</code> 这个两个模块。项目本身的模块用文件相对路径来引用，全局模块只需要名字就可以了。模块的概念现在在前端非常重要，虽然这在后端已经实践很久。<strong>分模块就是把代码分拆的足够小又不至于太小，也就是高度相关的应该放在一起，可以独立复用的就拆分</strong>。  </p>
<p><code>image-manager.js</code> 这个模块当被其它模块引用的时候，它提供了几个基础方法：<code>create</code> (C - Create), <code>load</code> (R - Read), <code>update</code> (U - Update), <code>remove</code> (D - Delete), <code>list</code> (批量 Read)。业界说的 <strong>CRUD 其实就是对最基本的数据操作</strong>。基本上任何系统，我们都需要 CRUD。  </p>
<h2 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h2><p>那业务逻辑是什么呢？简单来说，<strong>业务逻辑就是基于特定的条件，才做上面的基本数据操作</strong>。比如，数据处理前的验证，不同数据模型的相关性处理等。我们要实现的随机挑选图片的操作，就是一个业务逻辑。因为它的要求是<strong>可根据用户喜好，选择男性，女性或者任意用户上传的图片</strong>。这里就读 Read 这个操作做了特定条件的限制。所以，我们可以在这个 <code>image-manager.js</code> 里面添加一个叫 <code>random</code> 的方法。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getRandomIntInclusive = <span class="built_in">require</span>(<span class="string">'../../system/util'</span>).getRandomIntInclusive</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params">sex</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> params = &#123;&#125;</div><div class="line">  <span class="keyword">if</span> (sex) &#123;</div><div class="line">    params.sex = sex</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> list(params)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">matchedImages</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (matchedImages.totalCount === <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">var</span> imageToPick = getRandomIntInclusive(<span class="number">0</span>, matchedImages.totalCount - <span class="number">1</span>)</div><div class="line">      <span class="keyword">return</span> matchedImages.records[imageToPick]</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们一起来看看这个方法。它只依赖一个可选的参数 <code>sex</code>，也就是代表用户的偏好。如果有指定，就按照指定的性别查找，没有的话就什么条件都不用了。这个方法复用了 <code>list</code> 这个批量读取的方法，然后 (then) 调用一个获取随机整数的函数，从上一步获取的所有匹配的图片中，抽取一张。  </p>
<h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><p>延伸阅读的内容不是必须掌握的部分，也不影响你完成整个项目。大概了解概念也就可以了，有兴趣可以根据相关的链接，顺藤摸瓜地探索。  </p>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p><code>evergrow</code> 这个脚手架的操作，都是基于 Promise。有兴趣了解 Promise 的，可以看看我用的 bluebird 库的<a href="http://bluebirdjs.com/docs/getting-started.html" target="_blank" rel="external">文档</a>。从 <a href="http://bluebirdjs.com/docs/why-promises.html" target="_blank" rel="external">Why Promise</a> 看起。  </p>
<p>如果你目前觉得它太难，可以先不深入理解它的概念。你只要知道，你可以一直在后面接着 <code>then</code> 这样的套路也可以。<code>then</code> 其实就是<strong>然后</strong>的意思。<code>then</code> 的串就像是数据处理流水线一样，做完一步，拿着上一步的处理结果，再进行下一步。  </p>
<h3 id="ORM-和-Active-Record"><a href="#ORM-和-Active-Record" class="headerlink" title="ORM 和 Active Record"></a>ORM 和 Active Record</h3><p>当我们的数据存放在数据库的时候，我们怎么通过编程语言来和它打交道呢？在广泛使用 RDBMS 的时候，和数据库打交道一般都是通过 SQL 来处理。但是这在后端编程语言里面嵌入使用并不是太方便，尤其表的关联处理。那么在面向对象语言的风潮里，一个叫 ORM (Object-relational mapping) 的东西出来了。它的基本目的就是帮助我们把数据库的数据，映射到编程语言里面的一个对象上面，比如 JAVA 领域的 Hibernate。ORM 主要是让开发人员可以用回通过面向对象的数据处理手段来操作数据库，比直接 SQL 这个独立的语言简单些。  </p>
<p><a href="https://en.wikipedia.org/wiki/Active_record_pattern" target="_blank" rel="external">Active Record</a> 其实是一种架构模式，是 ORM 的一种特例。在 RDBMS 里，它把数据库的一个表映射到一个类上面。我们这里的情况是，<code>image-model.js</code> 里面引用的 <code>mongoose</code> 就是一个 ORM 框架，使用它可以把 MongoDB 里面的 collection 映射到一个 JavaScript 的对象里。<code>image-manager.js</code> 引用的 <code>ImageModel</code> 就是这样的一个对象。它默认带有 <code>create</code>, <code>update</code>, <code>remove</code> 等方法。我们通过操作这个对象，调用它的方法，修改它生成的新对象的属性，就可以修改数据库的值，添加或删除数据，进行数据库的操作。这种架构模式很方便，但是也有它的坏处。因为它把数据库的操作和单纯的数据对象绑定到一起，违反了单一责任的原则 (Single Responsibility Principle)，会导致不容易测试等问题。当你想单纯地创建一个数据对象的时候，你可能就要初始化依赖的数据库包。  </p>
<p>我这里写的 <code>image-manager.js</code> 其实把 <code>mongoose</code> 包了一层。除了统一写法外，我不想把对 <code>mongoose</code> 的依赖，把数据库的操作暴露到 MVC 的 C (Controller) 层。如果我以后不用 <code>mongoose</code>, 用回 <code>mongodb-native</code> 库，甚至要换数据库，都可以尽量降低影响面。后面讲 MVC 的 C 层时，会进一步详述怎么和 M 这一层分离。  </p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>我们如果要给图片加上一个状态，刚上传的图片默认是等待审核，也就是不能在 <code>random</code> 方法里面返回的。要等管理员审核通过后，才能用于交换。你能够修改相应的 Model，改 <code>random</code> 方法，和加一个 <code>approve</code> 的方法吗？  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一章我们说到，&lt;strong&gt;数据建模其实就是为后台 MVC 模式里面的 Model 建模&lt;/strong&gt;。那是不是 &lt;a href=&quot;https://en.wikipedia.org/wiki/Model–view–controller&quot; target=&quot;_blank
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Wechat" scheme="http://www.thinkingincrowd.me/tags/Wechat/"/>
    
      <category term="Node.js" scheme="http://www.thinkingincrowd.me/tags/Node-js/"/>
    
      <category term="Tutorial" scheme="http://www.thinkingincrowd.me/tags/Tutorial/"/>
    
      <category term="Business Logic" scheme="http://www.thinkingincrowd.me/tags/Business-Logic/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 微信后台搭建系列 - 数据建模</title>
    <link href="http://www.thinkingincrowd.me/2016/11/13/Node-js-Wechat-Web-App-Tutorial-Data-Modeling/"/>
    <id>http://www.thinkingincrowd.me/2016/11/13/Node-js-Wechat-Web-App-Tutorial-Data-Modeling/</id>
    <published>2016-11-13T08:20:39.000Z</published>
    <updated>2017-03-25T02:09:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇是 Node.js 搭建微信后台，实现图片交换功能教程的第一篇文章。前序准备书籍，工具可参考 Github 项目 <a href="https://github.com/kenspirit/javascript-study-group" target="_blank" rel="external">javascript-study-group</a>。感兴趣者也可加入学习小组。  </p>
<p>TLDR; 如果你想知道 Why，应该看前面的分析。如果你只是想寻找套路和捷径，怎么用 Generator 生成 Model，也就是 What and How，那可以直接跳到最后。  </p>
<h2 id="数据建模"><a href="#数据建模" class="headerlink" title="数据建模"></a>数据建模</h2><p>什么是<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1" target="_blank" rel="external">数据建模</a>？Wiki 上的解释是这样的：</p>
<blockquote>
<p>在软件工程中，数据建模是运用正式的数据建模技术，建立信息系统的数据模型的过程。<br>……<br>一个概念数据模型的实现可能需要多个逻辑数据模型。数据建模中的最后一步是确定逻辑数据模型到物理数据模型中到对数据，访问，性能和存储的具体要求。数据建模定义的不只是数据元素，也包括它们的结构和它们之间的关系。  </p>
</blockquote>
<p>这里强调的是在软件工程中的解释，因为它和数据分析领域的建模不太一样。<strong>数据建模其实就是为后台 MVC 模式里面的 Model 建模</strong>。小到一个功能，大到整个系统，数据建模的重要性都不容置疑。所以希望大家能认真结合实际项目理解清楚。上面的定义和解释比较抽象，但是每个词都可圈可点，尤其是第二段值得大家细细品味，我们通过下面的例子来说明一下。  </p>
<p>假如现在你要实现的系统，需要存储用户上传的图片，然后可以在要实现的图片交换功能上使用。那我们来想想，这个数据模型要怎么建立？  </p>
<h3 id="从归属和分区考虑"><a href="#从归属和分区考虑" class="headerlink" title="从归属和分区考虑"></a>从归属和分区考虑</h3><p>首先，应该不难理解，下面两大信息是要记录的。</p>
<ul>
<li>上传图片的用户信息  </li>
<li>图片信息  </li>
</ul>
<p>有没有说了等于白说的感觉？别着急。  </p>
<h4 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h4><p>一般来说，每个系统都要求用户必须注册后才能够操作。用户信息通常每个系统都存在，不论你是帐号密码登录，还是微博，微信登录等。  </p>
<p>在用脚手架 <a href="https://github.com/kenspirit/generator-evergrow" target="_blank" rel="external">Evergrow</a> 一键生成的系统里面，已经有现成的 User Model，在文件 <code>user-model.js</code> 里面。本教程使用的是 Node.js 系统一般会用到的 MongoDB 来存储数据。<code>mongoose</code> 是数据库的 <code>client</code>。后端编程无论什么语言，如果需要操作数据库，都必须有相应语言的 client 才行。你先不用太深究为什么这么写，因为这就是<strong>套路</strong>。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line"><span class="keyword">var</span> Schema = mongoose.Schema</div><div class="line"></div><div class="line"><span class="keyword">var</span> userSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">  loginId: &#123;type: <span class="built_in">String</span>, required: <span class="literal">true</span>, unique: <span class="literal">true</span>&#125;,</div><div class="line">  phone: &#123;type: <span class="built_in">String</span>, required: <span class="literal">true</span>&#125;,</div><div class="line">  email: &#123;type: <span class="built_in">String</span>, required: <span class="literal">true</span>&#125;,</div><div class="line">  password: &#123;type: <span class="built_in">String</span>, required: <span class="literal">true</span>&#125;,</div><div class="line">  isAdmin: &#123;type: <span class="built_in">Boolean</span>, required: <span class="literal">true</span>, <span class="keyword">default</span>: <span class="literal">false</span>&#125;,</div><div class="line">  emailResetId: <span class="built_in">String</span>,</div><div class="line">  deleted: &#123;type: <span class="built_in">Boolean</span>, <span class="keyword">default</span>: <span class="literal">false</span>&#125;</div><div class="line">&#125;, &#123;strict: <span class="literal">false</span>, timestamps: &#123; createdAt: <span class="string">'createdAt'</span>, updatedAt: <span class="string">'updatedAt'</span>&#125;&#125;)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'User'</span>, userSchema)</div></pre></td></tr></table></figure>
<p>从上面看到，User Model 有登录帐号 <code>loginId</code>，电话 <code>phone</code>，邮箱 <code>email</code>，密码 <code>password</code> 等其它信息。你可以猜出什么字段是必须有数据的，分别是什么数据类型，哪些是系统必须唯一（不允许重复的）。当前的模型完全没有任何放微信信息的地方，等我们讲到和微信集成的时候，会回头来看怎么修改。  </p>
<h4 id="图片信息"><a href="#图片信息" class="headerlink" title="图片信息"></a>图片信息</h4><p>用户信息已经有地方存了，那图片信息应该放什么地方？  </p>
<ul>
<li>和用户信息放一起  </li>
<li>另外建立一个模型  </li>
</ul>
<p>有计算机基础的同学可能觉得第一个选择太愚蠢。但是，不一定每次的选择都那么明显的。<strong>数据怎么放由什么决定？</strong>最基本两点需要考虑的是：<strong>数据的关系</strong>和<strong>存储系统的特点</strong>。</p>
<p>从数据角度考虑，可以说图片信息属于用户，因为是用户上传的，就像是文章的评论属于文章。而且，它们的关系是一对多的关系。一个用户可以多次上传图片，一篇文章可以有很多评论。如果我们是使用关系型数据库（如 Oracle, MySQL 等），一对多关系的数据一般都分开独立的表存储才符合<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%84%E8%8C%83%E5%8C%96" target="_blank" rel="external">数据库设计范式</a>。这里不细说，有兴趣自己查看。  </p>
<p>从存储系统的特点来考虑，MongoDB 是<strong>文档型数据库</strong>，它可以存储复杂 JavaScript Object 对象，支持层级嵌套，我们其实可以把从属关系的数据都放一起。  </p>
<p>那我们要不要把图片信息塞到 User Model 里面呢？不行，主要有两个原因：</p>
<ol>
<li><p>太深入嵌套的数据在 MongoDB 查找不方便。后期我们可能要单独查找 Image Model 的数据，因为要随机挑图片。  </p>
</li>
<li><p>图片和用户的关系不像是车轮和汽车的关系，有限并可控。图片的数量是可以无限增长的。MongoDB 里面一个文档不能存太大的数据，所以不适合放一起。  </p>
</li>
</ol>
<h3 id="从功能，性能考虑"><a href="#从功能，性能考虑" class="headerlink" title="从功能，性能考虑"></a>从功能，性能考虑</h3><p>既然我们决定了图片数据要分开另一个模型来存储，那它里面应该有什么数据呢？它可以是下面的样子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line"><span class="keyword">var</span> Schema = mongoose.Schema</div><div class="line"></div><div class="line"><span class="keyword">var</span> imageSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">  userId: &#123;type: <span class="built_in">String</span>, required: <span class="literal">true</span>&#125;,</div><div class="line">  url: &#123;type: <span class="built_in">String</span>, required: <span class="literal">true</span>&#125;</div><div class="line">&#125;, &#123;timestamps: &#123; createdAt: <span class="string">'createdAt'</span>&#125;&#125;)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'Image'</span>, imageSchema)</div></pre></td></tr></table></figure>
<p>首先肯定有 <code>userId</code>，它标记了是哪个用户上传的图片。还有一个是 <code>url</code>，里面应该要存放图片的路径，无论用户上传的图片是放在服务器的硬盘，还是云服务商。数据看情况而定，但总归应该有一个图片的路径。  </p>
<p>如果你玩过和菜头公众号的图片交换功能，它可以让你选择你随机拿到的图片是男用户，女用户，或者任何用户上传的。那这个性别信息我们应该放什么地方？性别本来是属于用户信息的一部分，理应存在 User Model。但是，从功能和性能考虑，需要作出一点点调整。  </p>
<p>为什么呢？如果我们用的是关系型数据库，在不违反设计范式的情况下，性别应该放在存放用户信息的地方。在需要查询使用的时候，可以把放图片信息的表和用户信息表关联起来。但是，MongoDB 是不支持两个表（在 MongoDB 里面叫 Collection）关联的。如果你把性别的字段只是放在 User Model，那么要实现这个功能的时候，就要先查一下 User 那边看哪些是满足性别的用户，后头再去找 Image 看这些用户有什么图片，然后随机拿一个出来。如果把性别放在 Image Model，那就只看一个地方就可以了。  </p>
<p>这种做法叫<strong>数据冗余</strong>。如果把它用在关系型数据库里，其实不符合范式。但是在 MongoDB 里面比较常需要用到这种做法。  </p>
<h2 id="用-Evergrow-Generator-生成-Model"><a href="#用-Evergrow-Generator-生成-Model" class="headerlink" title="用 Evergrow Generator 生成 Model"></a>用 Evergrow Generator 生成 Model</h2><p>想清楚你要怎么设计模型后，要生成就简单了。下面一句命令就搞定：</p>
<p><code>yo evergrow:model Image</code></p>
<p>后面的 <code>Image</code> 代表模型的名字，你可以按照自己的喜好命名。运行了命令之后，你会看到它提醒你生成下面的目录和文件。  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">create module/image/image-routes.js</div><div class="line">create module/image/image-model.js</div><div class="line">create module/image/image-manager.js</div><div class="line">create module/image/image-controller.js</div></pre></td></tr></table></figure>
<p>现在你只需要关心 <code>image-model.js</code> 就好了。后面的章节会再详细说明它们有什么用。</p>
<p><code>image-model.js</code> 里面的内容默认是下面那样的。你可以自己加 <code>url</code> 字段，删除一些不必要的信息，比如 updatedXXX 那些。改过后的文件我放在 <code>project</code> 目录的项目里，可供参考。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</div><div class="line"><span class="keyword">var</span> Schema = mongoose.Schema</div><div class="line"></div><div class="line"><span class="keyword">var</span> ImageSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">  createdUserId: &#123;type: Schema.Types.ObjectId, required: <span class="literal">true</span>&#125;,</div><div class="line">  createdUser: &#123;type: <span class="built_in">String</span>, required: <span class="literal">true</span>&#125;,</div><div class="line">  updatedUserId: &#123;type: Schema.Types.ObjectId, required: <span class="literal">true</span>&#125;,</div><div class="line">  updatedUser: &#123;type: <span class="built_in">String</span>, required: <span class="literal">true</span>&#125;,</div><div class="line">  deleted: &#123;type: <span class="built_in">Boolean</span>, <span class="keyword">default</span>: <span class="literal">false</span>&#125;</div><div class="line">&#125;, &#123; timestamps: &#123; createdAt: <span class="string">'createdAt'</span>, updatedAt: <span class="string">'updatedAt'</span>&#125;&#125;)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'Image'</span>, ImageSchema)</div></pre></td></tr></table></figure>
<h2 id="总结与练习"><a href="#总结与练习" class="headerlink" title="总结与练习"></a>总结与练习</h2><p>数据模型在编程领域可谓是最重要的部分了。正如以前我在「<a href="http://www.thinkingincrowd.me/2016/08/28/What-is-programming-should-I-learn/">编程是什么？我要学吗？</a>」里面提到：<strong>Algorithms + Data Structures = Programs</strong>。我的「<a href="http://leanpub.com/tasting-javascript" target="_blank" rel="external">Tasting JavaScript</a>」第 4 章也摘录了首届图灵奖的获得者 Alan J. Perlis 说过的一句话：  </p>
<blockquote>
<p>It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.<br>   –  Alan J. Perlis</p>
</blockquote>
<p>可见，一个好的数据结构是多么重要。所以，我建议你根据上面提到的两大角度，<strong>从归属和分区考虑</strong>，<strong>从功能，性能考虑</strong>，时不时回顾你的数据模型，看是否合理和高效。  </p>
<p>学习完这一章，你不妨想一想你打算实现的系统功能，它的数据模型应该要怎么样设计。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇是 Node.js 搭建微信后台，实现图片交换功能教程的第一篇文章。前序准备书籍，工具可参考 Github 项目 &lt;a href=&quot;https://github.com/kenspirit/javascript-study-group&quot; target=&quot;_blank&quot; 
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Wechat" scheme="http://www.thinkingincrowd.me/tags/Wechat/"/>
    
      <category term="Node.js" scheme="http://www.thinkingincrowd.me/tags/Node-js/"/>
    
      <category term="Tutorial" scheme="http://www.thinkingincrowd.me/tags/Tutorial/"/>
    
      <category term="Data Modeling" scheme="http://www.thinkingincrowd.me/tags/Data-Modeling/"/>
    
  </entry>
  
  <entry>
    <title>第一原理 - 微信开发小记</title>
    <link href="http://www.thinkingincrowd.me/2016/10/22/Back-to-basics-Wechat-Development/"/>
    <id>http://www.thinkingincrowd.me/2016/10/22/Back-to-basics-Wechat-Development/</id>
    <published>2016-10-22T10:20:51.000Z</published>
    <updated>2016-10-22T10:45:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>继上次青云部署遇到点小问题，最近又在微信开发中的语音播放上碰到点问题。回头来看也是定位问题上面没有做好。这次我过度相信我认为有经验的人士，走错方向，忽视了最基本的问题检测。</p>
<p>这次遇到问题的功能其实是要在一个微信里面打开的 H5 页面（使用了 audio 标签）里播放音频。在开发这个功能前，我咨询过前端的同学，能在页面播放的音频格式是什么。他说 mp3 在 iPhone 和 Android 都能支持，我给 mp3 的格式就好。</p>
<p>到了集成测试的时候，他却发现 H5 页面里的音频在微信播放不了，但是用浏览器直接打开就可以，这就奇怪了。他还顺口说：“新生大学的论坛里面都没问题的啊”。然后我第一反应就是<strong>参考已有的成功样例（但是事实证明这不是好的选择）</strong>，所以提议到：“不如你拿一个在新生大学论坛里面可以播放的音频文件给我看看吧？” 他给我一看。这个音频文件哪里是 mp3 格式的啊，是 wav 的啊。你这不是坑我吗？前端那位同学说：“这我不太知道啊，你去问问后端。”</p>
<p>然后我和后端的同学对了一下，发现他和我提供音频的方式是一样的，但是在测试环境里面就真的没发现有多少 mp3 格式的音频数据，反而是 wav 的多。活见鬼了。“你这 wav 和 mp3 是怎么生成的啊？怎么代码和我一样，最后格式不同？” 后端同学也有点发蒙了，他折腾了好一会，翻看了旧数据和源码，感觉有点不一致，只能帮我在测试环境测试。</p>
<p>在这空隙，我先给前端同学临时转成 wav 去测试。他拿了我给的 wav 音频后，发现可以在微信开发者工具中打开的页面播放，但是在手机微信里面打开就不行了。我靠，这又是什么鬼？<strong>不同的运行环境是很大的影响因素，尤其是前端。这也是为什么有时程序员会说，我做的时候可以的啊。</strong>有时这真不是推脱，而是环境不同。</p>
<p>在我们都百思不得其解的时候，那位后端同学回来和我们说：“测试后发现论坛那边用的也是 mp3 格式的，但是我们的文件名有 mp3 后缀。你们那个没有，可能浏览器不支持。” 我听了心想：“那你们之前生成和使用的 wav 是什么鬼啊。而且没有 mp3 后缀也应该可以啊，现在的浏览器应该都能识别。” 不过，我暂时没和他们深究这个问题了，因为他们其实也不太清楚了。最重要的是目前基本确认 mp3 是能在手机打开的页面里播放的。</p>
<p>随后，我们开始寻找其它产品的实现方案，包括嵌入音乐的微信公众号文章和别的 H5 产品。我们甚至还怀疑语音数据流下载格式问题等，但是最后还是无功而返。折腾到凌晨 12 点后还没什么头绪，我们就决定回去休息好第二天再仔细看看。</p>
<p>第二天回来，我再次和前端确认：“你们论坛到底是怎么做的？” CTO 也问他，你是每个音频文件用一个 audio 标签还是怎么样？然后他说：“我是用一个 audio 标签，多个音频的播放是动态改 audio 标签的 src 来控制。我看别人也是这么做的。” 最后，我们都建议他用最原始的方法试一下：“固定 audio 标签，并写死一个 mp3 文件的地址。”</p>
<p>然！后！就！行！了！</p>
<p>啊！原来是前端用了一些他不熟悉的方法来实现音频播放的功能，然后一开始我们又相信了他的判断，没有怀疑到他的做法和回归最基本的测试上面来。</p>
<p>最后，我们回顾一下为什么踩坑了吧。  </p>
<ul>
<li><p>正在做的这个页面和新生大学 H5 页面差异。  </p>
<ol>
<li>一个是微信浏览器，一个是 iOS/Android Webview。  </li>
<li>两种不同的音频播放实现方式。这次用动态指定链接，原来只是静态链接。  </li>
</ol>
<p>这两个巨大的差异一开始我都忽视了，相信了当时前端说的那句：“xxx 都没问题的啊”，就认为他考虑过了，然后顺着他的方向去寻找问题和答案。第一步就走错了。  </p>
</li>
<li><p>微信开发者工具和真正的手机微信</p>
<p>这个也是没有估计到的。不同类型的音频文件在两个地方表现不同，也导致我们分析问题的方向产生偏差。（后面的开发还证明，其它不少地方也是两边有不同表现）</p>
</li>
</ul>
<p>采取 <strong>参考已有的成功样例（analogy）必须具备一个前提：样例与当前分析案例的差异性必须很小，而且差异的地方不能对结果产生重大的影响。</strong>所以说，<strong>经验的适用性取决于应用场景的相似性</strong>。我们在<strong>依赖经验做出判断之前，最好还是先把最基础的判断做好</strong>。</p>
<p>这次真的深刻体会到 Elon Musk 说的这句话的用意：</p>
<blockquote>
<p>I think it’s important to reason from first principles rather than by analogy,<br>…<br>The normal way we conduct our lives is we reason by analogy,” he said. “[With analogy] we are doing this because it’s like something else that was done, or it is like what other people are doing.<br>…<br>[With <a href="https://en.wikipedia.org/wiki/First_principle" target="_blank" rel="external">first principles</a>] you boil things down to the most fundamental truths … and then reason up from there.”  </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继上次青云部署遇到点小问题，最近又在微信开发中的语音播放上碰到点问题。回头来看也是定位问题上面没有做好。这次我过度相信我认为有经验的人士，走错方向，忽视了最基本的问题检测。&lt;/p&gt;
&lt;p&gt;这次遇到问题的功能其实是要在一个微信里面打开的 H5 页面（使用了 audio 标签）
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Problem Solving" scheme="http://www.thinkingincrowd.me/tags/Problem-Solving/"/>
    
      <category term="First principle" scheme="http://www.thinkingincrowd.me/tags/First-principle/"/>
    
  </entry>
  
  <entry>
    <title>问题分解和逐字阅读的重要性 - 青云部署小记</title>
    <link href="http://www.thinkingincrowd.me/2016/10/12/Importance-of-Breakdown-and-read-thoroughly/"/>
    <id>http://www.thinkingincrowd.me/2016/10/12/Importance-of-Breakdown-and-read-thoroughly/</id>
    <published>2016-10-12T15:35:58.000Z</published>
    <updated>2016-10-12T16:00:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个新的系统，所以刚刚在<a href="https://www.qingcloud.com/" target="_blank" rel="external">青云</a>上面部署和搭环境。期间遇到一个小问题，也花了我们二三十分钟的时间。虽然这是一个挺小的问题，但是能很好的说明我之前在<a href="http://www.thinkingincrowd.me/2016/03/08/Novice-vs-Experienced/">有经验和没有经验的程序员的区别</a>里面提到的<strong>认识和定位问题</strong>，以及<a href="http://www.thinkingincrowd.me/2016/09/16/Capability-for-Learning-Programming-Breakdown/">学习编程需要具备的基本能力 - 问题分解</a>里面提到的<strong>问题分解</strong>，所以还是决定稍微写一下，顺便也可以让想学习计算机领域的朋友了解一下这种典型的思考和解决问题的方式。</p>
<p>在青云上，我们部署了两台云主机，一个负载均衡，一个路由器。它们的关系如下图。作为用户，要能够访问一个网站，其实还经过了一个叫 DNS 的东西，所以我也把它放进去大概意思一下。</p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/request_flow.png" alt="Request Flow"></p>
<p><em>注：abc.com 和 10.123.32.1 都是假的，举例说明用。</em></p>
<p>当我把两台主机部署好了以后，从青云的控制台看到负载均衡是这样显示的。</p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/qingcloud_lb.png" alt="Qingcloud LB"></p>
<p>两台主机已经标识为活跃状态了，我也轻快地在浏览器敲入域名，期待页面出来就去吃晚饭了。然而浏览器竟然加载很久还是没有反应，最后超时了。这是什么鬼啊？虽然肚子饿得不行，但是还是得忍一忍，先把它搞定。  </p>
<h2 id="分析和初步估计"><a href="#分析和初步估计" class="headerlink" title="分析和初步估计"></a>分析和初步估计</h2><p>因为主机刚配置好，所以我其实是已经通过 VPN 和主机连在一起的。如下图。</p>
<p><img src="http://thinkingincrowd.u.qiniudn.com/request_flow_vpn.png" alt="Request Flow"></p>
<p>所以，我通过 VPN 的内部 IP，直接访问 主机A 和 主机B，发现可以访问。那么，根据架构分拆的几大部分，和具体的现象，初步估计情况可能是这样的：</p>
<ol>
<li>内部 IP 可以访问，<strong>D 通路正常</strong>  </li>
<li>负载均衡显示活跃，<strong>C 通路正常</strong>  </li>
<li>直接通过外网 IP（10.123.32.1）访问，浏览器显示错误，<strong>B 通路有问题</strong>  </li>
</ol>
<h2 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h2><p>因为负载均衡是买的，所以没法通过<a href="http://www.thinkingincrowd.me/2016/03/08/Novice-vs-Experienced/">有经验和没有经验的程序员的区别</a>提到的分析日志的方式来进一步分析。由于我对运维和青云的东西还是没什么经验，这时候有点抓瞎。  </p>
<p>CTO 问我什么错误代码，我说 504。他然后上 DNSPOD 看了一下配置。不看不知道，一看吓一跳。不知道为什么竟然同一域名下配了两条不同 IP 的记录。改完后，用命令跟踪域名，这时 IP 才解析对了，补充确认<strong>DNS 通路正常</strong>了。可是，再测试发现通过域名还是无法访问。  </p>
<p>CTO 问了一下，是不是路由器的防火墙没设置。他去改了一下，发现还是不行。</p>
<p>我突然就想，是不是负载均衡也有防火墙啊？再看了一下负载均衡的设置页面，还真的有。（事实是它的文档有蓝色字说明，我竟然没有看到。唉，这是有多粗心）。然后 CTO 在负载均衡开放了 80 端口，就可以通过域名访问了。</p>
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>从上面看，我们的排查还是有那么一点混乱。  </p>
<p>不过，<strong>整体的步骤还是基本按照各个组件的切分来逐一检查，其实就是问题分解和分析的能力</strong>。中间的混乱主要是 CTO 忘记了青云的负载均衡也有防火墙。我也因为不熟悉，和没细看清楚文档，稍微花多了一点时间。所以说，笑来老师在「得到」专栏说的<strong>逐字阅读的能力是多么的重要</strong>。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个新的系统，所以刚刚在&lt;a href=&quot;https://www.qingcloud.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;青云&lt;/a&gt;上面部署和搭环境。期间遇到一个小问题，也花了我们二三十分钟的时间。虽然这是一个挺小的问题，但是
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Problem Solving" scheme="http://www.thinkingincrowd.me/tags/Problem-Solving/"/>
    
  </entry>
  
  <entry>
    <title>这些年，放下，前行的点滴和感触</title>
    <link href="http://www.thinkingincrowd.me/2016/09/29/Leave-the-past-behind-and-move-on/"/>
    <id>http://www.thinkingincrowd.me/2016/09/29/Leave-the-past-behind-and-move-on/</id>
    <published>2016-09-29T05:05:46.000Z</published>
    <updated>2016-09-29T05:08:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在独自一个人在北京，就剩下看电影这项娱乐了。所以，最近又翻出「阿甘正传」来重温了一次。第一次看这部电影的时候，觉得他真的是傻人有傻福，好人有好报啊。做什么事情，最后都有意想不到的好结果。最为广泛流传的一句经典台词就是：<strong>“Life was like a box of chocolates, you never know what you’re gonna get.”</strong>。我自然也继续坚持着<strong>”但行好事，莫问前程”</strong>的理念。</p>
<p>这次重温完电影，突然对另一句感慨更深。在他将要结束长时间的跑步生涯时，他回忆到他妈妈经常和他说的一句话：<strong>“You got to put the past behind you before you can move on.”</strong>。我细细回想了一下我的过去。</p>
<h2 id="出国？"><a href="#出国？" class="headerlink" title="出国？"></a>出国？</h2><p>大学的时候，我一开始是“盲目地”坚持着出国的想法。所以，每天早起在宿舍楼顶，或者校区的山上读英语，然后泡在图书馆或者教学楼自习。当时我就是这么一个别人眼中的“学霸”，所以收获了现任老婆。当时她一开始只是怀着跟学霸一起自习的心态而已。</p>
<p>为什么说“盲目地”呢？因为我虽然想去国外读计算机硕士，但是除了学习英语外，从没有花更多的额外时间在计算机上。最后考完 GRE 后，想要报志愿的时候，发现一点想法也没有。自己想在计算机哪个领域发展都不知道，我怎么说服别人给我奖学金啊？再加上当时也结识了女朋友，如果出去了，分隔两地肯定没法维系了。况且她其实不怎么喜欢国外，想和父母更近些。所以我后来就还是决定留下来了。</p>
<p>这里有一个很大的教训。我并没有及时考虑清楚并做出正确的决定。没放弃考 GRE 是因为我还在犹豫，并不甘心自己在上面花的时间和成本。但是，其实这对后面的找工作带来很大的影响。如果我能够及时放弃，转而把时间放到加强自学计算机编程上面，可能找工作会顺利很多。<strong>很多人没法放下过去，重新开始，就是因为放不下曾经花费的金钱或时间，也就是所谓的沉默成本，结果越险越深</strong>。  </p>
<h2 id="留广州？"><a href="#留广州？" class="headerlink" title="留广州？"></a>留广州？</h2><p>因为我不是计算机专业，大学期间也只顾学英语，没怎么更深入自学计算机，所以也没有做什么成果出来。最后发现在广州找工作可谓一个难啊。努力学习的英语，基本用不上。</p>
<p>我们的专业其实也有一些师兄师姐在广州的汇丰银行做开发。但我去做了一个笔试后就没什么下文了。后来，很幸运地被一家港资的珠海小公司看上，我想都不想就决定去那边实习了。大概过了一个月左右，广州汇丰银行打电话来让我过去。但是当时我赌气不去了：你当时没看上我，我就要在别的地方做得比你更好，证明给你看。</p>
<p>这个决定，我觉得现在来看还是正确的。虽说工资收入肯定差了不少，但是当时我在珠海那家公司可谓成长迅速。身边牛人的工作方式，优良的系统设计，让我知道什么是好的设计，敏捷的合作方式。英语和粤语的优势让我有非常多的机会。如果我一开始就去一些大的传统公司，接触一些老旧的系统框架，经历耗时的协作模式，我估计水平眼界会差很多。  </p>
<p><strong>有时候，你不知道你放弃了一些东西，后面是否能收获更多。但只有踏出了那一步，并坚持走下去，才可能有意外收获</strong>。</p>
<h2 id="去上海？"><a href="#去上海？" class="headerlink" title="去上海？"></a>去上海？</h2><p>当时在那家公司，某个领导带我做了一个项目，后来他和公司老板方向不合，离开了。在我被公司派去香港出差，帮 Lane Crawford 做一个 BI 项目的时候，他打电话给我，问我要不要一起过去闯一下。但是我后来放弃了这个要约。原因有三个：</p>
<ul>
<li>当时内心还是很感激当前公司给的各种机会，报答心理还在。  </li>
<li>刚结婚不久，打算要小孩，不太合适和老婆分开两地或者带她去上海奔波。  </li>
<li>缺乏自信，感觉还要跟在牛人后面学习，怕没法独自承担 Dev Lead 的角色。  </li>
</ul>
<p>回想起这个机会，还是有那么一点点后悔。当时如果去了上海，可能成长和发展会更快一些。<strong>有些时候，如果等到你觉得什么都准备好了，才出发，可能机会就已经错过了。潜力有时是逼出来的，能力是在路上才习得的。</strong></p>
<h2 id="留香港？"><a href="#留香港？" class="headerlink" title="留香港？"></a>留香港？</h2><p>我当时是按优才计划受雇于香港的分公司，按规定的话，工作满七年就可以拿香港身份证。我其实是想一直在香港，感觉机会更多一些，但是老婆并不太喜欢这个城市。待了刚好一年，老婆怀孕了。即便当时我是每周从香港来回一次珠海，但是我觉得我需要更多时间照顾她，所以也马上提出转回珠海分公司。<strong>有些时候，放弃意味着你知道对自己最重要的是什么。</strong></p>
<h2 id="去北京"><a href="#去北京" class="headerlink" title="去北京?"></a>去北京?</h2><p>在第一家公司任职差不多 8 年后，我已经是珠海最资深的员工了。当时我看好 JS 方向，但是公司却放弃了它，我只好离职了。进了新公司，本来想好好写写 JS，但是却意外被派去美国，接手后端。由于经验相对比较多，加上沟通协作能力还不错，所以在新公司的 5 年，更多地承担谈需求，带团队的工作，写代码时间越来越少。  </p>
<p>心里一直想更多实践的技术，公司应用的场景有限，附近也没多少志同道合的小伙伴。而且工作那么这么多年，我都是从事面向企业系统的开发，很想接触一下互联网行业和面向个人的领域，看看这些领域的思考方式有什么不同。机缘巧合的情况下，发现我比较敬佩的一个人想找全栈工程师，并在培训和教育领域做一些事情，就想都没想跑北京来了。  </p>
<p>人的一生到底是自我选择，还是命运？阿甘在电影里说了一句：<strong>“I don’t know if we each have a destiny, or if we’re all just floating around accidental—like on a breeze.  But I think maybe it’s both.  Maybe both are happening at the same time.”</strong>。他决定了一件事情，就努力做好。他一直都没刻意地去追求什么，然而成功却在毫无功利意识的努力中悄然而至了。  </p>
<h2 id="前行的勇气"><a href="#前行的勇气" class="headerlink" title="前行的勇气"></a>前行的勇气</h2><p>电影里的阿甘，并没有多少牵挂，似乎很容易就能做出每一个决定。他突然想到什么事情，然后就出发了。  </p>
<p>在现实生活里，放下并前行，有时候并不是一件容易的事情。你需要得到父母和伴侣的体谅和支持。这么多年，无论奔赴珠海这个偏远渔村，宁愿留在工资少的小公司而不去大公司，还是突然就跑来北京，都离不开心爱的老婆的支持。其实<strong>前行的勇气有时并不仅仅在自己，而更多的是背后的支持</strong>。在这里，我谨以这微不足道的文字，来表示对老婆的由衷感谢。亲爱的，我爱你。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在独自一个人在北京，就剩下看电影这项娱乐了。所以，最近又翻出「阿甘正传」来重温了一次。第一次看这部电影的时候，觉得他真的是傻人有傻福，好人有好报啊。做什么事情，最后都有意想不到的好结果。最为广泛流传的一句经典台词就是：&lt;strong&gt;“Life was like a bo
    
    </summary>
    
      <category term="Life" scheme="http://www.thinkingincrowd.me/categories/Life/"/>
    
    
      <category term="Destiny" scheme="http://www.thinkingincrowd.me/tags/Destiny/"/>
    
      <category term="Choice" scheme="http://www.thinkingincrowd.me/tags/Choice/"/>
    
  </entry>
  
  <entry>
    <title>学习编程需要具备的基本能力 - 正确提问</title>
    <link href="http://www.thinkingincrowd.me/2016/09/17/Capability-for-Learning-Programming-Ask-Wisely/"/>
    <id>http://www.thinkingincrowd.me/2016/09/17/Capability-for-Learning-Programming-Ask-Wisely/</id>
    <published>2016-09-17T03:18:28.000Z</published>
    <updated>2016-09-21T15:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>这真的是陈词滥调了。网上一搜其实一大堆这些文章，包括自己在 2013 年写的<a href="http://www.thinkingincrowd.me/2013/05/28/how-to-ask-share-and-influence/">一点点对提问，分享和影响力的看法</a>也提到一些。不过当时是稍微针对已经在公司的人写的，这里为自学的朋友补充一些之前没有提到的。先强调一下，最好用英语和 Google，可以节省大量寻找答案时间。  </p>
<h2 id="怎么问"><a href="#怎么问" class="headerlink" title="怎么问"></a>怎么问</h2><p>这一大点是网络上大部分文章涵盖的内容。<a href="http://www.catb.org/esr/faqs/smart-questions.html" target="_blank" rel="external">How To Ask Questions The Smart Way</a> 写的非常详细，具体可以去仔细看看。我这里把关键的一些点抽出来，并作一些具体解释和增补，因为文章里面很多细节都是围绕这些点展开的。</p>
<h3 id="找对地方"><a href="#找对地方" class="headerlink" title="找对地方"></a>找对地方</h3><p>这个错一般不会犯的太离谱，因为对于新手来说，也不会说找到什么 IRC，mailing list 等主要为高级技术人员而存在的地方。一般你确定好学习什么语言，在搜索引擎上找 “xxx 论坛” 就能找到一些提问的地方。  </p>
<p>个人首推国外的 <a href="http://stackoverflow.com/。这个是综合性网站，需要自己打对标签，要稍微注意别发错地方。" target="_blank" rel="external">http://stackoverflow.com/。这个是综合性网站，需要自己打对标签，要稍微注意别发错地方。</a></p>
<p>国内的综合性网站可以看看 <a href="https://segmentfault.com/" target="_blank" rel="external">https://segmentfault.com/</a> ，<a href="http://www.csdn.net/" target="_blank" rel="external">http://www.csdn.net/</a> ，<a href="http://www.oschina.net/" target="_blank" rel="external">http://www.oschina.net/</a> 。专业性的有 Ruby 的 <a href="https://ruby-china.org" target="_blank" rel="external">https://ruby-china.org</a> ，Python 的 <a href="http://www.pythontab.com/" target="_blank" rel="external">http://www.pythontab.com/</a> 等。</p>
<h3 id="别问愚蠢的问题"><a href="#别问愚蠢的问题" class="headerlink" title="别问愚蠢的问题"></a>别问愚蠢的问题</h3><p>程序员基本上来说还算是比较友好和乐于助人的物种。但是如果你提的问题一看就比较白痴，而且是没有自己思考，在加上态度差的话。好的情况是没人理。差的话，分分钟某人以严肃脸，说反话回答的方式把你带坑里去。</p>
<p>怎么样才不至于问愚蠢的问题：</p>
<ol>
<li><p>如果你是跟着教程来学习，<strong>请确保认真逐字阅读，别漏了步骤</strong>。当然，也别太死板，全部照抄，有些像用户名什么的还是要改成自己的，但是原教程应该是有说明的。  </p>
</li>
<li><p>自己花时间在搜索引擎，相关论坛认真寻找过，确保没有被解答过的类似问题。为什么说<em>类似</em>而不是<em>相同</em>？因为很多新手认为相同就真的是要一模一样。但是，为了你自己，请稍微动脑子看看那些类似的问题，看多几个解决方案，你可能就自己找到答案了。  </p>
</li>
</ol>
<h3 id="目的是什么"><a href="#目的是什么" class="headerlink" title="目的是什么"></a>目的是什么</h3><p>记得要描述你想实现的效果或者目的，而不仅仅是你的步骤。为什么表达清楚目的很重要。因为有时候你的做法根本就不对，方向错误。搞不好绕半天回来，别人和你说你本来怎么怎么做就可以了，根本不应该这样。这就是典型的 <a href="http://xyproblem.info/" target="_blank" rel="external">XY 问题</a>。</p>
<p>所以，正确的表达顺序应该是：</p>
<ul>
<li>想做什么  </li>
<li>思路/方法  </li>
<li>步骤  </li>
<li>出错信息/与期望不同的结果  </li>
</ul>
<h3 id="具体信息"><a href="#具体信息" class="headerlink" title="具体信息"></a>具体信息</h3><p>在编程软件开发世界，影响结果的因素真的比较多，没有相关信息的配合，外人隔在千里之外真的不容易帮你判断。你必须提供的信息有：  </p>
<ol>
<li>操作系统及版本号（Mac, Windows 或者具体 Linux）  </li>
<li>使用的开发语言环境及版本号（Node.js，Ruby, Python 等）。一般在你敲命令后面加 <code>--version</code>，<code>version</code> 或者 <code>-v</code> 都可以得到。</li>
<li>涉及到的相关软件环境及版本号，比如什么浏览器或者数据库。</li>
<li>重现的步骤，如果有的话。</li>
<li>截图，<strong>相关的</strong>源代码，日志等。这个要求比较高，新手不容易判断什么是相关的，很容易全部一股脑都丢上去。这是没人愿意看的。如果你真的判断不出来，有几个办法：<ul>
<li>把所有的代码放在 <a href="https://github.com/" target="_blank" rel="external">https://github.com/</a> 上给别人去看。  </li>
<li>在 <a href="https://gist.github.com/" target="_blank" rel="external">https://gist.github.com/</a> 上按源码类别，创建临时链接。  </li>
<li>如果是前端相关，可以把代码都放在 <a href="https://jsbin.com" target="_blank" rel="external">https://jsbin.com</a> ，<a href="http://codepen.io" target="_blank" rel="external">http://codepen.io</a> ，<a href="https://jsfiddle.net" target="_blank" rel="external">https://jsfiddle.net</a> 或者 <a href="http://runjs.cn/" target="_blank" rel="external">http://runjs.cn/</a> 。</li>
</ul>
</li>
</ol>
<h3 id="让别人更乐意看"><a href="#让别人更乐意看" class="headerlink" title="让别人更乐意看"></a>让别人更乐意看</h3><ol>
<li>有礼貌，有礼貌，有礼貌。</li>
<li>不要打紧急之类的字眼，没人有责任尽快帮你看。</li>
<li>简明扼要。这里就考验你写作和表达能力了。</li>
<li>贴上一些找过的资料，描述它们没法解决你的问题。可选，证明你有自己思考，不是伸手党。</li>
</ol>
<h2 id="追问"><a href="#追问" class="headerlink" title="追问"></a>追问</h2><p>前面说的都是如何像别人提问。这里是希望你能向自己提问，甚至追问。怎么追问呢？遵循著名的 <a href="https://en.wikipedia.org/wiki/5_Whys" target="_blank" rel="external">5 Whys 原则</a>，能帮助我们无论从技术角度还是从业务角度，找到问题的根本原因。解决根本的问题。这个原则的创始人是 Sakichi Toyoda 并在 Toyota 里广泛推行的。其中拿来说明的例子是这样的：</p>
<ol>
<li>为什么我们的机器停了？电路过载了，导致保险丝熔断</li>
<li>为什么电路过载？轴承的润滑油不够，锁死了</li>
<li>为什么润滑油不够？因为机器的油泵出油不畅通</li>
<li>为什么出油不畅通？油泵吸入口被金属屑堵住了</li>
<li>为什么有金属屑？因为油泵没有过滤嘴</li>
</ol>
<p>这样问下来，是不是就非常接近事情的根本原因了？</p>
<p>在编程开发里面的例子可能是这样的。</p>
<ol>
<li>为什么我们的网站突然那么慢？服务器内存占用率很高</li>
<li>为什么服务器内存占用率那么高？因为新加的查询功能，没有在数据库加索引</li>
<li>为什么没有加索引？xxx 是新人，没有经验</li>
<li>为什么没有培训和 code review？我的错，没有时间</li>
<li>为什么你没有时间？老是被你拉去开会（老板黑线脸）</li>
</ol>
<p>开玩笑。其实，5 Whys 不一定非要问到第五个，或者可以问更多。最重要的是尽可能接近事情的根本原因，知道事后补救和解决方案以避免重复发生。从不同的角度去考虑和解决问题，包括短期和长期的方案。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不管是问别人还是自己，如何提出恰当的问题是找到正确解决方案的关键。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这真的是陈词滥调了。网上一搜其实一大堆这些文章，包括自己在 2013 年写的&lt;a href=&quot;http://www.thinkingincrowd.me/2013/05/28/how-to-ask-share-and-influence/&quot;&gt;一点点对提问，分享和影响力的看法
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Programming" scheme="http://www.thinkingincrowd.me/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>学习编程需要具备的基本能力 - 问题分解</title>
    <link href="http://www.thinkingincrowd.me/2016/09/16/Capability-for-Learning-Programming-Breakdown/"/>
    <id>http://www.thinkingincrowd.me/2016/09/16/Capability-for-Learning-Programming-Breakdown/</id>
    <published>2016-09-16T14:20:55.000Z</published>
    <updated>2016-09-21T15:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>我一直都说，计算机和编程是用来解决问题。问题的分解肯定是非常重要的，也必须具备的能力。相比我在<a href="http://www.thinkingincrowd.me/2016/09/15/Capability-for-Learning-Programming-Abstraction/">学习编程需要具备的基本能力 - 抽象</a>谈的<em>抽象和具象</em>，大家应该能理解什么是问题分解的能力。不过上次也有人给我留言，说那篇文章说的就是分析和分解问题的能力。其实它们还是有点不同。</p>
<p><strong>抽象和具象关注在理解事物的定义；问题分解关注在分析和理解事物的组成</strong>。有时候，问题分解能够辅助定义的理解，但有时候是理解定义后才更好帮助你拆解问题。比如前面说的递归，一开始学习这个概念的时候，你可能用抽象和具象来帮助你理解它是什么。等你掌握核心理念后，如果遇到一个你认为能用递归来解决的问题，你就需要拆解，找出什么是相似和重复处理的逻辑，什么是边界和基准条件。  </p>
<p>因为这篇文章是给打算学习编程的人看，所以一开始讲一些生活中我们如何分解问题。后面再举一些编程内的例子。其实学会分解问题，无论是否学习编程都相当有益。</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>写作竟然也要分解问题？其实我读书时期是相当不喜欢写作的。反而现在编程后，越来越觉得写作和编程的关系是多么的紧密。编程其实就是写一篇逻辑严谨，简洁的文章。</p>
<p>话说回来，写作的时候，我们要怎么分解问题？首先，我们先明确<strong>分解问题的目的是什么？</strong>。</p>
<p><strong>写作的目的，是为了清楚表达你的观点</strong>。要清楚表达其实包含两方面，我们来分解一下。</p>
<ol>
<li><p>从论述观点的角度</p>
<ul>
<li>我这次想表达的核心观点是什么？  </li>
<li>细分的子观点有哪些？  </li>
<li>每个观点有哪些论据可以使用？  </li>
<li>有没有反面观点？  </li>
<li>我的观点和反面的区别在什么地方？  </li>
</ul>
</li>
<li><p>从清楚表达的角度</p>
<ul>
<li>我的目标人群是谁？  </li>
<li>有没有贴合的事物可以类比？  </li>
<li>他们本来可能持有什么观点？  </li>
<li>为什么他们原来的观点可能不正确或者不完整？  </li>
</ul>
</li>
</ol>
<p>我相信，如果我们在写作之前，至少按照上面的问题来分解，并解决了它们，整篇文章的骨架就基本成型了，剩下的就是填充细节，和打磨文字。</p>
<h3 id="教育"><a href="#教育" class="headerlink" title="教育"></a>教育</h3><p>我的儿子已经 7 岁了。可能因为他老爸是程序员吧，我喜欢买的玩具，都是拼图，乐高，棋类的东西。教他玩，学习和做事情的方式，都或多或少教他怎么通过分解问题来考虑。  </p>
<p>比如玩拼图的时候，我就教他先按照颜色的相似度来分成几大堆，同时还把四个角，和四条边上的先找出来。拼出外围框架后，再围绕颜色突出的图案开始拼。还有，教他两位数加法的时候，比如 18 + 7，就把 18 分成 10 + 8，然后把 8 + 7 先算出来，得到 15 后，再和 10 去加。当然他自己也慢慢学会分解问题，他教我跳街舞的时候，就学会怎么把动作分拆成一步步教我。</p>
<p>###　统筹方法</p>
<p>可能很多人都听说过泡茶的统筹规划问题。进得了厨房的女士可能不自觉就应用了这项技能。比如，一顿简单的饭可能包含下面几个步骤。  </p>
<ul>
<li>淘米  </li>
<li>下米煲饭  </li>
<li>浸泡青菜  </li>
<li>洗菜  </li>
<li>炒菜  </li>
<li>洗肉  </li>
<li>蒸肉  </li>
</ul>
<p>上面的步骤其实分了存在明显依赖关系的三大块：<code>淘米 -&gt; 下米煲饭</code>，<code>浸泡青菜 -&gt; 洗菜 -&gt; 炒菜</code>, <code>洗肉 -&gt; 蒸肉</code>。其实还有一些不明显的依赖关系：<code>淘米 -&gt; 浸泡青菜</code>，<code>下米煲饭 10 分钟后 -&gt; 蒸肉</code>。因为用淘米水浸泡一下青菜可以节省一点水，还有我必须在恰当的时间放肉到电饭煲里面蒸，早了导致碟子积水太多，晚了肉可能蒸不熟。所以呢，我安排任务的顺序就是这样：<code>淘米 -&gt; 下米煲饭 -&gt; 浸泡青菜 -&gt; 洗肉 -&gt; 洗菜 -&gt; 蒸肉 -&gt; 炒菜</code>。  </p>
<p>虽然这个例子和编程八杆子也搭不上，但是统筹方法在计算机领域相当常见。什么事情可以同时处理（并行计算），什么时候一定要按顺序处理（串行计算），什么东西一定要前面完成，或者放最后。这样的决定，必须依靠把问题分解成尽量独立的小块，才能做出正确的判断。比如，做前端的要考虑页面哪些部分是首屏，也就是用户第一眼就看到的东西，需要优先加载；做数据报表的，要考虑 ETL (Extract-Transform-Load) 涉及从哪些地方抽取数据，依赖关系如何，什么数据转换任务可以同时做，要经过多少时间转换和生成报表。</p>
<h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><p>我之前写过一篇<a href="http://www.thinkingincrowd.me/2016/03/08/Novice-vs-Experienced/">有经验和没有经验的程序员的区别</a>，里面说的很多都和问题分解有关系。所以这里就简单带一下，详细的可以参看那篇文章。</p>
<h3 id="定位错误"><a href="#定位错误" class="headerlink" title="定位错误"></a>定位错误</h3><p>学习编程的新手，经常会碰到各种莫名奇怪的问题，也最怕碰到问题。这也是很多人感到重大挫折而中途放弃的原因。我想说的是，老手也会碰到莫名奇怪的问题，只是我们懂得如何分析和分解问题，然后定位错误。</p>
<h3 id="任务拆分，估算"><a href="#任务拆分，估算" class="headerlink" title="任务拆分，估算"></a>任务拆分，估算</h3><p>现在很多人学习 Web 编程，基本都是学习如何搭建一个网站，或者论坛。但是很多人，要么觉得系统太庞大，不知道如何入手。要么以为很简单，低估问题的难度，一开始信心满满，后面遇到各种小问题冒出来，就迷失方向，抓不到重点了。</p>
<p>假设我要做一个类似电商类网站，我可以怎么分解呢？</p>
<ol>
<li>用户模块：包括用户注册，登录，个人信息。用户还要分普通用户，商家。  </li>
<li>商品模块：商家产品上架，下架。  </li>
<li>订单模块：用户购物车，下订单，支付，取消订单。</li>
<li>物流模块：产品库存管理，发货。</li>
</ol>
<p>上面几大模块，往横向分析的话，相互之间还有依赖关系和交互，比如没有库存就不能下订单，发货后就不能取消订单等。纵向深入分析的话，比如注册要手机还是邮件验证，还是用社交帐号登录，支付要接入微信，银联还是支付宝等。当你把系统分解完，就可以找出哪些是核心和必不可少的部分，然后决定 MVP 应该包含什么。  </p>
<p>还有，上次有人和我说，他是做股票分析的，想学习一点编程，然后帮助他筛选出股票。他想做的东西比如是拿今天所有的股票，看有多少站到五日均线以上。那我就帮他分析，和拆解他要面对的问题是什么。</p>
<ol>
<li>你如何获取股票数据？有现成的，还是要学如何写爬虫，自己抓取？</li>
<li>什么叫做站到五日均线以上，获取的数据里面就有，还是自己算？</li>
<li>要自己算的话，你有学过基本的数据统计分析知识吗？</li>
</ol>
<p>这样一路下来，你就可以针对自己要做的事情，把每一个点逐一拆解，直至基本无法更细的程度。最后，重点要关注什么地方，什么地方花钱可以搞定，什么地方是自己必须自己学习和重点掌握的，就比较清晰了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>问题分解可以说无论什么领域都适合也应该使用。计算机和编程的不断发展，其实也越来越往专业领域拆分。现在涌现出来的各种 PaaS, SaaS 云平台，包括网络主机供应商，静态资源图片存储和加速，网络安全防护，认证登录系统，网络数据库等都是把以前的搭建，部署和维护系统整件事，拆解成各个小问题，然后抽象出共性来作为一种服务提供。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我一直都说，计算机和编程是用来解决问题。问题的分解肯定是非常重要的，也必须具备的能力。相比我在&lt;a href=&quot;http://www.thinkingincrowd.me/2016/09/15/Capability-for-Learning-Programming-Abst
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Programming" scheme="http://www.thinkingincrowd.me/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>学习编程需要具备的基本能力 - 抽象</title>
    <link href="http://www.thinkingincrowd.me/2016/09/15/Capability-for-Learning-Programming-Abstraction/"/>
    <id>http://www.thinkingincrowd.me/2016/09/15/Capability-for-Learning-Programming-Abstraction/</id>
    <published>2016-09-15T09:25:49.000Z</published>
    <updated>2016-09-21T15:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多人说，要学好编程，需要有抽象的能力。但<em>抽象</em>这个词本身就太抽象了。怎么样才叫有抽象的能力啊？。<strong>抽象是相对于具象而言的</strong>。我觉得，与其说学习编程要具备抽象的能力，不如说<strong>编程应该具备具象与抽象之间转换的能力</strong>。我们通过下面的例子来了解怎么在这两者之间转换吧。这篇文章对学编程的新手来说可能有点高能，但慢慢理解。</p>
<h2 id="数据与算法"><a href="#数据与算法" class="headerlink" title="数据与算法"></a>数据与算法</h2><p>一般来说，计算机和编程最终都会落实到解决生活的具体问题上。把这些生活的具象映射到计算机的程序代码里面，本身就是一次抽象的过程。最基本的抽象，莫过于把具象的物体，赋予抽象的数据和结构，当然还有处理这些数据的算法。数据结构和算法的简单类比和介绍，编程和写作的对比，可以参看之前的一篇文章<a href="http://www.thinkingincrowd.me/2016/08/28/What-is-programming-should-I-learn/">编程是什么？我要学吗？</a>。</p>
<p>生活中我们很可能就会应用到一些算法。假如公司有 1000 人吧，打印了 1000 张有序号的表格发出去让大家填了。如果收回来都乱了，怎么能快速整理好？很简单，把小于 500 的放左边，大于 500 的放右边，先分开两块。然后再把两边的，再对半分。一直到最后两到某种程度，比如每一叠都只剩下 10 - 20 张的时候，稍微排一下序就好了。最后全部按顺序叠在一起就好。这种做法抽象出来就类似经典的<strong>快速排序</strong>算法。</p>
<p>如果我们再往上抽象一层，其实它属于<strong>分治法</strong>（Divide and conquer）。根据 Wiki 的解释：</p>
<blockquote>
<p>“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。</p>
</blockquote>
<p>分治法是多分支<strong>递归</strong>的一种形态。很多人在学习编程的时候，会觉得递归非常难理解。但是，如果紧紧抓住这个分治法的核心，怎么把复杂问题分解成相似的子问题，并合并所有的子问题的解答，就会容易很多。</p>
<p>比方说，我在自己正在写的 JavaScript 入门书里面举的例子，如果我们要计算 <code>1 + 2 + 3 + ... + 8 + 9 + 10</code> 这个算式怎么做？我们当然可以像人工点计算器那样，一直简单地重复加下去。但是，我们还可以换成这个思路来理解。上面的算式，其实也就是 <code>10</code> 和算式 <code>1 + 2 + 3 + ... + 8 + 9</code> 的和；算式 <code>1 + 2 + 3 + ... + 8 + 9</code> 其实又是 <code>9</code> 和算式 <code>1 + 2 + 3 + ... + 8</code> 的和，以此类推。</p>
<p>这种思路其实就是分治的思路。那么，如果我们稍微抽象一下，用一个简单的符号来表示最开始那个要计算的算式，比如 <code>additionOfNumbersUpTo(10)</code>。它其实就等价于 <code>10 + additionOfNumbersUpTo(9)</code> 了。这样理解的话，你们应该就可以看懂这段用 JavaScript 写的递归函数代码了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">additionOfNumbersUpTo</span>(<span class="params">max</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (max == <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> max</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> max + additionOfNumbersUpTo(max - <span class="number">1</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="模式、范例"><a href="#模式、范例" class="headerlink" title="模式、范例"></a>模式、范例</h2><p>学习编程语言，最常听到的就是各种模式或者范式。下面简单抽几个最出名的例子来说明一下。</p>
<h3 id="命令式、声明式"><a href="#命令式、声明式" class="headerlink" title="命令式、声明式"></a>命令式、声明式</h3><p>编程语言有两大范式：命令式和声明式。怎么理解呢？我们继续看具体的例子。比如说，我们要实现一个简单的网页效果，在浏览器上显示如下的文本样式。  </p>
<ul>
<li>Cake  </li>
<li>Fruit  </li>
<li>Steak  </li>
</ul>
<p><strong>命令式写法</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"foodList"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> food = [<span class="string">'Cake'</span>, <span class="string">'Fruit'</span>, <span class="string">'Steak'</span>]</div><div class="line"></div><div class="line">  <span class="keyword">var</span> foodListElement = <span class="built_in">document</span>.getElementById(<span class="string">'foodList'</span>)</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; food.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> child = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</div><div class="line">    child.innerHTML = food[i]</div><div class="line">    foodListElement.appendChild(child)</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面的代码是什么意思呢？  </p>
<ol>
<li><p><code>var foodListElement = document.getElementById(&#39;foodList&#39;)</code>。帮我把 ID 为 <code>foodList</code> 的东西找到，先放到一个叫 <code>foodListElement</code> 的地方。  </p>
</li>
<li><p><code>for (var i = 0; i &lt; food.length; i++) { ... }</code>。按照 <code>food</code> 的数量，把 <code>{}</code> 里面的那一段重复做几次。  </p>
</li>
<li><p><code>var child = document.createElement(&#39;li&#39;)</code>。创造一个叫 <code>li</code> 的东西。  </p>
</li>
<li><p><code>child.innerHTML = food[i]</code>。把它里面要显示的文字，设置为第几个事物的名字。  </p>
</li>
<li><p><code>foodListElement.appendChild(child)</code>。把这个新创造出来的 <code>li</code>，放到之前找到的 <code>foodListElement</code> 里面。  </p>
</li>
</ol>
<p>所以，<strong>命令式编程强调地是把如何完成一项任务的具体步骤都列出来</strong>。要像下达指令一样，告诉电脑第一步做什么，第二步做什么，最后达成你的目标。这里有一个地方是声明式的，就是 HTML 的 <code>&lt;ul id=&quot;foodList&quot;&gt;</code>。</p>
<p><strong>声明式写法</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">ng-controller</span>=<span class="string">"FoodController"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"foodName in food"</span>&gt;</span>&#123;&#123;foodName&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  angular.controller(<span class="string">'FoodController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</div><div class="line">    $scope.food = [<span class="string">'Cake'</span>, <span class="string">'Fruit'</span>, <span class="string">'Steak'</span>]</div><div class="line">  &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这一段代码是不是简洁很多？说不定你们都看懂了。  </p>
<ol>
<li><p><code>&lt;ul ng-controller=&quot;FoodController&quot;&gt;</code>。<code>ul</code> 的行为受一个叫 <code>FoodController</code> 的东西控制。  </p>
</li>
<li><p><code>&lt;li ng-repeat=&quot;name in food&quot;&gt;&lt;/li&gt;</code>。根据 <code>food</code> 的数量，重复生成几个 <code>li</code>，并且显示相应的食物名字在里面。  </p>
</li>
<li><p><code>&lt;script&gt;</code> 里面包含那段就告诉浏览器 <code>FoodController</code> 长什么样子，<code>food</code> 里面有什么东西。</p>
</li>
</ol>
<p><strong>声明式编程是指把你只要告诉电脑你要达成的目标是什么，至于怎么做，它自己解决。</strong>这里，我们就不像命令式那样，要一步步教浏览器怎么做了。</p>
<p>要注意的是，这里借助了一个叫 <em>AngularJS</em> 的工具，从而做到了用同一种语言，不同的写法。  <strong>不一定不同的编程语言才有不同的书写范式。同一种编程语言，也可以自己本身有不同的书写范式，或者通过工具来增强改变</strong>。<em>AngularJS</em> 这个工具，就是创作者帮我们抽象了教浏览器如何做事情的过程。</p>
<h3 id="面向对象、函数式"><a href="#面向对象、函数式" class="headerlink" title="面向对象、函数式"></a>面向对象、函数式</h3><p>要数最热火朝天的编程范式，非这两个莫属了。  前一篇文章<a href="http://www.thinkingincrowd.me/2016/08/28/What-is-programming-should-I-learn/">编程是什么？我要学吗？</a>里面说过，<strong>算法 + 数据结构 = 程序</strong>。</p>
<p><strong>面向对象的特点就是，把数据，和相应的处理算法或者说行为都放到一个相应的容器里面。承载数据和行为的容器就是对象</strong>。咋一听可能不好理解。比如，我要在电脑里面模拟一个人，这个人可以看做是一个容器或者对象。他包含了一些数据，一双眼睛，手，腿，黑色的头发等。我们还可以在这个对象上面加上<em>行走</em>这样的行为。行走可以根据这个对象有没有手或者腿来决定行走的行为是怎么样的。也可以根据你给不给他穿鞋子，或者穿什么鞋子而不同。  </p>
<p><strong>函数式里面很重要的一个特点就是，算法本身也可以被看作一种特殊的数据，然后传给其它算法使用</strong>。这个概念如果不看代码的话，真的是不好理解。前方小高能一下。  假设我们有一些数字，我想做两个事情，一个是把它们都乘以 2，一个是算它们的平方。  </p>
<p>下面简单抽象了两个算法 <code>doubleArray</code> 和 <code>squareArray</code>，每个都是根据传进去的数字进行一个个查看，然后做相应的操作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doubleArray</span>(<span class="params">numbers</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = []</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</div><div class="line">    result[i] = numbers[i] * <span class="number">2</span> <span class="comment">// 乘以 2</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">squareArray</span>(<span class="params">numbers</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = []</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</div><div class="line">    result[i] = numbers[i] * numbers[i] <span class="comment">// 乘方</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line"></div><div class="line">doubleArray(numbers)</div><div class="line"><span class="comment">// -&gt; [ 2, 4, 6, 8, 10 ]</span></div><div class="line">squareArray(numbers)</div><div class="line"><span class="comment">// -&gt; [ 1, 4, 9, 16, 25 ]</span></div></pre></td></tr></table></figure>
<p><em>//-&gt; 表示运算结果</em></p>
<p>你们如果仔细看的话，上面的 <code>doubleArray</code> 和 <code>squareArray</code> 只有那么一点点不同啊。如果我们进一步抽象，可以变成下面的样子。  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">double</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> num * <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> num * num;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">data, fn</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> results = [];</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</div><div class="line">    results.push(fn(data[i]));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> results;</div><div class="line">&#125;</div><div class="line"></div><div class="line">map(numbers, double)</div><div class="line"><span class="comment">// -&gt; [ 2, 4, 6, 8, 10 ]</span></div><div class="line">map(numbers, square)</div><div class="line"><span class="comment">// -&gt; [ 1, 4, 9, 16, 25 ]</span></div></pre></td></tr></table></figure>
<p>你们可以看到，<code>double</code> 和 <code>square</code> 把不同的地方抽象出来了。<code>map</code> 则是把公共的部分抽象出来了。使用的时候，<code>double</code> 和 <code>square</code> 被当作数据一样传进去，然后使用。这就是函数式里面一个很重要的高阶函数的概念。  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习编程，到处都是抽象的概念。这个时候，需要我们从抽象到具象的转换来辅助我们的理解和思考。所以，这就是为什么我一开始就强调学习编程是要有具象与抽象之间转换的能力。这个不应该是单向，而是双向的。</p>
<p>具备抽象的思维方式，目的就为能举一反三，解决通用问题。具备这种能力，对解决实际问题都是有很大的用途。所以，这也是为什么我觉得无论是否从事编程领域，都应该学习一定的编程知识。</p>
<p>上面这些如果你都看懂了，你肯定不用担心学不会编程。如果不懂也没有关系，因为它们真的不是那么容易。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多人说，要学好编程，需要有抽象的能力。但&lt;em&gt;抽象&lt;/em&gt;这个词本身就太抽象了。怎么样才叫有抽象的能力啊？。&lt;strong&gt;抽象是相对于具象而言的&lt;/strong&gt;。我觉得，与其说学习编程要具备抽象的能力，不如说&lt;strong&gt;编程应该具备具象与抽象之间转换的能力&lt;/
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Programming" scheme="http://www.thinkingincrowd.me/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>我为什么选择囚徒健身？</title>
    <link href="http://www.thinkingincrowd.me/2016/09/04/Why-I-choose-convict-conditioning/"/>
    <id>http://www.thinkingincrowd.me/2016/09/04/Why-I-choose-convict-conditioning/</id>
    <published>2016-09-04T13:29:36.000Z</published>
    <updated>2016-09-21T15:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然我大概一两年前就听过「囚徒健身」，因为我楼上的邻居当时就开始跟着练习，但是我可是两个月前才真正开始接触。当时我准备要离职，前往北京工作，曾经在我团队里面的一个健身的小朋友送了我这本书。他说：“Ken 哥,你在北京可能比较忙，而且健身房又贵，送你这本书，好好坚持锻炼。”。</p>
<p>其实在这之前的两三个月，我都有在家练哑铃飞鸟，和门上单杠，还跟那位健身的小朋友去健身房试水了一下杠铃卧推。那为什么我现在最终决定选择跟着「囚徒健身」来练呢？就是因为要远走北京，健身房贵和不方便的原因吗？</p>
<h2 id="健身为了什么"><a href="#健身为了什么" class="headerlink" title="健身为了什么"></a>健身为了什么</h2><p>笑来老师经常和我们说，学每一件事情都要明白目的是为了什么，最重要的是什么。</p>
<p>我<strong>健身的目的是什么呢</strong>？  </p>
<ul>
<li>运动健康</li>
<li>强健肌肉</li>
</ul>
<p>那<strong>健身最重要的是什么呢</strong>? 我觉得是：  </p>
<ul>
<li>坚持，循序渐进</li>
<li>正确的姿势，避免受伤</li>
</ul>
<p>所以，我一眼看上和喜欢「囚徒健身」这本书的原因，就是因为作者的健身理念完全契合上面这两点。  </p>
<p>相对于器械健身来说，其实「囚徒健身」是自重健身这个派别的。下面我就讲一下到底什么是「囚徒健身」，和它的理念是怎么契合上面的两点的吧。</p>
<h2 id="坚持，循序渐进"><a href="#坚持，循序渐进" class="headerlink" title="坚持，循序渐进"></a>坚持，循序渐进</h2><p>「囚徒健身」里面有六艺，每一艺有十式:  </p>
<blockquote>
<p><strong>俯卧撑</strong>：墙壁俯卧撑，上斜俯卧撑，膝盖俯卧撑，半俯卧撑，标准俯卧撑，窄距俯卧撑，偏重俯卧撑，单肩半俯卧撑，杠杆俯卧撑，单臂俯卧撑</p>
<p><strong>深蹲</strong>：肩倒立深蹲，折刀深蹲，支撑深蹲，半深蹲，标准深蹲，窄距深蹲，偏重深蹲，单腿半深蹲，单腿辅助深蹲，单腿深蹲</p>
<p><strong>引体向上</strong>：垂直引体向上，水平引体向上，折刀引体向上，半引体向上，标准引体向上，窄距引体向上，偏重引体向上，单臂半引体向上，单臂辅助引体向上，单臂引体向上</p>
<p><strong>举腿</strong>：坐姿屈膝，平卧抬膝，平卧屈举腿，平卧蛙举腿，平卧直举腿，悬垂屈膝，悬垂屈举腿，悬垂蛙举腿，悬垂半举腿，悬垂直举腿</p>
<p><strong>桥</strong>：短桥，直桥，高低桥，顶桥，半桥，标准桥，下行桥，上行桥，合桥，铁板桥</p>
<p><strong>倒立撑</strong>：顶墙倒立，乌鸦式，靠墙倒立，半倒立撑，标准倒立撑，窄距倒立撑，偏重倒立撑，单臂半倒立撑，杠杆倒立撑，单臂倒立撑</p>
</blockquote>
<p>我们可以看到，每一艺都包含了十式，而每一式还可以按照分组和往复次数的调整，来让我们从易到难，循序渐进，深入强化。而且，虽说这里的每一艺，都主要针对身体的某一个部位来锻炼，但它同时也能兼顾其它部位。上面练的很多动作都需要身体的整体平衡和协调，不像器械健身那样，有些是专门针对特定部位，甚至是特定某块肌肉的。</p>
<p>作者再三强调，无论你觉得自己有多强壮，都不要跳过前面的几式，直接上来就练习第五，第六式，甚至更后面的动作。那样很可能会很容易受伤，或者在某个阶段碰到一堵墙而无法逾越，因为身体的某些关节或者肌肉没有准备好。作者在书里面的一句话是值得深思的：</p>
<blockquote>
<p>“要多久才能升级到下一式？”这根本就是个错误的问题。他们应该问：“现在做的练习，能让我受益多久？”</p>
</blockquote>
<h2 id="正确的姿势，避免受伤"><a href="#正确的姿势，避免受伤" class="headerlink" title="正确的姿势，避免受伤"></a>正确的姿势，避免受伤</h2><p>其实去健身房，和请私教最主要的目的，就是为了确保我们的姿势准确。那如果我只看书和视频学习「囚徒健身」的动作，不请私教，怎么能保证姿势是正确的，并且不容易受伤呢？  </p>
<h3 id="自重而不是负重"><a href="#自重而不是负重" class="headerlink" title="自重而不是负重"></a>自重而不是负重</h3><p>人的身体，按照自然的进化，应当是能适应自身的体重，体力工作或者运动，从而保持行动的基本需要。其实我左手手腕曾经因为玩滑板时摔倒而扭伤，还挺严重的。所以，我在做杠铃卧推（大概 60 斤），哑铃飞鸟（每个 20 斤) 的时候，感觉手腕已经有点承受不住了。我想，如果往后继续练习，还要再增加重量的话，恐怕比较难了。如果我在健身房，没人保护，卧推时撑不住就是被杠铃压下来。在家做俯卧撑的话，最多就趴下而已。  </p>
<h3 id="避免力竭"><a href="#避免力竭" class="headerlink" title="避免力竭"></a>避免力竭</h3><p>不少健身的教程都说要做到力竭，才结束一组练习。但是「囚徒健身」作者不提倡这一点，他认为我们要最少保留能够做好一次完美往复动作的力量，然后结束。力竭是很危险的，尤其是你在健身房负重的情况下。所以很多去健身房的，都尽量找有人陪伴和保护。</p>
<h3 id="慢"><a href="#慢" class="headerlink" title="慢"></a>慢</h3><p>「囚徒健身」对每一次动作的要求很简单：  </p>
<ul>
<li>用 2 秒，从起始姿势，到结束姿势  </li>
<li>在结束姿势停留 1 秒  </li>
<li>用 2 秒，从结束姿势，回到起始姿势  </li>
</ul>
<p>实际操作的时候不用很精确，大概这么个慢法就可以了。为什么要慢呢？</p>
<ul>
<li>避免惯性，真正对肌肉产生锻炼效果  </li>
<li>让我们有时间体会自己肌肉发力状态，适当调整姿势，不至于对肌肉和关节造成损伤  </li>
</ul>
<p>我觉得这点是很重要的。首先，没有教练的指导，单看书和视频，靠的就是慢，来更好的领会动作。在我们知道某一艺是为了锻炼哪个部位的肌肉的情况下，慢慢感受身体肌肉，筋骨和关节的变化，和是否有疼痛和不适应感，才能更好的告诉我们是否是在正确的姿势上。再说，身体始终是我们自己的，我们应该尽量学会让自己更好的了解自己的身体。  </p>
<h2 id="其它好处"><a href="#其它好处" class="headerlink" title="其它好处"></a>其它好处</h2><h3 id="方便，减少依赖"><a href="#方便，减少依赖" class="headerlink" title="方便，减少依赖"></a>方便，减少依赖</h3><p>因为是自重健身，所以它要用到的辅助工具通常能在生活中的东西中找到。如果我学会这种方法，就随时可以健身，不必一定要找健身房。</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>因为是自己锻炼，那么要注意什么呢？</p>
<ul>
<li>自我驱动  </li>
</ul>
<p>因为没有教练，可能也没有小伙伴陪着去健身房，所以，自我驱动很重要。但是，真的对自己身体在乎，有多少人是要别人推着走呢？</p>
<p>除了要推着自己向前外，还要注意不要着急，要有耐心，慢慢来，不能急着跳到下一式。作者的观点是，<strong>慢既是快</strong>。</p>
<ul>
<li>自我感知  </li>
</ul>
<p>正如前面所说，自己需要根据自己的身体状况，做动作时候的感受来随时调整。比如，我现在做举腿的第二式，本来应该是练腹部和大腿，但是感觉自己腹部没什么用力。后来发现是自己双手在后面撑的姿势不对，导致我借用了腰部的力量。当我把手的位置调整了一下，马上就感觉的腹部要用更大的力气来平衡和稳住自己。原来能做 30 个的，就马上退回到 25 个了。</p>
<ul>
<li>自我突破  </li>
</ul>
<p>这个也是不容易的。旁边没人督促，安排计划和帮你呐喊，全靠自己坚持，观察和感受。不能把自己搞到力竭，又要慢慢突破，一次一次往复的慢慢加，逐步挑战自己。</p>
<h2 id="是不是器械健身就不好？"><a href="#是不是器械健身就不好？" class="headerlink" title="是不是器械健身就不好？"></a>是不是器械健身就不好？</h2><p>并不是的。如果你在知乎找一下「囚徒健身」的话题，你可以看到也有人说他有些观点偏激，和不好的地方。有些器械健身的好的理念也是可以借助和融合的。比如说，深蹲方面，「囚徒健身」里直接是向下蹲，器械健身比较多的是向后蹲，减少膝盖的压力。那么我在练习的时候，也就有意识稍微向后一点。  </p>
<p>而且，如果你真的不好好感知自己身体，调整姿势，或者在某一个阶段停滞下来，怎么都无法前进了，那可能去健身房请“靠谱的”教练，或者用器械辅助还是更好一点。只是一定要找到靠谱的教练，因为这个年代，各种证来的太容易，太多水分了。我那个健身的朋友也说，不少都是刚入门，也没什么经验的。  </p>
<p>所以，我只是说我倾向于<strong>自重健身</strong>这个理念，目前选「囚徒健身」作为入门。无论选择哪种，一定要<strong>不忘初心，不要做表现型人物</strong>。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然我大概一两年前就听过「囚徒健身」，因为我楼上的邻居当时就开始跟着练习，但是我可是两个月前才真正开始接触。当时我准备要离职，前往北京工作，曾经在我团队里面的一个健身的小朋友送了我这本书。他说：“Ken 哥,你在北京可能比较忙，而且健身房又贵，送你这本书，好好坚持锻炼。”。
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Calisthenics" scheme="http://www.thinkingincrowd.me/tags/Calisthenics/"/>
    
      <category term="Workout" scheme="http://www.thinkingincrowd.me/tags/Workout/"/>
    
  </entry>
  
  <entry>
    <title>一个野生程序员的成长之路</title>
    <link href="http://www.thinkingincrowd.me/2016/08/31/my-programming-path/"/>
    <id>http://www.thinkingincrowd.me/2016/08/31/my-programming-path/</id>
    <published>2016-08-31T15:08:35.000Z</published>
    <updated>2016-09-21T15:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>我大学读的并不是计算机专业。只是很粗浅的学习过一点 C 语言，知道简单的 for loop，if 语句等，以及一个叫 Foxpro 的数据库。我当时出去面试，说只用过这个数据库的时候，你都无法想象当时那些面试官脸上的鄙视的表情。后来，幸运的在做对一道智力题的情况下，被一家小公司看上，踏上了程序员的道路。然后就一直在珠海待了几乎 12 年了。</p>
<h2 id="成长足迹"><a href="#成长足迹" class="headerlink" title="成长足迹"></a>成长足迹</h2><p>我还依稀记得，在第一家公司，CORESOLUTIONS，最开始承担的两个工作任务。</p>
<p>刚进公司，负责带我的人帮我拉了源代码，配置好环境后，然后和我大概讲了一下他打算让我做的页面的样子，然后让我在系统里先自己看看。当时那个系统，页面是由一套 JAVA 实现的内部 UI 渲染组件，在 JSP 里面生成出来的。所以，网络外面是完全查不到参考资料的。我对照着系统现有的其它参考页面和代码，大概花了半天还是一天，把我要做的页面，模仿着做了出来。当我问他那是不是想要的效果时，我还很清楚记得他当时那么一丝惊讶的表情，内心还是有些窃喜。紧接着的另一个任务，是要用 JavaScript 写一个函数，做出能点击 HTML 的 table 任意表头对记录排序的功能。这个任务足足花了我 3 天。</p>
<p>因为我是非科班出身，底子差，怕被他们发现我太搓，只能自己不断尝试和憋着自学 Java，JSP，JavaScript 和 DOM 元素的各种操作方法。况且当时我要面对的 Leader 是会因为下属（或自己）某些事情做的不好，猛敲键盘发脾气的。一开始压力真的很大，而且不敢轻易问问题。</p>
<p>在这个公司待了差不多 8 年。那段时间接触的东西很杂，学很多不同的技术和做了很多项目。要做什么，马上学什么，用什么。</p>
<ol>
<li>测试：带小团队参与渣打银行一个项目的 UAT 测试  </li>
<li>支持：公司资深顾问集体跳槽后，承担 Schick 公司 Manugistiscs 系统的技术支持</li>
<li>数据仓库：香港 Lane Crawford 的 BI 和 Crystal Report 项目</li>
<li>外包：在香港 Laws Group 用 Powerbuilder 做产品，在 UBS 用 JAVA 做内部投资产品系统</li>
<li>J2EE：用公司 J2EE 的框架，做广州 DailyFarm 和上海 Apparel Group 的项目</li>
</ol>
<p>后来，因为公司放弃用 JavaScript，用 ZK 那个框架写 UI，我就离职了。</p>
<p>之后，去了东方海外货柜航运公司，做它们内部的航运系统。本来是奔着它们的前端项目去，更深入学习 JavaScript，却没想到被派去美国学习几个月，接手后端，就变成后端代码写的多一些了。而且毕竟我的经验也相对丰富，所以后来带团队和沟通时间花费，比自己写代码的时间还要多一些。</p>
<h2 id="做的好的地方"><a href="#做的好的地方" class="headerlink" title="做的好的地方"></a>做的好的地方</h2><p>回顾这些的经历，它们对我的学习，沟通和应变能力的提升有客观影响。下面是我个人做的比较好的几点。也正是因为这样，前面的发展还是比较顺的。</p>
<h3 id="迅速学习和应变"><a href="#迅速学习和应变" class="headerlink" title="迅速学习和应变"></a>迅速学习和应变</h3><ul>
<li>整体思维</li>
</ul>
<p>比较常见的技术学习模式有两种。一是从整体到细节，另一种是从细节到整体。一般来说，采用第一种学习模式的人，学习速度更快一些。这种模式下学习的人在面对新技术的时候，一般只需要知道整体概念，大概包含哪些组件，每个组件分别起什么作用，怎么相互关联，然后就可以开始使用这个技术实践了。而习惯第二种方式的人，他们需要细嚼慢咽的看文档，把一个概念的大部分细节都理清，才能继续下一个。</p>
<p>对于我来说，在面对一个新的方法、类、代码库或者技术的时候，我首先要做的事情，就是尝试从整体上理解这个新的方法或者类用来干什么，新的代码库的整体结构是怎么样的，入口在什么地方，新技术的整体理念是什么。整体思路有了后，按需再逐步填充细节。前面说到的半天就把页面做出来的例子，就是因为我只需要结合现有页面，再猜一猜框架 API 的大概用法，就可以做出来了，即便我不完全理解整个框架。所以，<strong>整体思维是帮助我迅速解决问题，学习新技术的重要手段</strong>。</p>
<ul>
<li>实践</li>
</ul>
<p><strong>学了就用，立即实践</strong>。其实我以前经常面临的情况更夸张，是<strong>现用现学</strong>。但不论如何，重点是通过实践来学习和掌握理论知识。有不少人看了一整本书下来，都还没有动过手。但是，只有真正实践起来，你才会发现那些你原来以为已经懂了的概念，可能完全不知道怎么和实际联系起来。</p>
<ul>
<li>独立思考，不轻易提问</li>
</ul>
<p>正如前面所说，我一开始是不敢问，因为怕别人觉得我太搓。如果遇到需求的问题，我就把自己当用户，从常识出发。这样才能让自己更具备产品思维能力，而不至于沦落为一个仅仅是盲从需求的码农，我还能根据自己的技术优势，反过来给业务分析人员意见。如果是技术问题，自己尽量找文档、示例，能从 Google 找到答案的，就不应该问他人。所以，在你打算张口提问之前，<strong>再想想，别急着问</strong>。</p>
<p>不过后来我带刚毕业的新人时，我是鼓励他们问问题的。只是要<strong>学会什么应该问，和怎么问</strong>。有兴趣可以看看之前写的 <a href="http://www.thinkingincrowd.me/2013/05/28/how-to-ask-share-and-influence/">一点点对提问，分享和影响力的看法</a>。  </p>
<ul>
<li>化压力为动力</li>
</ul>
<p>我真的觉得压力有时是一个好东西。恰当的压力，把你推出舒适区（Comfort Zone），身处伸展区（Stretch zone）的时候，你很多的潜能都会被逼出来。之前我被频繁的派往不同项目，学习新技术，并在客户一线，真的感觉被推着走，所以成长的也很快。所以，要恰当给自己添加压力，定目标和 deadline。</p>
<h3 id="沟通能力"><a href="#沟通能力" class="headerlink" title="沟通能力"></a>沟通能力</h3><p>我之前任职的公司都是港资公司。身为一个广东人，精通粤语和不错的英语让我在语言上有了很大的优势。很自然的，我成为了香港老板，内地员工之间沟通的桥梁。英语能力也让我能比别人有更多的项目机会，向外接触客户，甚至出国的机会。</p>
<p>当然，语言我觉得还不是最主要的。最重要的是<strong>能迅速准确地理解他人的想法，尽可能为下一步行动提出可行意见，并达成共识</strong>。我觉得这是高效协作的最基本的要求。很多人说程序员不善于沟通，所以，我在这方面做得还可以的情况下，机会就比别人多一些。</p>
<h3 id="不怕吃亏"><a href="#不怕吃亏" class="headerlink" title="不怕吃亏"></a>不怕吃亏</h3><p>很多毕业生眼高手低，脏活累活不干，认为没有价值，学不到东西。当年，我自认起点比较低，上级无论指派什么任务都去做。比如，我曾经被要求找出 JSP 里面不必要的 import 和项目里所有只捕获了顶级异常的 JAVA 类，再看每个的使用是否恰当。这些脏累活，有些虽然只是体力活，有些却可以思考是否可以用程序来解决的，有些还有助于增进对公司系统的理解。<strong>不挑活，把小事做好，可以极大提升信任度，才有可能接手更重要的任务</strong>。</p>
<p>还有另一个就是，先把工作干好，才提要求（加薪，请假等）。很多同学，还没开始干活，就要这要那，好像是先要把自己的要求都满足了，东西先拿到手，才愿意付出。<strong>怕吃亏，其实最后可能更吃亏</strong>。</p>
<h3 id="乐于分享，授权"><a href="#乐于分享，授权" class="headerlink" title="乐于分享，授权"></a>乐于分享，授权</h3><p>工作两三年后，我都基本需要带 2 ~ 6 人的团队。带人的时候，我都会注意怎么引发他们思考，分享我的知识和经验给他们，也乐于授权给他们做一些有挑战的事情。之前写了一些文章总结，有兴趣的可以看看。  </p>
<ul>
<li><a href="http://www.thinkingincrowd.me/2016/03/08/How-to-delegate/">如何授权和分配工作</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2016/03/08/Novice-vs-Experienced/">有经验和没有经验的程序员的区别</a></li>
</ul>
<h2 id="做的不好的地方"><a href="#做的不好的地方" class="headerlink" title="做的不好的地方"></a>做的不好的地方</h2><p>既然上面好像说的我很多方面都做得很不错了，但是为什么还没有出人头地，走上人生巅峰，做个 CTO 什么的? 因为上面某些做得好的地方，处理不好的话，其实会有点反作用。</p>
<h3 id="技术太散，深入不够"><a href="#技术太散，深入不够" class="headerlink" title="技术太散，深入不够"></a>技术太散，深入不够</h3><p>因为我具备快速学习，较杂的技术面和良好的沟通能力，在 CORESOLUTIONS 时，从老板的角度出发，我就更适合做一些外包项目。虽然我混了一个看似牛B的顾问这样的头衔，但是由于我是非科班出身，基础不够扎实，有些细节是要回头补上才行的。再加上我不断的转换项目和使用不同的技术，填坑就变得更难。况且，最主要是我自己没有刻意并主动地寻找某一个技术点和领域深入下去，并向公司提要求，要往什么方向发展。所以，T 字的那一竖，不够深。</p>
<h3 id="反思总结不够"><a href="#反思总结不够" class="headerlink" title="反思总结不够"></a>反思总结不够</h3><p>自身较杂的技术面，就像完整的拼图上面这里一块，那里一块一样。自己没很好的花时间认真反思，梳理和沉淀，把它们更好地链接起来，形成自己的完整的知识体系网络。</p>
<h2 id="后面怎么弄"><a href="#后面怎么弄" class="headerlink" title="后面怎么弄"></a>后面怎么弄</h2><p>现在，我打算先从 JavaScript 开始，整理知识点，顺便写一本供别人入门学习 JavaScript 的书 <a href="https://leanpub.com/tasting-javascript" target="_blank" rel="external">Tasting JavaScript</a>，现在已经写到第 5 章了。然后再根据之前参与的基于 Node.js 开发的系统，按自己的想法再重新构建，把系统分层，架构，日志，测试，前后端结合等，好好地梳理一遍，补充一下那些不完善的系统和运维等方面的知识，以形成自己的体系。后面如果有机会的话，再接触一下运营和产品。最后说不定真能胜任一个小小的 CTO 哦。其实，<strong>最重要的是有把事情做成的能力</strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我大学读的并不是计算机专业。只是很粗浅的学习过一点 C 语言，知道简单的 for loop，if 语句等，以及一个叫 Foxpro 的数据库。我当时出去面试，说只用过这个数据库的时候，你都无法想象当时那些面试官脸上的鄙视的表情。后来，幸运的在做对一道智力题的情况下，被一家小
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Programming" scheme="http://www.thinkingincrowd.me/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>编程是什么？我要学吗？</title>
    <link href="http://www.thinkingincrowd.me/2016/08/28/What-is-programming-should-I-learn/"/>
    <id>http://www.thinkingincrowd.me/2016/08/28/What-is-programming-should-I-learn/</id>
    <published>2016-08-28T03:04:46.000Z</published>
    <updated>2016-09-21T15:48:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多人觉得编程是很高端神秘的事情，觉得自己可能学不来。但是了解到程序员的工资比较高，所以又蠢蠢欲动，想进入这个领域。那么，在回答这个问题前，我们先了解一下什么是编程吧。</p>
<h2 id="什么是编程"><a href="#什么是编程" class="headerlink" title="什么是编程"></a>什么是编程</h2><p>编程，也叫程序设计，其实就是用编程语言处理数据，以达到你想要的效果。有一本书的名字很清楚表达了这个观点。</p>
<p><strong>Algorithms</strong> + <strong>Data Structures</strong> = <strong>Programs</strong></p>
<p><strong>算法</strong> + <strong>数据结构</strong> = <strong>程序</strong></p>
<h3 id="什么是数据结构"><a href="#什么是数据结构" class="headerlink" title="什么是数据结构"></a>什么是数据结构</h3><p>数据结构其实就是数据存储的方式。我们不妨用下面几个生活中的例子来理解。</p>
<ul>
<li>地铁站X光机上的一件件行李</li>
</ul>
<p>行李是排成一排，顺序进入 X 光机处理的。排最前面的，先处理。最后进的，最后处理。如果把行李看作是数据，这种数据结构其实是队列。<strong>队列的特点是先进先出</strong>。</p>
<ul>
<li>超市里叠在一起的一箱箱牛奶</li>
</ul>
<p>叠在一起的箱子，最开始放置的肯定是最下面的那个，然后一箱一箱往上垒。要拿出来的时候，当然是先拿最上面的，最下面的最后才拿。这种结构就是栈。<strong>栈的特点是先进后出</strong>。</p>
<ul>
<li>电脑的文件夹</li>
</ul>
<p>文件夹可以包含有子文件夹和文件，子文件夹又可以再包含下一层的文件夹和文件。这个结构可以理解为树型结构。文件是树的叶子节点，子文件夹可以是树的分支，也可以是叶子。<strong>树的特点是分支和层级关系</strong></p>
<h3 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h3><p><strong>算法就是对数据进行处理的方法</strong>。</p>
<p>从数据层面看，结构不同一般需要不同的处理方式。从处理效率看，对同一种数据结构，也可以有多种不同的处理方式。有些算法，可能要处理的数据量越大，时间就会成倍增加。有些却无论数据多大，时间都基本恒定。举一个例子：</p>
<p>假设你买了一个圆柱型的水果软糖，里面有 9 粒糖果。如果它的包装开口是在某一边，你需要拿第 5 粒，那么你就必须先把前面 4 粒拿出来，才能拿到第 5 粒。而且你想拿的糖果在越后面，花费时间就越多。但是，假设有一种包装是横着把圆柱形打开（结构不同了），你一次可以看到和拿到 9 粒糖果。那么无论你拿哪一粒，花费的时间都是一样的。</p>
<h3 id="在电脑里是怎样的？"><a href="#在电脑里是怎样的？" class="headerlink" title="在电脑里是怎样的？"></a>在电脑里是怎样的？</h3><p>假设我把上面的糖果问题抽象到计算机里面，是什么样子的呢？下面用一段 JavaScript 代码来模拟吧。<em>懂编程的朋友，别吐槽顺序取的代码，我知道可以按位置，这里只是说明一下。</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMeTheCandy</span>(<span class="params">candy</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(candy)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 排成列，顺序取</span></div><div class="line"><span class="keyword">var</span> candy = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>] <span class="comment">// 我有9粒字母糖果</span></div><div class="line"><span class="keyword">var</span> toPickCandyLocation = <span class="number">5</span> <span class="comment">// 我要取的糖果是第5粒</span></div><div class="line"><span class="keyword">var</span> currentCandyLocation = <span class="number">1</span> <span class="comment">// 现在我要开始取的是第1粒</span></div><div class="line"><span class="keyword">var</span> candyPicked = <span class="literal">null</span> <span class="comment">// 我取的糖果要放这，但现在还不存在</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> (currentCandyLocation &lt;= <span class="number">5</span>) &#123; <span class="comment">// 当我要取的糖果还不是第5粒的话，重复下面的事情</span></div><div class="line">  candyPicked = candy.shift() <span class="comment">// 从最前面取1粒</span></div><div class="line">  currentCandyLocation = currentCandyLocation + <span class="number">1</span> <span class="comment">// 挪到下一个位置</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">showMeTheCandy(candyPicked) <span class="comment">// 看看拿到的糖果是什么字母</span></div><div class="line"><span class="comment">// -&gt; 'E'</span></div><div class="line"></div><div class="line"><span class="comment">// 做成特定的，可按位置/编号取的结构</span></div><div class="line"><span class="keyword">var</span> candy = &#123;</div><div class="line">  <span class="string">'1'</span>: <span class="string">'A'</span>,</div><div class="line">  <span class="string">'2'</span>: <span class="string">'B'</span>,</div><div class="line">  <span class="string">'3'</span>: <span class="string">'C'</span>,</div><div class="line">  <span class="string">'4'</span>: <span class="string">'D'</span>,</div><div class="line">  <span class="string">'5'</span>: <span class="string">'E'</span>,</div><div class="line">  <span class="string">'6'</span>: <span class="string">'F'</span>,</div><div class="line">  <span class="string">'7'</span>: <span class="string">'G'</span>,</div><div class="line">  <span class="string">'8'</span>: <span class="string">'H'</span>,</div><div class="line">  <span class="string">'9'</span>: <span class="string">'I'</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line">showMeTheCandy(candy[<span class="string">'9'</span>])</div><div class="line"><span class="comment">// -&gt; 'E'</span></div></pre></td></tr></table></figure>
<p>从上面可以看到，同样的数据，可以按照不同的结构来存放。不同的处理逻辑/算法，效率不同。所以，从这种角度来看，<strong>学习编程和程序设计，是学会抽象</strong>，学会如何把现实问题，在计算机里面表现出来。<strong>还有数据处理</strong>。</p>
<p>从另一种角度来看，<strong>编程和程序设计，就像写作</strong>。从上面第一段顺序取数据的代码看，我就像写作一样。我在用计算机能理解的语言，写操作指引出来。一个好的程序员，写的代码，一定像好文章那样容易理解。不同的语言，指令有点不同，但不差太远。所以学会一种语言，再学一种难度就没那么大。</p>
<h2 id="应该不应该学习编程"><a href="#应该不应该学习编程" class="headerlink" title="应该不应该学习编程"></a>应该不应该学习编程</h2><p>其实编程和程序设计并不难，尤其是当你能把它和实际问题结合，理解。回到最开始的问题，我应该学编程吗？首先，问问你自己，你学编程的目的是什么？</p>
<ol>
<li><p>你觉得通过指尖敲击的指令，就能创造无限可能，这实在是太酷了。  –  你绝对应该学习。</p>
</li>
<li><p>你目前遇到些繁琐而重复的事情，想看一下计算机能否代劳。  –  你应该尝试。</p>
</li>
<li><p>你想找一份工资相对高的工作，不用搬搬抬抬，还能在办公室吹空调。  –  这也是不错的选择。</p>
</li>
<li><p>你想学到一种编程语言让你当金饭碗用，拿高工资。  –  早早死了心算了。</p>
</li>
</ol>
<p>计算机应该是变化越来越快的领域，虽说有不少语言诞生的时间已经几十年，但是它们也是持续演化的。说不准你刚学会没多久的懂，两三年后就没什么人用了，就像现在的前端框架。所以，如果你想把程序设计作为你的职业，请做好长期持续学习的准备。</p>
<p>但是，即便你不需要把它当作职业，我认为，多少具备一些编程的能力，让计算机辅助你解决问题，提升思考方式和效率，真的非常有好处。送上 Linus 大神的话：</p>
<blockquote>
<p>Most good programmers do programming not because they expect to get paid or get adulation by the public, but because it is fun to program.</p>
</blockquote>
<h2 id="怎么开始？"><a href="#怎么开始？" class="headerlink" title="怎么开始？"></a>怎么开始？</h2><p>如果你已经下定决心要学习程序开发。那怎么开始？</p>
<h3 id="从问题出发"><a href="#从问题出发" class="headerlink" title="从问题出发"></a>从问题出发</h3><p>你想解决什么问题？处理什么数据？最后达到什么效果？从事哪个领域？</p>
<p>比如说，如果你要处理 Excel，做各式各样的报表。或者要从固定格式的 Excel 里面抽取数据。那你可能只要学习 VBA 就可以了，或者用 JAVA。因为 Excel 这种企业级的东西，你用回微软自家的语言会方便些。企业级的 JAVA 语言也是不错的选择，因为已经很多写好的工具，你学会拿来用就可以了。但是如果你非要选 Node.js 和 JavaScript 来处理，就真有点作死。</p>
<p>还有，很多人想学数据分析，一上来就学什么 Spark, Hadoop，搞大数据，但我觉得那是不对的。只学会搭建工具环境，却不会数据分析的基础，难道不是本末倒置吗？况且，工具和框架更新换代比语言变化的还快，一年后说不定又换新了。数据分析最主要的是有数据思维，基本的统计学知识和数据分析的能力。如果你用 Excel, SQL 就能挖掘出数据里面的商业价值，看到别人看不到的规律，那就牛了。当然你还可以学习 Python 或者 R 这种最基础的数据分析领域的语言，因为它们提供丰富的数据分析算法和展示工具，让数据分析工作更简单。所以，我觉得只有真的具备一定的基础，而且数据真的大到一定程度，你才需要去用那些大数据的处理工具。</p>
<p>Web Application 开发领域，无论前端后端，我觉得肯定要学的是 JavaScript, HTML, CSS。如果你打算在前端发展，不管你是打算用 jQuery, AngularJS，React 或者 VueJS 也好，原生 JavaScript 都是基础。即便你想从事后端，拥有基本的前端知识，可以让你方便和前端沟通合作。后端的语言选择相对较多，一般是 Ruby, Node.js, Python，PHP, Java。Java 在传统企业领域用的比较多，初创公司一般选其它的来起步。Go, Rust, Clojure 比较新，用的人相对少一些。</p>
<h3 id="如何起步"><a href="#如何起步" class="headerlink" title="如何起步"></a>如何起步</h3><p>现在互联网如此发达，书，视频，在线教育和练习编程开发的资源都相当地多，对于一个稍微有点编程经验的人来说。自学应该完全不是问题，不愁没有资源。但是，对于一个完全是自学起步，没有任何编程背景的人来说，最好<strong>找一个靠谱的师傅来指引起步</strong>。</p>
<p>首先，从上面说的问题出发，新手是不可能有答案的。即便在论坛上提问，用什么语言，什么建议都会有。你可要知道程序员最喜欢讨论什么语言，什么框架好。所以有个笑话说，你想让程序员们吵起来，只要在里面喊一句，XXX 语言是最好的语言就可以了。</p>
<p>其次，开始学习编程开发遇到的最大的障碍是搭建环境。很多新手都是在最开始的时候就遇到各种环境问题，导致完全无法跟教程练手，挫败感太强而放弃。所以，如果有人在身边指导，至少先把搭建环境这关过了，后面会顺畅很多。</p>
<p>再说，一个有经验的靠谱的老师，还可以告诉你<strong>学习使用某一种语言的最少必要知识</strong>，不至于让你迷失在太多技术细节中，真的可以事半功倍。</p>
<p>如果确实身边和网络上找不到这样的朋友，老师，又不舍得花钱去培训班，要如何降低遇到障碍的可能性和提高问题解决效率呢？<strong>最好选择 Mac 来开发，学会如何使用 Google，和正确提问</strong>。</p>
<p>最后，无论有没有老师，<strong>学编程最重要就是：模仿，模仿，模仿。练习，练习，练习</strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多人觉得编程是很高端神秘的事情，觉得自己可能学不来。但是了解到程序员的工资比较高，所以又蠢蠢欲动，想进入这个领域。那么，在回答这个问题前，我们先了解一下什么是编程吧。&lt;/p&gt;
&lt;h2 id=&quot;什么是编程&quot;&gt;&lt;a href=&quot;#什么是编程&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Programming" scheme="http://www.thinkingincrowd.me/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>如何保证自己最重要的财富不被偷走？</title>
    <link href="http://www.thinkingincrowd.me/2016/08/03/How-to-protect-your-most-valuable-treasure/"/>
    <id>http://www.thinkingincrowd.me/2016/08/03/How-to-protect-your-most-valuable-treasure/</id>
    <published>2016-08-03T15:20:29.000Z</published>
    <updated>2016-08-03T15:45:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近，李笑来在逻辑思维的“得到” App 上面的专栏《通往财富自由之路》(这里硬广一下，199/年，每日更新，建议订阅）发表了一篇文章，说：个人拥有的最宝贵的，很容易忽视的财富是：<strong>注意力</strong>。</p>
<p>怎么理解？其实之前有一个名词，叫“眼球经济”。结合这个名词来看，知道为什么注意力是很宝贵的财富了吧？回头想想你平时都把你的注意力放在哪些事情上，最后自己真正获得什么了。有没有哪些东西是能给你带来长久收益的？</p>
<h2 id="为什么你的财富都没放在正事上？"><a href="#为什么你的财富都没放在正事上？" class="headerlink" title="为什么你的财富都没放在正事上？"></a>为什么你的财富都没放在正事上？</h2><p>之前在推特上看到一个段子，原文如下：</p>
<blockquote>
<p>My goal in 2015 is to accomplish the goals of 2014 which I should have done in 2013 because I made a promise in 2012 and planned in 2011</p>
</blockquote>
<p>这是不是生动形象地描述了很多人的人生？</p>
<p>其实<strong>人的天性就是偏向于及时享乐，选择短期利益，而忽视长期利益</strong>。最有名的例子应该是那个<a href="https://en.wikipedia.org/wiki/Stanford_marshmallow_experiment" target="_blank" rel="external">棉花糖实验</a>了。它提到了一个叫延迟享乐（Delayed gratification）的概念。虽然那个实验的结论还有争议的地方，但是并不妨碍我们了解到及时享乐这个天性对人的影响。我并不是说，休闲享乐和适时放纵是完全不需要的。恰好相反，我们有时需要通过休息，出去采风等修整自己，为下一个阶段做准备。但是，我们不能时时刻刻都享乐，并只看短期利益。</p>
<h2 id="怎样确保财富不被偷走"><a href="#怎样确保财富不被偷走" class="headerlink" title="怎样确保财富不被偷走"></a>怎样确保财富不被偷走</h2><p>我认为我们每一个人，都必须<strong>独立地</strong>培养一个很重要的能力：</p>
<p><strong>专注力</strong><br><strong>专注力</strong><br><strong>专注力</strong></p>
<p>重要的事情说三遍。</p>
<p>可能很多人会说，确定自己的人生方向，知道什么才是最有价值的事情才是最重要的。因为他们觉得自己只要找到了，就能全身心的扑进去了，而不会浪费注意力在其它地方。但是，能有这等好事吗？这个世界上能有多少人一开始就知道自己擅长什么，人生目标是什么的？在没有找到以前，你在干嘛？等待，打游戏，坐在沙发前看非诚勿扰或者那些让你哭得死去活来的韩剧，还是探寻自己的方向？</p>
<p>我不否认方向的重要性，我自己也在不断寻找。但是这个世界太不确定，变化太快了。你需要持续寻找和修正自己的人生方向，而<strong>拥有强大的专注力是前提</strong>。专注，让你在探寻道路的过程中，深入分析它是否你的真爱。没有专注力，即便你真的真的碰到你的人生方向，你能在上面持续做下去吗？还是会忍不住去追逐热点？</p>
<p>专注力，在 Wiki 上叫 <a href="https://en.wikipedia.org/wiki/Attentional_control" target="_blank" rel="external">Attentional Control</a>。说白了就是你对自己注意力的控制能力。简单点来说，如果你控制不了自己的注意力，就和小孩有 ADHD (多动症) 没啥区别。不要以为你和小孩子有多大不同。他们也是看到什么好玩，就放下手上本来应该要做的事情，那些被父母认为是有益的事。现在，如果你缺乏专注力，放下的只不过换成是老板让你做的事，或者自己的目标而已。</p>
<h2 id="如何培养自己的专注力？"><a href="#如何培养自己的专注力？" class="headerlink" title="如何培养自己的专注力？"></a>如何培养自己的专注力？</h2><h3 id="从爱好，或最喜欢的事情入手"><a href="#从爱好，或最喜欢的事情入手" class="headerlink" title="从爱好，或最喜欢的事情入手"></a>从爱好，或最喜欢的事情入手</h3><p>没什么好说的，喜欢从而容易专注。</p>
<h3 id="进入防打扰模式"><a href="#进入防打扰模式" class="headerlink" title="进入防打扰模式"></a>进入防打扰模式</h3><p>观察自己走神的模式。如果你自己很容易分心去看手机，就关闭无线和数据，或者让它很难拿到，比如放到柜顶。如果你在家里干活容易分心，就去寻找另一个环境，比如图书馆。或者，你可以尝试番茄工作法之类的具体实践方法。</p>
<h3 id="花大价钱让自己心疼"><a href="#花大价钱让自己心疼" class="headerlink" title="花大价钱让自己心疼"></a>花大价钱让自己心疼</h3><p>虽然我个人不太喜欢用这种方式，但是这确实是一个对一些人很有用的办法。它其实就是一种变相的破釜沉舟的方式。很多人去花大价钱去健身房或者培训班，让自己心疼才能下决心和专注做一件事。</p>
<h3 id="运动健身"><a href="#运动健身" class="headerlink" title="运动健身"></a>运动健身</h3><p>其实，运动是能提高专注力的。而且对于大多数人来说，都觉得运动健身比较累，不容易坚持。但是，这是对任何一个人都长期有益的事情。所以，我认为如果你本身专注力不够，或者没什么习惯想到要打造，那就先坚持运动。这里安利一下我最近在看和跟着实践的《囚徒健身》这本书。它的特点是基本不用任何器械，靠你自身体重，只需要在家里锻炼就可以了。作为程序员，我的打卡记录可是放在 <a href="https://github.com/kenspirit/exercise-log" target="_blank" rel="external">Github</a> 这个最大的基友交友平台啦。效果如下：</p>
<table>
<thead>
<tr>
<th>Week</th>
<th>Mon</th>
<th>Tue</th>
<th>Wed</th>
<th>Thu</th>
<th>Fri</th>
<th>Sat</th>
<th>Sun</th>
</tr>
</thead>
<tbody>
<tr>
<td>2016-07-25</td>
<td>俯1: 2x20</td>
<td>桥2: 2x10</td>
<td>俯1: 2x20</td>
<td>-</td>
<td>腿1: 2x15</td>
<td>桥2: 2x20</td>
<td>腿1: 2x15</td>
</tr>
<tr>
<td>-</td>
<td>蹲2: 2x20</td>
<td>-</td>
<td>蹲2: 2x20</td>
<td>-</td>
<td>引2: 2x10</td>
<td>-</td>
<td>引2: 2x10</td>
</tr>
<tr>
<td>2016-08-01</td>
<td>俯1: 2x50</td>
<td>桥2: 2x40</td>
<td>俯1: 2x</td>
<td>桥2: 2x</td>
<td>腿1: 2x</td>
<td>桥2: 2x</td>
<td>腿1: 2x</td>
</tr>
<tr>
<td>-</td>
<td>蹲2: 20+30</td>
<td>-</td>
<td>蹲2: 2x</td>
<td>-</td>
<td>引2: 2x</td>
<td>-</td>
<td>引2: 2x</td>
</tr>
<tr>
<td>目标</td>
<td>俯1: 3x50</td>
<td>桥2: 3x50</td>
<td>俯1: 3x50</td>
<td>桥2: 3x</td>
<td>腿1: 2x25</td>
<td>桥2: 3x50</td>
<td>腿1: 2x25</td>
</tr>
<tr>
<td>-</td>
<td>蹲2: 3x40</td>
<td>-</td>
<td>蹲2: 3x40</td>
<td>-</td>
<td>引2: 2x20</td>
<td>-</td>
<td>引2: 2x20</td>
</tr>
<tr>
<td>YYYY-MM-DD</td>
<td>俯1: 2x</td>
<td>桥2: 3x</td>
<td>俯1: 2x</td>
<td>桥2: 3x</td>
<td>腿1: 2x</td>
<td>桥2: 3x</td>
<td>腿1: 2x</td>
</tr>
<tr>
<td>-</td>
<td>蹲2: 3x</td>
<td>-</td>
<td>蹲2: 3x</td>
<td>-</td>
<td>引2: 2x</td>
<td>-</td>
<td>引2: 2x</td>
</tr>
</tbody>
</table>
<h3 id="冥想"><a href="#冥想" class="headerlink" title="冥想"></a>冥想</h3><p>李笑来老师分享过。</p>
<h2 id="专注力是一种习惯"><a href="#专注力是一种习惯" class="headerlink" title="专注力是一种习惯"></a>专注力是一种习惯</h2><p>我认为，<strong>专注力其实是一种习惯</strong>。如果你能成功地专注一件事情，你拥有的专注力也应该能够让你用到其它重要的事情上。所以，如果你觉得你做什么事情的专注力都不够，不妨<strong>先想办法培养一个习惯来反向锻炼自己的专注力</strong>。</p>
<h3 id="确保目标长期有益"><a href="#确保目标长期有益" class="headerlink" title="确保目标长期有益"></a>确保目标长期有益</h3><p>定下你的目标前，问自己最少 10 遍，这个事情是不是真的值得做。真正长期有益的事情，才能让自己没那么容易放弃。假如你发现你的爱好只是吃，看电视等，其实你也可以分析这个爱好，能不能从其它哪些方面给你带来<strong>成长</strong>，和<strong>长期收益</strong>，比如吃晚，看完后写食评，视评，影评等。</p>
<h3 id="为自己，而不是他人"><a href="#为自己，而不是他人" class="headerlink" title="为自己，而不是他人"></a>为自己，而不是他人</h3><p>培养习惯，目的是为了自己的成长和收益。所以，不要因为没有收获到掌声，或者因为别人的言语而放弃。</p>
<h3 id="打卡记录"><a href="#打卡记录" class="headerlink" title="打卡记录"></a>打卡记录</h3><p>我觉得这点很重要。记录自己每天花了多少时间在你打算专注的事情上面，就可以给你自己一个持续的监督和反馈，看到自己的成长。</p>
<h3 id="对自己狠一点"><a href="#对自己狠一点" class="headerlink" title="对自己狠一点"></a>对自己狠一点</h3><p>为自己定下来的目标，一定要做到。通过每天记录，做不到就不睡觉。或者找人监督你，做不到就罚钱。</p>
<h3 id="找一个志同道合的伙伴"><a href="#找一个志同道合的伙伴" class="headerlink" title="找一个志同道合的伙伴"></a>找一个志同道合的伙伴</h3><p>这可能是一个比较容易让你启动和保持的方法，尤其是你能找到那些已经在践行，并愿意带你的人。但是，我希望你最后还是要尽量能独立地培养专注力。因为天下无不散之宴席，而且要时刻找到人真心指导和带领是很难的。</p>
<h3 id="耐心，别急于求成"><a href="#耐心，别急于求成" class="headerlink" title="耐心，别急于求成"></a>耐心，别急于求成</h3><p>很多人一开始定下宏伟的目标，但是执行的很痛苦，很快就坚持不下去。那样还不如一开始迈的脚步小点，别扯着蛋了，等自己<strong>逐渐积累够成就感和养成习惯</strong>后再加大难度。这其实也是我推荐《囚徒健身》这本书的原因。作者在书里提到的健身理念就强调这点。</p>
<h2 id="行动最重要"><a href="#行动最重要" class="headerlink" title="行动最重要"></a>行动最重要</h2><p>说了那么多，不行动是没用的。所以，分析一下过去的一周，你每天的注意力都放在什么地方了？是否能用其它的好习惯把它替换了？这样，你的财富还会被偷走吗？</p>
<p>最后的硬广，如果你想用我那种方式来做打卡记录，并且想学习 JavaScript 来编程开发，可以关注一下我写的<a href="https://leanpub.com/tasting-javascript" target="_blank" rel="external">Tasting JavaScript</a> 这本书。不过目前是英文版，且只写了三章。这是我定给自己的目标，也是我的一部分财富。期待你给我一些建议和压力。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，李笑来在逻辑思维的“得到” App 上面的专栏《通往财富自由之路》(这里硬广一下，199/年，每日更新，建议订阅）发表了一篇文章，说：个人拥有的最宝贵的，很容易忽视的财富是：&lt;strong&gt;注意力&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;怎么理解？其实之前有一个名词，叫“眼
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Attention" scheme="http://www.thinkingincrowd.me/tags/Attention/"/>
    
      <category term="Habit" scheme="http://www.thinkingincrowd.me/tags/Habit/"/>
    
      <category term="Value" scheme="http://www.thinkingincrowd.me/tags/Value/"/>
    
  </entry>
  
  <entry>
    <title>人生中哪一个阶段才是最重要的？</title>
    <link href="http://www.thinkingincrowd.me/2016/07/10/Milestones-in-Life/"/>
    <id>http://www.thinkingincrowd.me/2016/07/10/Milestones-in-Life/</id>
    <published>2016-07-10T00:00:00.000Z</published>
    <updated>2016-07-09T23:52:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们的人生其实分了很多个阶段：幼儿园，小学，中学，大学，工作，结婚，升级打小怪物等。  </p>
<p>这些阶段，很多都是世俗的约定，到了某个年龄，就自然要踏入另一个阶段了。在你成为“成年人”以前，大学前的几个阶段，基本都是由父母决定的，自己选择和决定空间不大。不少人在前面的阶段感觉被迫接受父母的安排，大学就报一些离家远远的学校，打算充分享受自由。大学后面的阶段，即便也会有人对你做各种干涉，但毕竟你已经是“成年人”，自主决定权就大很多了。</p>
<p>那哪个阶段是最重要的呢？已为人父的我，当然也想知道。但是，你们真的相信会有统一的答案吗？其实谁都没法说清楚，最重要的，起决定性作用的是哪个阶段。我承认我标题党了。不少人，大学前是学霸，但是上了大学就歇菜了。相反，也有不少人读书时期经常打游戏，考前报佛脚，分数也是及格线多点，甚至要重修。但是，工作后如鱼得水，成了人生赢家。还有一些小时候坏事做尽，甚至曾经承受牢狱之灾，但是后来却能突然大彻大悟，痛改前非，出人头地。</p>
<p>人的一生，前面的每一个阶段都是后面的积累。后面的主要是延续，但也有可能蜕变。至于怎么延续怎么变，起决定作用的，还是自己的心。心之所向，路之所往。只有自己主动地把握人生，自己把的舵，才知道下一阶段走的有没有意义。<strong>每一个阶段，尤其是你主动把握的阶段，都是重要的</strong>。正如 Steve Jobs 所说：</p>
<blockquote>
<p>You cann’t connect the dots looking forward; you can only connect them looking backwards.</p>
</blockquote>
<p>大学毕业 12 年了。前面的 7 年，因为感恩和战友情，我宁可收入少点，还是坚持在一家小公司拼搏，并收获了敏捷的做事方式和较为广阔的技术背景。后面因为技术方向调整和深入的需要，还是决定去大公司体会一下。5 年后的今天，我又决定要为了一个男人和事业理想，远飘北方，“抛妻弃子”，承受背井离乡之苦。</p>
<p>很多人觉得每次我选择的转变，都很突然，随性，而又坚决。其实，我的内心已经挣扎和拖沓了一段时间。很些人觉得我勇于挑战自己，跳出舒适区。其实，我觉得自己并没有很好地安排和规划人生。我觉得自己走的并不算好，可这就是人生。自己走的路，过去已经无法回头，最重要的是自己主动把握的下一个阶段。</p>
<p>我以前一直都期望能有一个好的导师，在迷茫的时候，稍微为我指明一下方向，引领我前行。人常说，去一个好的公司，不如找到一个好的领导。可是后来我才慢慢醒悟，导师只是在你人生道路上的某一段，在某个特定的时刻，出现并帮助你那么一下的人。伴随一生的导师，可遇而不可求。而且最重要是，只有你已经在路上探索了，才有可能碰到导师。甚至，你还必须主动去找那些能成为你导师的人。所以，自己永远是自己最好的导师，最终只有靠不断地读书思考和虚心求教，跟随自己的直觉和信念，不断尝试和碰壁，不断寻求真正属于自己的道路。</p>
<p>我很喜欢李笑来的<strong>七年就是一辈子</strong>的文章和书（后来改名叫<strong>新生</strong>了），以及他说的一句话：“<strong>我的一生只有一个职业 – 学生</strong>”。</p>
<p>新的旅程已经摆在我眼前，我知道我必须要选择经历这一次历练。在这里要特别感谢老婆和家人的支持。没有他们，我没法踏出这一步。虽然我也不知道能在这个阶段历练多久，但哪怕短短一两年，它也是我一生中很重要的一个点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们的人生其实分了很多个阶段：幼儿园，小学，中学，大学，工作，结婚，升级打小怪物等。  &lt;/p&gt;
&lt;p&gt;这些阶段，很多都是世俗的约定，到了某个年龄，就自然要踏入另一个阶段了。在你成为“成年人”以前，大学前的几个阶段，基本都是由父母决定的，自己选择和决定空间不大。不少人在前面
    
    </summary>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
    
      <category term="Change" scheme="http://www.thinkingincrowd.me/tags/Change/"/>
    
      <category term="Milestone" scheme="http://www.thinkingincrowd.me/tags/Milestone/"/>
    
  </entry>
  
  <entry>
    <title>Prototype chain, and relationship among prototype, __proto__ and constructor in JavaScript</title>
    <link href="http://www.thinkingincrowd.me/2016/06/09/prototype-chain-and-relationship-among-prototype-proto-and-constructor-in-JavaScript/"/>
    <id>http://www.thinkingincrowd.me/2016/06/09/prototype-chain-and-relationship-among-prototype-proto-and-constructor-in-JavaScript/</id>
    <published>2016-06-09T02:16:25.000Z</published>
    <updated>2016-06-10T14:26:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>As we know, JavaScript differs from other class based inheritance language.  Constructor (function) uses its <code>prototype</code> property to implement <strong>prototype-based inheritance</strong> and <strong>shared property</strong>.  </p>
<p>From ECMA Spec:</p>
<blockquote>
<p>In a class-based object-oriented language, in general, state is carried by instances, methods are carried by classes, and inheritance is only of structure and behaviour. In ECMAScript, the state and methods are carried by objects, while structure, behaviour, and state are all inherited.</p>
</blockquote>
<p>Let’s see below example.  Instances created by <code>new Mold()</code> inherits the property from its prototype.  You can see different behaviors if we change different property in different levels.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mold</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;  </div><div class="line"></div><div class="line">Mold.prototype.sizes = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</div><div class="line">Mold.prototype.brand = <span class="string">'KC'</span>;  </div><div class="line"></div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> Mold();</div><div class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> Mold();  </div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(instance.sizes)   <span class="comment">// =&gt; [10, 20, 30];</span></div><div class="line"><span class="built_in">console</span>.log(instance2.brand) <span class="comment">// =&gt; 'KC';  </span></div><div class="line"></div><div class="line"><span class="comment">// Adds property with same name shadows the one in prototype</span></div><div class="line">instance.brand = <span class="string">'K &amp; W'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(instance.brand); <span class="comment">// =&gt; 'K &amp; W'</span></div><div class="line"><span class="built_in">console</span>.log(Mold.prototype.brand); <span class="comment">// =&gt; 'KC'</span></div><div class="line"></div><div class="line"><span class="comment">// Changed on prototype affects instance that doesn't have property with same name</span></div><div class="line">Mold.prototype.brand = <span class="string">'K &amp; W &amp; L'</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(instance.brand); <span class="comment">// =&gt; 'K &amp; W'</span></div><div class="line"><span class="built_in">console</span>.log(instance2.brand); <span class="comment">// =&gt; 'K &amp; W &amp; L'</span></div><div class="line"></div><div class="line"><span class="comment">// Changed on property which is Array or Object type in prototoype affects all</span></div><div class="line">instance.sizes[<span class="number">0</span>] = <span class="number">40</span>;</div><div class="line">Mold.prototype.sizes[<span class="number">2</span>] = <span class="number">60</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Mold.prototype.sizes); <span class="comment">// =&gt; [40, 20, 60]</span></div><div class="line"><span class="built_in">console</span>.log(instance2.sizes) <span class="comment">// =&gt; [40, 20, 60]</span></div></pre></td></tr></table></figure>
<p>I think most of the JSer know the concept &amp; behavior above.  However, do you know the relationship between <code>__proto__</code>, <code>prototype</code> and <code>constructor</code>?  </p>
<p>Here is what the ECMAScript Spec said.</p>
<p><strong>What is prototype chain</strong>:</p>
<blockquote>
<p>Every object created by a constructor has an implicit reference (called the object’s prototype) to the value of its constructor’s “prototype” property. Furthermore, a prototype may have a non-null implicit reference to its prototype, and so on; this is called the prototype chain. When a reference is made to a property in an object, that reference is to the property of that name in the first object in the prototype chain that contains a property of that name. In other words, first the object mentioned directly is examined for such a property; if that object contains the named property, that is the property to which the reference refers; if that object does not contain the named property, the prototype for that object is examined next; and so on.</p>
</blockquote>
<p><strong>Explanation on Object and Function prototype object</strong>:</p>
<blockquote>
<p>The Object prototype object is the intrinsic object %ObjectPrototype%. The Object prototype object is an ordinary object.</p>
<p>The value of the [[Prototype]] internal slot of the Object prototype object is null</p>
<p>…</p>
<p>The Function prototype object is the intrinsic object %FunctionPrototype%. The Function prototype object is itself a built-in function object. When invoked, it accepts any arguments and returns undefined. It does not have a [[Construct]] internal method so it is not a constructor.</p>
<p>NOTE The Function prototype object is specified to be a function object to ensure compatibility with ECMAScript code that was created prior to the ECMAScript 2015 specification.</p>
<p>The value of the [[Prototype]] internal slot of the Function prototype object is the intrinsic object %ObjectPrototype% (19.1.3).</p>
<p>The Function prototype object does not have a prototype property.<br>The value of the length property of the Function prototype object is 0.<br>The value of the name property of the Function prototype object is the empty String</p>
</blockquote>
<p>Honestly, for me, it took me a long long time to try to understand that.  I have extract some important concepts here and try to be brief:  </p>
<ol>
<li>Function instances that can be used as a constructor have a <code>prototype</code> property.  When we use <code>new</code> with this function to create instances, the object pointed by the <code>prototype</code> property will be assigned as the prototype of the instances.  </li>
<li><code>__proto__</code> is the actual object that is used in the property lookup chain.  All objects have this property.  </li>
<li><code>constructor</code> is a function object that creates and initializes objects.  It’s a property in the Prototype Object;</li>
</ol>
<p>Maybe the wording is still not as expressive as the graph as below.  </p>
<p><img alt="Firefox script not responsive warning" src="http://thinkingincrowd.u.qiniudn.com/JS_prototype_chain.png"></p>
<p>At first glance, this diagram might seems messy.  Let’s examine it piece by piece from the easiest part and pay attention to some important points.  </p>
<ol>
<li><code>prototype</code> property doesn’t exists in instances created by Mold.  Only function has.  </li>
<li>Each function’s prototype has a <code>constructor</code> property points to itself.  </li>
<li><code>__proto__</code> points to the <code>prototype</code> of its constructor.  The <code>Mold</code> instance points to <code>Mold</code> function, the <code>Mold</code> function points to <code>Function</code> function, the <code>Function</code> function points to itself and <code>Object</code> function points to <code>Function</code> function.  </li>
<li><code>prototype</code> property in Object doesn’t have <code>__proto__</code>.  </li>
<li><code>__proto__</code> of the Function prototype object is <code>Object.prototype</code>.</li>
</ol>
<p>Here is some script for you to understand it.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="keyword">typeof</span> instance instance.prototype <span class="comment">// =&gt; 'undefined'</span></div><div class="line"></div><div class="line"><span class="comment">// 2</span></div><div class="line">Mold.prototype.constructor === Mold</div><div class="line"><span class="built_in">Function</span>.prototype.constructor === <span class="built_in">Function</span></div><div class="line"><span class="built_in">Object</span>.prototype.constructor === <span class="built_in">Object</span></div><div class="line"></div><div class="line"><span class="comment">// 3</span></div><div class="line">instance.__proto__ === Mold.prototype</div><div class="line">Mold.__proto__ === <span class="built_in">Function</span>.prototype</div><div class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype</div><div class="line"><span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype</div><div class="line"></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span></div><div class="line"></div><div class="line"><span class="comment">// 5</span></div><div class="line"><span class="built_in">Function</span>.prototype.__proto__  === <span class="built_in">Object</span>.prototype</div><div class="line">Mold.prototype.__proto__  === <span class="built_in">Object</span>.prototype</div></pre></td></tr></table></figure>
<p>How about take some exams to test see if you understand what I and ECMA spec said above?  :)  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype === ?</div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype.prototype === ?</div><div class="line"><span class="built_in">Function</span>.prototype.length === ?</div><div class="line"></div><div class="line">instance.constructor === ?</div><div class="line">instance.__proto__.constructor === ?</div><div class="line"></div><div class="line">Mold.constructor === ?</div><div class="line">Mold.__proto__.constructor === ?</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As we know, JavaScript differs from other class based inheritance language.  Constructor (function) uses its &lt;code&gt;prototype&lt;/code&gt; prope
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Javascript" scheme="http://www.thinkingincrowd.me/tags/Javascript/"/>
    
      <category term="Functional Programming" scheme="http://www.thinkingincrowd.me/tags/Functional-Programming/"/>
    
      <category term="Prototype Chain" scheme="http://www.thinkingincrowd.me/tags/Prototype-Chain/"/>
    
      <category term="Prototype" scheme="http://www.thinkingincrowd.me/tags/Prototype/"/>
    
      <category term="Inheritance" scheme="http://www.thinkingincrowd.me/tags/Inheritance/"/>
    
      <category term="Constructor" scheme="http://www.thinkingincrowd.me/tags/Constructor/"/>
    
  </entry>
  
  <entry>
    <title>How to avoid Stack overflow error on recursion</title>
    <link href="http://www.thinkingincrowd.me/2016/06/06/How-to-avoid-Stack-overflow-error-on-recursive/"/>
    <id>http://www.thinkingincrowd.me/2016/06/06/How-to-avoid-Stack-overflow-error-on-recursive/</id>
    <published>2016-06-05T16:05:00.000Z</published>
    <updated>2016-06-05T16:08:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-reason-behind"><a href="#The-reason-behind" class="headerlink" title="The reason behind"></a>The reason behind</h2><p>Recursion is a powerful form of loop which repeats itself in similar form, but it should have terminal condition to prevent endless loop.  <a href="http://www.thinkingincrowd.me/2016/06/05/How-to-make-long-running-loop-breakable/">Last time</a>, we even use it with the combination of <code>setTimeout</code> to prevent “Not responsive script” warning of long running loop.  </p>
<p>However, normal recursion can possibly generate “Stack overflow” error if it repeats itself too many times.  Let’s see a famous recursion example in math, <code>factorial</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> n === <span class="number">0</span> ? <span class="number">1</span> : n * factorial(n - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// factorial(10)</span></div><div class="line"><span class="comment">//  =&gt; 3628800</span></div><div class="line"><span class="comment">// factorial(32768)</span></div><div class="line"><span class="comment">//  =&gt; Uncaught RangeError: Maximum call stack size exceeded</span></div></pre></td></tr></table></figure>
<p>How does the stack looks like?  Why is its size exceeded?  </p>
<p><img alt="Firefox script not responsive warning" src="http://thinkingincrowd.u.qiniudn.com/factorial_stack_change_flow.png"></p>
<p>Here introduces a term called <a href="http://dmitrysoshnikov.com/ecmascript/chapter-1-execution-contexts/" target="_blank" rel="external">Execution Context</a> and you can read more following the link.  Simply say, every times a function is called, an execution context is created.  Hence, they are stacked together and increase as the recursion goes deeper.  You can imagine the stack size of <code>factorial(32768)</code> given this from <code>factorial(3)</code>.</p>
<h2 id="Tail-call-elimination-comes-to-rescue"><a href="#Tail-call-elimination-comes-to-rescue" class="headerlink" title="Tail call elimination comes to rescue"></a>Tail call elimination comes to rescue</h2><blockquote>
<p><strong>Tail calls can be implemented without adding a new stack frame to the call stack.</strong> Most of the frame of the current procedure is not needed any more, and it can be replaced by the frame of the tail call, modified as appropriate (similar to overlay for processes, but for function calls). The program can then jump to the called subroutine. Producing such code instead of a standard call sequence is called tail call elimination.</p>
</blockquote>
<p><a href="https://en.wikipedia.org/wiki/Tail_call" target="_blank" rel="external">Tail call elimination</a> can be applied if we rewritten <code>factorial</code> in <strong>tail recursion</strong> style as below.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cal</span>(<span class="params">n, result</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> n === <span class="number">0</span> ? result : cal(n - <span class="number">1</span>, n * result);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> cal(n, <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>However, the tail call optimization can only be supported until ECMAScript 6, which is not yet available in many JS engines.  <em>(Notes: Looks like Firefox already supports and it’s gonna be <a href="https://github.com/v8/v8/commit/6131ab1edd6e78be01ac90b8f0b0f4f27f308071" target="_blank" rel="external">ready in Node.js V8</a> soon.)</em></p>
<h2 id="Trampoline"><a href="#Trampoline" class="headerlink" title="Trampoline"></a>Trampoline</h2><p>What is <a href="https://en.wikipedia.org/wiki/Trampoline_(computing)" target="_blank" rel="external">Trampoline</a>?</p>
<blockquote>
<p>a trampoline is a <strong>loop</strong> that iteratively invokes <strong>thunk</strong>-returning functions (continuation-passing style).<br>  …<br>  Programmers can use trampolined functions to implement tail-recursive function calls in stack-oriented programming languages.</p>
</blockquote>
<p>The simpliest form of trampoline is like below.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trampoline</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> op = fn;</div><div class="line">  <span class="keyword">while</span> (op != <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> op === <span class="string">'function'</span>) &#123;</div><div class="line">    op = op();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The <code>op</code> is a thunk-returning function.  If the execution result it returns is NOT a function anymore, then the loop stops.  It’s not so easy to understand the meaning of thunk from the definition in <a href="https://en.wikipedia.org/wiki/Thunk" target="_blank" rel="external">Wiki</a>.  But the explanation in <em>Functional programming</em> section is more clear.</p>
<blockquote>
<p>Functional programming languages have also allowed programmers to <strong>explicitly generate thunks</strong>. This is done in source code <strong>by wrapping an argument expression in an anonymous function that has no parameters of its own.</strong> This prevents the expression from being evaluated until a receiving function calls the anonymous function</p>
</blockquote>
<p>Hence, when we rewrite our <code>factorial</code> in below style, we can use the <code>trampoline</code> to replace the recursive call to even calculate factorial for 1000000.  <em>(Notes: As the simple version of trampoline detects function return for terminal condition, we have to rewrite the factorial to accept callback instead.)</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">thunkedFactorial</span>(<span class="params">n, cb</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cal</span>(<span class="params">n, result, cb</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</div><div class="line">      cb(result);</div><div class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> cal.bind(<span class="keyword">this</span>, n - <span class="number">1</span>, n * result, cb);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> cal.bind(<span class="keyword">this</span>, n, <span class="number">1</span>, cb);</div><div class="line">&#125;</div><div class="line"></div><div class="line">trampoline(thunkedFactorial.bind(<span class="keyword">this</span>, <span class="number">1000000</span>, <span class="built_in">console</span>.log.bind(<span class="built_in">console</span>)));</div><div class="line"><span class="comment">// =&gt; Infinity</span></div></pre></td></tr></table></figure>
<h2 id="Other-thoughts"><a href="#Other-thoughts" class="headerlink" title="Other thoughts?"></a>Other thoughts?</h2><p>You may question that, since <code>trampoline</code> is actually a loop, it might cause the “Not responsive script” warning as well.  Yes, you are right.  That is why we can use the <code>setTimeout</code> trick again as well. :)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, cb</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cal</span>(<span class="params">n, result</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</div><div class="line">      cb(result);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;cal(n - <span class="number">1</span>, n * result)&#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> cal(n, <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;The-reason-behind&quot;&gt;&lt;a href=&quot;#The-reason-behind&quot; class=&quot;headerlink&quot; title=&quot;The reason behind&quot;&gt;&lt;/a&gt;The reason behind&lt;/h2&gt;&lt;p&gt;Recursion 
    
    </summary>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
    
      <category term="Javascript" scheme="http://www.thinkingincrowd.me/tags/Javascript/"/>
    
      <category term="Functional Programming" scheme="http://www.thinkingincrowd.me/tags/Functional-Programming/"/>
    
      <category term="Loop" scheme="http://www.thinkingincrowd.me/tags/Loop/"/>
    
      <category term="Recursion" scheme="http://www.thinkingincrowd.me/tags/Recursion/"/>
    
      <category term="Tail Call Optimization" scheme="http://www.thinkingincrowd.me/tags/Tail-Call-Optimization/"/>
    
      <category term="Trampoline" scheme="http://www.thinkingincrowd.me/tags/Trampoline/"/>
    
      <category term="Thunk" scheme="http://www.thinkingincrowd.me/tags/Thunk/"/>
    
  </entry>
  
</feed>
