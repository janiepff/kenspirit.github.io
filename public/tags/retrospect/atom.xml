<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Retrospect | Thinking in Crowd / 鹄思乱想]]></title>
  <link href="http://www.thinkingincrowd.me/tags/retrospect/atom.xml" rel="self"/>
  <link href="http://www.thinkingincrowd.me/"/>
  <updated>2012-10-30T22:17:57+08:00</updated>
  <id>http://www.thinkingincrowd.me/</id>
  <author>
    <name><![CDATA[鹄思乱想]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[待在优秀的地方，还是把所在的地方改变的优秀]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/07/16/stay-in-good-or-change-to-be-good/"/>
    <updated>2012-07-16T01:31:25+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/07/16/stay-in-good-or-change-to-be-good</id>
    <content type="html"><![CDATA[<p>已经换了工作差不多一年，期间还有幸被派去美国学习所做的系统后台开发，趁着本博客重新启航，是时候回顾一下了。</p>

<p><strong>小公司 vs 大公司</strong></p>

<p>在小公司那么多年来，给我最大的感受就是灵活性强，行动敏捷。再加上本人后来能担当上Team Lead角色，所以，有什么好的想法，自然容易尝试和贯彻。但是公司的敏捷，一但被利用成不断高强度赶项目而忽视了人员培养，代码和框架的改进，团队和系统的问题便不断浮现。这也成为我离开的原因之一。不过，对怎么样推动改变上，我并没有做的很好。在能自己拍板范围外的事，虽然有提意见，但是推动不够，主要都在等领导的改变和决策，主动性还不够强。</p>

<p>来了大公司差不多一年了，最大的感受和没有来之前想象到的差不多，就是沟通成本非常高，行动迟缓。再加上职位上我只是小兵一名，有好的想法，也没法通过“强硬”的手段，推广出去。在哪里体现出迟缓的问题呢？</p>

<ol>
<li><p>问题达成结论难。邮件多，开会部门多，人员杂，是大公司的通病。这其实还不是主要问题。问题是一开始讨论邮件或者开会的人员，在等级或者部门上来讲，大家都是平级的。通常情况是老大级别一般先没有参于，即使有，也是各方的老大，也都在，结果还是打平。在谈一个问题的时候，除非大家对一个问题共识较多，或者各方影响不大，方案比较容易通过。但是如果主要涉及一方要其它各方做更大改变，就不容易出结论了。因为大家平级，不好说一方强行推行。那么最终可能要拉锯一段时间，最后再把老老大拉出来，才能拍板。</p></li>
<li><p>推行改变很难。改变，本来就是很难的事情。想一想睡惯懒觉的你突然要自己每天早起30分钟，跑5圈，你做的到吗？更何况如果是要改变别人，那更难了。再想象在大公司，你要改变的是多少个别人。举个例子，从10月份进公司我问为什么不用Maven，有人答我，可能今年5月，到几个星期前我再抱怨，再有人说8月。现在就放话在这，等等看什么时候实施得了。另一个原因同开会难有定调一样，涉及到影响流程，或某些人员的工作比较大的时候，就一定要有一位拍板的人物了。</p></li>
</ol>


<p>其实无论是软件还是非软件公司，大了，自然不好管了。Yahoo不是也被批官僚气氛严重，甚至连Google也不例外。Agile的提出，其中一个焦点也致于减少沟通环节。我们也引入了Agile，但是，感觉形式多于内容，反而更乱。</p>

<p><strong>如何改变，如何敏捷</strong></p>

<p>个人认为，要做到Agile，很重要的一个思想就是行动迅速，不断反省，找出不完善的地方，加以改正。这里面，非常需要的一个手段，就是试错。但是很多大公司，很难实现Agile的原因，一个原因是人多难协调，行动缓慢，另一个原因就是不敢试错。一般来说，大公司除了客观原因由于子系统杂，多，乱外，更是因为人员求稳，怕担责的思想，不敢随意做改变。怕错了，出问题，承担后果。</p>

<p>之前看了一本David J. Anderson写的关于<a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402/ref=sr_1_1?ie=UTF8&amp;qid=1342343902&amp;sr=8-1&amp;keywords=Kanban+David+J">Kanban</a>的书，个人感觉是非常适合大公司引用来进行流程，甚至是文化的改进的，甚至比Agile更有效。其中一个重要的原因是Agile的推行，一般意味着对现有流程的一次大的变革。如果人员思想跟不上，或者没有抓住重点，流于形式的话，问题更多。反而，Kanban强调的是在现有流程上的不断发现各个部位的瓶颈，不断进行细微改善和调整。里面推崇的Kaizen文化，更是精华：“任何人对流程改进的尝试，即使失败，或者出问题，都不会被追究。” 要做到这点，虽然需要有良好的衡量机制，更重要的是一种开放和允许尝试的文化。当每个人都不必惧怕所谓的承担责任时，甚至鼓励自发的对流程进行改善的时候，力量可是不容小看的。</p>

<p>具体操作上来说，要推行改变，首先要对你提出的东西，有深刻的理解，它的优缺点都要清楚，必须强调改变带来的好处是远大于它的缺点的。因为抵制的人，总会拿它的缺点说事。而且，你也必须要有坚实的论证，才能说服同事，甚至是你的老板。之前看了一本书《<a href="http://www.amazon.com/Driving-Technical-Change-Terrence-Ryan/dp/1934356603/ref=sr_1_1?ie=UTF8&amp;qid=1342343784&amp;sr=8-1&amp;keywords=Driving+Technical+Change">Driving Technical Change</a>》by Terrence Ryan，主要正是教人如何推行改变。最后，当然得期望你上面的领导是英明的，你就事半功倍了。</p>

<p><strong>改变才是永恒</strong></p>

<p>其实，没有哪里可以永恒保持优秀，重要的是如何不断的改变，来追寻优秀。小公司可以变得臃肿，大公司也可以敏捷。重要的是，首先自己要有一颗秉持Kaizen的心，和同一班同样追寻改变和优秀的人合作。</p>

<p>所以，今年我的目标就是"Push for Change; Act as Model” - “推行改变，以身作则”。其实这作为每一年的目标都是正确的，但是，对于现在的我来说，是迫切的。这正是针对自己之前的不足，也是针对目前的环境。问题多的地方，机会才多。这么一段时间以来，我感觉也确实推动了一些东西，无论直接还是间接，甚至方法上可能并不正确，或者为自己留下后患，我都无所畏惧，将继续前进。</p>

<p>可喜的是，新任的Team Lead，对问题上和我有比较一致的看法，也很积极推动团队的前进，感觉非常高兴。同时，可以在他身上，学习如何在大公司内推动改变，确实难得。前景暂时还是光明的，只需要继续努力。</p>

<p>接下来，具体的想改变的事项，我希望能在目前项目的前端开发引入Unit Test，以验证自己对前端开发和测试的想法，以及作为发展自己前端开发能力的一项手段。敬请期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[曾经，最后]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/02/15/ever-never/"/>
    <updated>2012-02-15T11:42:33+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/02/15/ever-never</id>
    <content type="html"><![CDATA[<p>曾经真心相待，换来质疑无奈。只能痛心离去，送上最后祝福。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个石头值多少钱]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2011/07/21/valueofstone/"/>
    <updated>2011-07-21T01:49:13+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2011/07/21/valueofstone</id>
    <content type="html"><![CDATA[<p>公司的前General Manager Tim Shee给我看了如下一篇文章：</p>

<p>小和尚的大石頭值多少錢？</p>

<p>大都市城外山上有一座峰巒環抱，翠竹蔥蔥，松柏鬱鬱的古剎，有一天，一個小和尚跑過來向老和尚請教：「師父，我人生最大的價值是什麼呢？」</p>

<p>老和尚說：「你到後花園搬一塊大石頭，拿到山下菜市場上去賣，假如有人問你什麼價錢，
你不要講話，只伸出一個指頭；假如他跟你還價，你不要賣，然後馬上抱回來，師父就告訴你，你人生最大的價值是什麼。」</p>

<p>第一天一大早，小和尚抱了一塊大石頭，興致勃勃地跑到山下菜市場上去賣。菜市場上人來人往，熙熙攘攘，人們很好奇，誰會買一塊石頭呢？結果沒一會兒，一個家庭主婦走了過來，問小和尚：「這石頭多少錢賣呀？」</p>

<p>小和尚伸出了一個指頭，那個家庭主婦說：「10塊錢？」
小和尚搖搖頭，家庭主婦說：「那麼是100塊錢？好吧，好吧！我剛好拿回去壓酸菜。」
小和尚聽到：「我的媽呀，一文不值的石頭居然有人出100元錢來買！我們山上有的是呢！」</p>

<p>於是，小和尚遵照師父的囑託沒有賣，樂不可支地抱回山上，去見師父：「師父，
今天有一個家庭主婦願意出100元，買我的石頭。師父，您現在可以告訴我，我人生最大的價值是什麼了嗎？」</p>

<p>老和尚說：「嗯！不急，你明天一早，再把這塊石頭拿到博物館 門口去，假如有人問價，
你依然伸出一個指頭；如果他還價，你不要賣，再抱回來，我們再談。」
第二天早上，小和尚又興高采烈地抱著這塊大石頭，來到了博物館。</p>

<p>在博物館外，一群好奇的人圍觀，竊竊私語：「一塊普通的石頭，到底有什麼價值，
難不成是什麼稀奇呢？只是我們還不知道而已。」
這時，有一個人從人群中竄出來，對小和尚大聲說：</p>

<p>「小和尚，你這塊石頭要賣多少錢啊？」小和尚沒出聲，伸出一個指頭，那個人說：
「1000元？1000元就1000元吧，剛好我要用它雕刻一尊神像。」
小和尚聽到這裡，倒退了一步，嚇得說不出話！但小和尚依然遵照師父的囑託沒有賣，
趕緊抱回山上，去見師父，見到師父說：「師父，今天有人要出1000元買我這塊石頭，
這回您總要告訴我，我人生最大的價值是什麼了吧？」</p>

<p>老和尚哈哈大笑說：「你明天再把這塊石頭拿到古董店門口去賣，照例有人還價，
但仍然不要賣掉它。你就把它抱回來。這一次，師傅一定告訴你，你人生最大的價值是什麼。」</p>

<p>小和尚聽後徹夜難眠，只恨天亮的太慢，好不容易到了天亮，他急忙捧著石頭跑到古董店門口，突然出現一名的拍賣師告訴他這是千年不遇的寶石，問他要賣多少錢，小和尚沒出聲，
伸出一個指頭，拍賣師說：「10000元？」小和尚搖了搖頭，拍賣師出價說：
「100000元就100000元吧，我要好好珍藏它！」小和尚聽了幾乎當場暈倒，趕緊抱回山上，去見師父，見到師父說：「師父，今天有人要出100000元買我這塊石頭，這回你總要告訴我，我人生最大的價值是什麼了吧？」</p>

<p>老和尚指著石頭打斷他說：「其實，我們並不打算賣它，不過現在你應該明白，
為什麼石頭的形狀和外表都沒有變，而你的想法和做法卻再三變化呢，我之所以讓你這樣做，主要是想培養和鍛煉你充分認識自我價值的能力，和對事物的理解能力。如果你是生活在菜市場，那麼你只有那個市場的理解力，你就永遠不會認識更高的價值。</p>

<p>不管你在什麼地方，同樣的你，有人將你抬得很高，有人把你貶得很低，有價值的東西，
只有在懂價值的人面前，才有價值。不要管別人怎麼看，關鍵是自己怎麼看自己。總而言之，你可以掌握自己的命運，決定自己的價值！」</p>

<p>※【激勵一點通】※</p>

<p>也許你就一個普通的石頭，只要你認為自己是一塊寶石，別人也可能把你當寶石來看，
也許你就是一個寶石，可是你卻認為自己是一塊普通的石頭，也許只配給人做成墊腳石來看待。</p>

<p>你看了这篇文章怎么想？
我的看法是：
1. 首先，最重要的是要清楚自己的一块什么石头，有什么料。 不然，如果确实只是烂石头，放到博物馆内也让人踢出来。
2. 知道自己的价值后，尽量往需要你这样的价值的人去靠近，不然，宝石也变压咸菜的而已。好马也要遇到伯乐才行。
3. 当然也如本文说的，不要妄自菲薄，要坚持，努力挖掘自己的优点和价值。
多到处走走，看看，了解哪可以用得上自己。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cleaner Code]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2011/03/07/cleaner-code/"/>
    <updated>2011-03-07T05:23:04+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2011/03/07/cleaner-code</id>
    <content type="html"><![CDATA[<p>Finished reading Robert Martin's "Clean Code" these days, I suddenly feel more passionate to write code, to write better and more descriptive code.</p>

<p>Before, I do think my coding style is not bad and stick to it every time when I am writing Java, Javascript, SQL, etc.</p>

<p>However, after digesting the essence of "Clean Code", I am forcing myself to write self-descriptive code, without using comment.</p>

<p>The most important points I do remember after reading it are:</p>

<ol>
<li><p>Longer descriptive name, smaller function</p></li>
<li><p>Boy Scout Rule</p></li>
<li><p>Know your algorithm</p></li>
</ol>


<p>Although "Clean Code" has shown us many aspects on how to make the code clean, these two rules are easy to remember, fundamental of others.</p>

<p>Now, I feel the passion of writing code as I am writing a diary, an article.  I feel the impulse of cleaning the mess I got before submitting it again.  What is more, in order to make the code cleaner, I have to make my English better.  haha</p>

<p>Just take below function as an example.  You might not easily figure out what it's for.</p>

<pre><code>function groupingFieldFormat(value, p, r, rowIndex, i, ds) {
    var cGrid = ds.cGrid;
    var cGridIsReadonly = (cGrid &amp;&amp; cGrid.isReadonly()) ? true : false;

    if (rowIndex === 0) {
        if (cGrid.id === 'shipmentPackDetail'
               &amp;&amp; p.id === 'packCount') {
            Core.FieldFormat.addCellEditableIndicator(
               config, p, cGridIsReadonly);
        }
        return value;
    }
    var lastRecord = ds.getAt(rowIndex - 1);

    if (lastRecord.data['lineNo'] == r.data['lineNo']
            &amp;&amp;  lastRecord.data[p.id] === value) {
        return '';
    }

    if (cGrid.id === 'shipmentPackDetail'
            &amp;&amp; p.id === 'packCount') {
        Core.FieldFormat.addCellEditableIndicator(
            config, p, cGridIsReadonly);
    }
    return value;
}
</code></pre>

<p>Below is the my modified version.  Which version is better is quite obvious although it still has room to improve.</p>

<pre><code>/**
 * Used by Color, Pack Name, Pack Count in two grids
 */
function eliminateRepeatedValueInGroup(value, colMeta, record, rowIndex, colIndex, dataStore) {
    if (isFirstLineInOneGroup(dataStore, record, rowIndex, colMeta.id)) {
        showPackCountEditableIfNeeded(colMeta, dataStore);
        return value;
    }

    // Always show value for the first row in grid
    // even though not the first line in one pack,
    // so that user is easier to check the group value
    return rowIndex === 0 ? value : '';
}

function isFirstLineInOneGroup(dataStore, record, rowIndex, fieldId) {
    var cGrid = dataStore.cGrid;
    if (cGrid.id === 'shipmentPackDetail') {
        return isFirstLineInOnePack(record);
    }

    var lastRecord = dataStore.getAt(rowIndex - 1);
    if (lastRecord
            &amp;&amp; lastRecord.data[fieldId] !== record.data[fieldId]) {
        return true;
    }
    return false;
}

function isFirstLineInOnePack(record) {
    if (record.data['packSeq'] === 1) {
        return true;
    }
    return false;
}

function showPackCountEditableIfNeeded(colMeta, dataStore) {
    var cGrid = dataStore.cGrid;
    if (cGrid.id === 'shipmentPackDetail'
           &amp;&amp; colMeta.id === 'packCount') {
        var cGridIsReadonly =
           (cGrid &amp;&amp; cGrid.isReadonly()) ? true : false;
        Core.FieldFormat.addCellEditableIndicator(
            {}, colMeta, cGridIsReadonly);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敬老院墙上发现的一篇文章 (转载)]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2005/10/19/an-article-on-wall-of-rest-house/"/>
    <updated>2005-10-19T21:00:30+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2005/10/19/an-article-on-wall-of-rest-house</id>
    <content type="html"><![CDATA[<p>孩子！当你还很小的时候，我花了很多时间，教你慢慢用汤匙、用筷子吃东西。教你系鞋带、扣扣子、溜滑梯、教你穿衣服、梳头发、拧鼻涕。这些和你在一起的点点滴滴，是多么的令我怀念不已。所以，当我想不起来，接不上话时，请给我一点时间，等我一下，让我再想一想……极可能最后连要说什么，我也一并忘记。孩子！你忘记我们练习了好几百回，才学会的第一首娃娃歌吗？是否还记得每天总要我绞尽脑汁，去回答不知道你从哪里冒出来的吗？所以，当我重复又重复说着老掉牙的故事，哼着我孩提时代的儿歌时，体谅我。让我继续沉醉在这些回忆中吧！切望你，也能陪着我闲话家常吧！孩子，现在我常忘了扣扣子、系鞋带。吃饭时，会弄脏衣服，梳头发时手还会不停的抖，不要催促我，要对我多一点耐心和温柔，只要有你在一起，就会有很多的温暖涌上心头。</p>

<p>孩子！如今，我的脚站也站不稳，走也走不动。所以，请你紧紧的握着我的手，陪着我，慢慢的。就像当年一样，我带着你一步一步地走。</p>
]]></content>
  </entry>
  
</feed>
