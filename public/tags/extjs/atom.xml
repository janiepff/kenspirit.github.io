<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ExtJs | Thinking in Crowd / 鹄思乱想]]></title>
  <link href="http://www.thinkingincrowd.me/tags/extjs/atom.xml" rel="self"/>
  <link href="http://www.thinkingincrowd.me/"/>
  <updated>2013-03-11T05:42:02+08:00</updated>
  <id>http://www.thinkingincrowd.me/</id>
  <author>
    <name><![CDATA[鹄思乱想]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ExtJS, Jasmine, Unit Test – Part 2 (Ajax & Behavior)]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/08/30/extjs-jasmine-unit-test-part-2-ajax-behavior-2/"/>
    <updated>2012-08-30T23:04:06+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/08/30/extjs-jasmine-unit-test-part-2-ajax-behavior-2</id>
    <content type="html"><![CDATA[<p>Ajax is a pretty common used feature now for every JS Rich application. How to test it is common headache for many application.</p>

<p>ExtJS has been adopted in the two companies I worked and am working for.  Hence, here I only show you how to test Ajax in ExtJS built application.</p>

<p>In my previous post <a href="http://www.thinkingincrowd.me/blog/2012/08/13/extjs-jasmine-unit-test-part-1-philosophy-and-test-for-store/">ExtJS, Jasmine, Unit Test – Part 1 (Philosophy and Test for Store)</a>, the part on how to test Autoload <em>Ext.data.Store</em> simply override <em>Ext.lib.Ajax</em> so that it does nothing and <em>Ext.data.Store</em> is tested through manual loading data.</p>

<p>That is the simplest way but cannot fulfill the requirement to test real production code which uses Ajax feature.</p>

<p><strong>How real production code might look like if the application is built entirely by ExtJS?</strong></p>

<p>```javascript</p>

<pre><code>xxx.UiImpl = Ext.extend(xxx.Ui, {
    initComponent: function() {
        xxx.UiImpl.superclass.initComponent.call(this);

        this.emptyNameWarningMsg = 'Name is empty!';
        this.duplicateNameWarningMsg = 'Name has been in used!';
        this.nameField = Ext.getCmp('xxx.name');

        this.initEventHandlers();
    },

    initEventHandlers : function() {
        this.nameField.on('blur', this.validateName, this);
    },

    validateName: function(){
        var sName = this.nameField.getValue();
        if (sName == '') {
            this.nameField.markInvalid(this.emptyNameWarningMsg);
            return;
        }

        Ext.Ajax.request({
            url : config.appName() + "/foo/validateName",
            method : 'GET',
            params : {
                name : sName
            },
            success : function(data){
                if (data.responseText != '') {
                    this.nameField.markInvalid(this.duplicateNameWarningMsg);
                }
            },
            failure : function(data){
                alert("validate failure!");
            },
            scope: this
        });
    }
});
</code></pre>

<p>```</p>

<p>Above is a simple UI implementation class which extends from an UI class.  You can safely guess that this UI class simply has one name field which is bound with a Blur Event.  The Blur Event handler triggers an Ajax calls to validate whether the typed-in name is empty or duplicated within the system.  Pretty straightforward, right?</p>

<p><strong>Considering the Test Philosophy I mentioned in my last post, what contracts or behaviors we should test against here?</strong></p>

<p>Here are some examples:</p>

<ol>
<li>Contract between user and our system (blur event).  I would expect there would some code like this in my Jasmine Spec:</li>
</ol>


<p>```javascript</p>

<pre><code>oUI.nameField.fireEvent('blur');
</code></pre>

<p>```</p>

<ol>
<li>Contract between backend data structure and frontend handling on Ajax call.  I am expecting if I set the <em>responseText</em> from Ajax call to be not empty, the <em>nameField</em> in UI should be marked as invalid and show the <em>oUI.duplicateNameWarningMsg</em>.  Say, the response can be stub as:</li>
</ol>


<p>```javascript</p>

<pre><code>Ext.lib.Ajax.response({
    status: 200,
    responseText: 'Duplicate'
});
</code></pre>

<p>```</p>

<ol>
<li>Contract between implementation logic and UI behavior experienced by user.  The point mentioned above that <em>nameField</em> in UI should be marked as invalid and show the <em>oUI.duplicateNameWarningMsg</em> or <em>oUI.emptyNameWarningMsg</em> under different situations<strong>.</strong> Sample Spec code might be:</li>
</ol>


<p>```javascript</p>

<pre><code>oUI.nameField.fireEvent('blur');
expect(oUI.nameField.getActiveError()).toEqual(oUI.emptyNameWarningMsg);

oUI.nameField.setValue('Ken');
oUI.nameField.fireEvent('blur');
expect(oUI.nameField.getActiveError()).toEqual(oUI.duplicateNameWarningMsg);
</code></pre>

<p>```</p>

<ol>
<li>Other Contracts (e.g. Hardcode global variable or Element Id).  Why this is needed?  Because this where most of the change happens but it's very difficult to be aware of.  Sample Spec code might be:</li>
</ol>


<p>```javascript</p>

<pre><code>var oUI = Ext.getCmp('kentest');
</code></pre>

<p>```</p>

<p><strong>The Test Spec is already in mind but how can I use it to test against the production code?  </strong></p>

<p>I googled around and found one useful helper API - <a href="http://github.com/pivotal/jasmine-ajax">Jasmine-Ajax</a> : a set of helpers for testing AJAX requests under the Jasmine BDD framework for JavaScript.  However, now it only supports Prototype.js and jQuery.</p>

<p>I read the source and found it is not difficult to add support for ExtJS.  Hence, I modified it a bit.  Later I may submit a patch to github for this project and see whether it can be accepted.  Here I just attached the modified source first.   <a href="https://dl.dropbox.com/u/17182499/blog/2012/08/mock-ajax.js">mock-ajax</a></p>

<p>How should I include this helper class to use Jasmine to test the Ajax in ExtJS?</p>

<p>Configuration in POM.xml</p>

<p>```xml</p>

<pre><code>&lt;configuration&gt;
    &lt;preloadSources&gt;
        &lt;source&gt;adapter/ext/ext-base-debug.js&lt;/source&gt;
        &lt;source&gt;ext/ext-all-debug-w-comments.js&lt;/source&gt;
        &lt;source&gt;${project.basedir}/Resources/test/js/mock-ajax.js&lt;/source&gt;
        &lt;source&gt;${project.basedir}/Resources/test/js/global.js&lt;/source&gt;
    &lt;/preloadSources&gt;
...
&lt;configuration&gt;
</code></pre>

<p>```</p>

<p>Code in file globalTestStub.js change to be:</p>

<p>```javascript</p>

<pre><code>jasmine.Ajax.installMock();
</code></pre>

<p>```</p>

<p>How to write the Test Spec?</p>

<p>```javascript</p>

<pre><code>describe('Test Maintenance UI', function() {
    beforeEach(function() {
        jasmine.Ajax.useMock();
    });

    it('Maintenance UI should be initialized successfully', function() {
        var oUI = new xxx.UI({});
        expect(Ext.getCmp('kentest')).toBeTruthy();
    });

    it('Focus leaving name field should trigger unique validation.', function() {
        Ext.lib.Ajax.response({
            status: 200,
            responseText: 'Duplicate'
        });

        var oUI = Ext.getCmp('kentest');
        oUI.nameField.fireEvent('blur');
        expect(oUI.nameField.getActiveError()).toEqual(oUI.emptyNameWarningMsg);

        oUI.nameField.setValue('Ken');
        oUI.nameField.fireEvent('blur');
        expect(oUI.nameField.getActiveError()).toEqual(oUI.duplicateNameWarningMsg);
    });
});
</code></pre>

<p>```</p>

<p>Can you see how all above works now?  Please take it a trial and share your comment with me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ExtJS, Jasmine, Unit Test - Part 1 (Philosophy and Test for Store)]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/08/13/extjs-jasmine-unit-test-part-1-philosophy-and-test-for-store/"/>
    <updated>2012-08-13T23:02:18+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/08/13/extjs-jasmine-unit-test-part-1-philosophy-and-test-for-store</id>
    <content type="html"><![CDATA[<p>After the <a href="http://www.thinkingincrowd.me/blog/2012/08/06/extjs-jasmine-maven-integration/">integration</a> for ExtJS, Jasmine and Maven is done, we should consider how the unit test should be done for some web application built by ExtJS.</p>

<p>My previous ExtJS projects experience are all for internal company usage in Retail or Logistics business, the UI is composed of plenty components and full of user interaction.  Hence, business logic are often intervened with UI behavior together.  This is also one of the reason previously we think it's difficult to go for JS Unit Test.  (Maybe just we are too inexperienced on that.  Please share your experience to us if you have any.)</p>

<p>Assuming I need to introduce JS Unit Test to a system without any Unit Test covered, what should the general JS Unit Test principles to be firstly considered?  My opinions are:</p>

<blockquote><ol>
<li><p>To test external contract against each ExtJS Component or JS function.  The external contract is where changes often take place.</p></li>
<li><p>To test business logic (data calculation/validation, etc.) because this is where the real value in the business.</p></li>
<li><p>Not to test the UI behavior (Window popup, Panel/Tree collapse/expand, Drap/Drop, Animation, etc.).  It's quite difficult to mimic and verify the UI behavior because you have to twist your mind somehow to "tranform" the UI behavior to manual control the "movement" and then verify it.  It's just writing even more UI logic to control other UI logic.</p></li>
<li><p>Not to test all Ajax requests because it's slow and actually should be considered as Integration Test.  It's better to mock the interface data to test the Ajax caller &amp; response handler.</p></li>
</ol>
</blockquote>

<p>Let's see some real Unit Test example.  (Here some assumptions are made on how the components are generated and used in System: UI are completely built by ExtJS Designer.  It may not be the best practice, but it's the way I think the real practice can be applied.)</p>

<p><strong>Ext.data.Store</strong></p>

<p>You might first wonder why Unit Test need to be done for Store component?  I got to tell you that I have met many bugs that are introduced because of fields' definition changed.  This is the major contract bound the Store with the caller.</p>

<p>Below is a typical xxx.Datastore.js file generated by Ext Designer.</p>

<p>```javascript</p>

<pre><code>Ext.ns('xxx');
xxx.DataStore = Ext.extend(Ext.data.JsonStore, {
    constructor: function(cfg) {
        cfg = cfg || {};
        xxx.DataStore.superclass.constructor.call(this, Ext.apply({
            storeId: 'xxx.DataStore',
            url: 'http://www.foo.com/stub',
            root: 'data.rows',
            totalProperty: 'data.totalCount',
            autoLoad: true,
            fields: [
                {
                    name: 'code'
                },
                {
                    name: 'name'
                }
            ]
        }, cfg));
    }
});
new xxx.DataStore();
</code></pre>

<p>```</p>

<p>How should we test it?  This is an autoLoad Store.  As a JS source file to be linked in for testing, I cannot use Jasmine spyOn to stub it.  That is because JS source file is loaded before Jasmine spyOn in Spec can ever be run.  The only thing I can think of is to override the Ext Ajax lib to not doing actual request call.</p>

<p>Code in file globalTestStub.js to override the Ajax lib:</p>

<p>```javascript</p>

<pre><code>Ext.lib.Ajax.request = function() {
  return {success: true};
};
</code></pre>

<p>```</p>

<p>Configuration in POM.xml</p>

<p>```xml</p>

<pre><code>&lt;configuration&gt;
    &lt;preloadSources&gt;
        &lt;source&gt;adapter/ext/ext-base-debug.js&lt;/source&gt;
        &lt;source&gt;ext/ext-all-debug-w-comments.js&lt;/source&gt;
        &lt;source&gt;${project.basedir}/Resources/test/js/globalTestStub.js&lt;/source&gt;
    &lt;/preloadSources&gt;
    &lt;jsSrcDir&gt;${project.basedir}/Resources/js&lt;/jsSrcDir&gt;
    &lt;jsTestSrcDir&gt;${project.basedir}/Resources/test/js&lt;/jsTestSrcDir&gt;
    &lt;sourceIncludes&gt;
        &lt;include&gt;xxx.DataStore.js&lt;/include&gt;
...
&lt;/configuration&gt;
</code></pre>

<p>```</p>

<p>ExtJS source and the globalTestStub.js are included in <em>preloadSources</em> so that all Stub/Mock code required for Unit Test can be initialized correctly before other JS sources and Test Spec files without polluting real production code.</p>

<p>How to write a Test Spec then?  Actually, there is no fixed way, but just a simple rule: to test the contract.</p>

<p>```javascript</p>

<pre><code>describe('xxx.Datastore', function() {
    it('should be able to initialized', function() {
        var oStore = Ext.StoreMgr.lookup('xxx.DataStore');
        expect(oStore).toBeTruthy();
    });

    it('should load data correctly', function() {
        var oStore = Ext.StoreMgr.lookup('xxx.DataStore');
        oStore.loadData({
            data: {
                rows: [
                    {
                        code: 'C1',
                        name: 'N1'
                    },
                    {
                        code: 'C2',
                        name: 'N2'
                    }
                ],
                totalCount: 2
            }
        });

        expect(oStore.getTotalCount()).toEqual(2);
        var oRecord = oStore.getAt(0);
        expect(oRecord.get('code')).toEqual('C1');
        expect(oRecord.get('name')).toEqual('N1');
    });
});
</code></pre>

<p>```</p>

<p>Unit Test for non-autoload Store would be similar but easier.</p>

<p>Beside how the Test is written, I would like to draw your attention to how I wrote the description for the Suite and the Spec.  I am not sure whether I understood the <a href="http://dannorth.net/introducing-bdd/">Behavior Driven Development</a> comprehensively because I am still learning it.  However, I think this simple mind change helps me to think about how the behavior should be more than just simply how to write Test to meet coverage.  It can even helps us to review our design whether particular code belongs to the right place.</p>

<p>Let's explore how Unit Test can be achieved more for ExtJS later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ExtJS, Jasmine, Maven - Why I am working on them?]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/08/05/extjs-jasmine-maven-why-i-am-working-on-them/"/>
    <updated>2012-08-05T15:52:24+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/08/05/extjs-jasmine-maven-why-i-am-working-on-them</id>
    <content type="html"><![CDATA[<p>Before going into how to setup <a href="http://pivotal.github.com/jasmine/">Jasmine</a> to do Unit Test for <a href="www.sencha.com/products/extjs">ExtJS</a>, I think I should describe why I am doing this.</p>

<p>I have been using ExtJS for around 4 years.  My first company used HTML + ExtJS to build the UI while the current one use ExtJS completely to do that.  I have encountered lots of cases that well-tested behavior failed after some new features introduced in.</p>

<p>Everyone knows that it's because there lacks Unit Test.  However, there have never been any Unit Test done for Javascript in any project.  There are many of the reasons behind that, such as tight schedule, not enough attention etc.  But the most important reason that outweights or strengthens others is that Unit Test for Javascript is way too difficult than Java, especially when Javascript is used intensively to build the UI and implement business logics.</p>

<p>One of the reason makes Javascript hard to do Unit Test is due to good tools unavailability;  the other one is that most developers tend to not separating business logic from UI code quite clearly.</p>

<p>After the emergence of <a href="http://seleniumhq.org/">Selenium</a>, I have once thought it should be the right tool to address this issue.  However, after reading Selenium Doc and seeing what my previous colleagues did for recording &amp; playing, I think Selenium should be used mainly for Integration Test, not in Unit Test level.  My opinion is further strenghten after watching a video from Google Testing Expert and reading the blog from Martin Fowler:</p>

<blockquote><p><a href="http://www.infoq.com/cn/presentations/duannian-agile-test">让测试也敏捷起来</a> by 段念</p></blockquote>

<p><a href="http://martinfowler.com/bliki/TestPyramid.html">TestPyramid</a> by Martin Fowler</p>

<p><strong>The main points in TestPyramid are:</strong></p>

<blockquote><ol>
<li><p><strong>Low-level unit test should be many more than high level end-to-end testing through GUI.</strong></p></li>
<li><p><strong>Testing through UI is slow, brittle, expensive to write.</strong></p></li>
<li><p><strong>A rich javascript UI should have most of its UI behavior tested with javascript unit tests using something like Jasmine.</strong></p></li>
</ol>
</blockquote>

<p>Above is a long long purpose briefing, I hope it worthes to let you know the background and also agree with me on this.  I heard about Jasmine before reading the post by Martin Fowler, however, I kept thinking that it's quite difficult or even impossible to use Jasmine to test those ExtJS UI components.</p>

<p>Until I did sit down and really tried to use Jasmine to test the ExtJS code, I can say that Unit Test against ExtJS by Jasmine can be achieved at some level once we know what to test for.</p>

<p>In next post, I will show you the steps to bind ExtJS, Jasmine, Maven together to do the Unit Test and what I think we should test against.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[i18n, ExtJS and JAWR]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/07/21/i18n-extjs-and-jawr/"/>
    <updated>2012-07-21T17:19:57+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/07/21/i18n-extjs-and-jawr</id>
    <content type="html"><![CDATA[<p><strong>What is i18n and How to do it in Javascript?</strong></p>

<p>i18n, which is so called internationalization, is to support multilingual for a platform.</p>

<p>ExtJS, JavaScript framework, provides numerous UI  components to build complex UI.</p>

<p>In order to implement i18 in UI page purely built by ExtJS, it's inevitable to translate the title, label of the ExtJS components into proper language.  From my point of view, there should be two ways for that:</p>

<ol>
<li><p>Use the translated text directly in the UI components during construction</p></li>
<li><p>Use separate JS to replace the text before rendering, say in initComponent method or beforeRender event handler.</p></li>
</ol>


<p>There are pros and cons for each approach:</p>

<ol>
<li><p>Approach #1 is easy, but injecting logic for i18n text translation into the UI components construction is just like adding event handler into the HTML directly and it makes the code for text translation spread all around the code building UI.</p></li>
<li><p>Approach #2 separates the i18n implementation detail which makes it easier to change.  The benefit got from this can be easier prototyping, unit testing, and future enhancement if i18n implementation changed.</p></li>
</ol>


<p>In order to avoid violation of separation of concern principle, I would like to choose approach #2.  If you agree with me, you can keep going.</p>

<p><strong>How to use JAWR to implement i18n</strong></p>

<p>Normally, i18n text file is built with property file (e.g. msg_en_UI.properties) in which an entry is represented as:
```ini</p>

<pre><code>msgkey=msgText in i18n
</code></pre>

<p>```
This kind of file is very common in JAVA and <a href="http://jawr.java.net">JAWR</a> can be used to interpret this kind of property file and built code for i18n.  It's quite easy to setup JAWR and I am not going to brief it here.  In a word, if your i18n text entry built like this:</p>

<p>```ini</p>

<pre><code>main.hello.world=Hello world!
</code></pre>

<p>```</p>

<p>Then you can get the translated text by:</p>

<p>```javascript</p>

<pre><code>messages.main.hello.world(); // Hello world!
</code></pre>

<p>```</p>

<p>Actually, JAWR build the text to Javascript data structure (messages is default prefix) to make a function call to get the actual text (i18n is based on which property file loaded depending on your locale resolver).</p>

<p>OK, till now, do you get the idea and like this kind of implementation?</p>

<p>Personally, I don't quite like it.  Although the usage of data structure is to prevent polluting the Javascript namespace, directly mapping to data structure with the message key makes it hard to dynamically handle the text translation or even in batch operation.  Imagine the message key is the ID of the UI component, you have to use eval() function on "ID of UI component + ()" if you want a generic way.</p>

<p>Hence, I would rather have a Message Manager class having a function to return the translated message by passing in the message key.  If you agree with me again, keep follow.</p>

<p>Luckily, I am able to do this because JAWR provides flexibility to use a customized message generator.  Let's see how to do it.  According to its doc about <a href="http://jawr.java.net/docs/messages_gen.html">message</a> and <a href="http://jawr.java.net/docs/generators.html">generators</a>, we need just need to do three things:</p>

<ol>
<li>Set below sample lines in jawr.properties file:</li>
</ol>


<p>```ini</p>

<pre><code>jawr.custom.generators=xxx.MyResourceBundleMessagesGenerator

jawr.js.bundle.lib.mappings=**mymessages**:com.myapp.messages(mynamespace)
</code></pre>

<p>```</p>

<ol>
<li><p>Build the customized generator.  How? The simplest way is to extends the <em>net.jawr.web.resource.bundle.locale.ResourceBundleMessagesGenerator</em> and overrides its <em>public Reader createResource(GeneratorContext context)</em> to use our own generator and overrides its <em>public String getMappingPrefix()</em> to return our own mapping <strong>mymessages</strong>.</p></li>
<li><p>Build the customized creator.  How?  The simplest way is to extends the <em>net.jawr.web.resource.bundle.locale.message.MessageBundleScriptCreator</em> and overrides its <em>protected Reader doCreateScript(Properties props)</em> to write our own script generation code.</p></li>
</ol>


<p>Below is the sample code in my <em>xxx.MyResourceBundleMessagesGenerator</em>:</p>

<p>```java</p>

<pre><code>@Override
public Reader createResource(GeneratorContext context) {
  MyMessageBundleScriptCreator creator = new MyMessageBundleScriptCreator(context);
  return creator.createScript(context.getCharset());
}

@Override
public String getMappingPrefix() {
  return "mymessages";
}
</code></pre>

<p>```</p>

<p>Below is the sample code in my <em>xxx.MyMessageBundleScriptCreator</em>:</p>

<p>```java</p>

<pre><code>private StringBuffer loadScriptTemplate() {
  StringWriter sw = new StringWriter();
  InputStream is = null;
  try {
    is = ClassLoaderResourceUtils.getResourceAsStream("/xxx/messages.js", this);
    IOUtils.copy(is, sw);
  } catch (IOException e) {
    throw new BundlingProcessException("Fail to load the message template. ", e);
  } finally {
    IOUtils.close(is);
  }
  return sw.getBuffer();
}

@Override
protected Reader doCreateScript(Properties props) {
  String script = loadScriptTemplate().toString();
  Set keys = props.stringPropertyNames();
  StringBuffer messages = new StringBuffer("{");
  for (String key : keys) {
    String value = props.getProperty(key);
    messages.append(
"\"" + key + "\": \"" + StringUtils.defaultString(value, "").replaceAll("\"", "\\\\\"") + "\",\n");
  }
  if (messages.length() &gt; 1) {
    messages.deleteCharAt(messages.length() - 1);
  }
  messages.append("}");
  script = script.replace("@namespace", RegexUtil.adaptReplacementToMatcher(this.namespace));
  script = script.replaceFirst("@messages", RegexUtil.adaptReplacementToMatcher(messages.toString()));
  return new StringReader(script);
}
</code></pre>

<p>```</p>

<p>Finally, let's see what is in my message.js:</p>

<p>```javascript</p>

<pre><code>if (!window.MultilingualMessageMgr) {
  window.MultilingualMessageMgr = (function(){
    var msgMap = {};
    return {
      getMsg: function(namespace, msgKey) {
        var argLen = arguments.length;
        if (argLen &lt; 2) {
          return null;
        }
        var msg = null;
        if (argLen === 2) {
          msg = msgMap[namespace][msgKey];
        }
        if (argLen &gt; 2) {
          for (var i = 2; i &lt; argLen; i++) {
            msg = msg.replace("{" + (i - 2) + "}", arguments[i]);
          }
        }
        return msg;
      },
      putMsgs: function(namespace, msgObj) {
        msgMap[namespace] = msgObj;
      }
    };
  })();
}
window.MultilingualMessageMgr.putMsgs("@namespace", @messages);
</code></pre>

<p>```</p>

<p>Let me explain a bit on what the <em>MultilingualMessageMgr</em> does here.</p>

<p>It's an object which is returned by anonymous function.  This object has a <em>getMsg</em> and <em>putMsgs</em> function.  Both of them is referring to an <em>msgMap</em> object in the anonymous function scope so that it cannot be accessed directly outside <em>MultilingualMessageMgr</em>.  The <em>getMsg</em> function takes at least two arguments including namespace and message key, any other parameters are treated some value to replace the placeholder in message.  The <em>getMsg</em> function puts the messages json object with namespace bound to it for retrieval later.</p>

<p>With this <em>MultilingualMessageMgr,</em> multilingual message translation can be done by sample call like:</p>

<p>```javascript</p>

<pre><code>MultilingualMessageMgr.getMsg(namespace, msgKey);
</code></pre>

<p>```</p>

<p>Now, centralizing i18n logic to dynamically replace all ExtJs UI components can be realized by building the property file with component id as message key and iterating all components to replace them.</p>

<p>If you have any comment or better idea on how to do i18n in JavaScript, please let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enhance Performance of ExtJs Grid Record set value operation]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2011/07/20/enhance-performance-of-extjs-grid-record-set-value/"/>
    <updated>2011-07-20T23:25:39+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2011/07/20/enhance-performance-of-extjs-grid-record-set-value</id>
    <content type="html"><![CDATA[<p>When implementing a feature for the project, I encounter one Javascript method that takes around 9 seconds to finish.  Clearly, there is some performance issue in it.</p>

<p>The method logic is simple.  Take below table's data as an example:</p>

<pre><code>Measurement         XS     S     M     L      XL   XXL
 Sleeve             1      1     0     2      2     2
</code></pre>

<p>Consider above row "Sleeve" is a Record in ExtJs Grid.  When deleting size S &amp; L column, the figure should change to be:</p>

<pre><code>Measurement         XS     M     XL      XXL
 Sleeve             2      0      4      4
</code></pre>

<p>The intent is to accumulate the figure of the deleted size to the remained ones in one direction from the Standard size M.  Hence, this method requires intensive call on Record.set();  Below is the sudo code.</p>

<pre><code>    var recalculatedGridData = [];
    var colSearchCount = 0;
    for (var rowNo = 0; rowNo &lt; gridStoreLength; rowNo++) {
        ...
        // Calculation logic here to get all the correct data first.
        ...
        recalculatedGridData.push(recordData); // Store the data
    }
    // Reset recalculated data to record
    for (var rowNo = 0; rowNo &lt; recalculatedGridData.length; rowNo++) {
        var recordData = recalculatedGridData[rowNo];
        var record = store.virtualGetAt(recordData.rowNo);
        for (var colNo = 0; colNo &lt; recordData.cells.length; colNo++) {
            var cell = recordData.cells[colNo];
            record.set(cell.name, cell.value);
        }
        // record.batchSet(recordData.cells); // Enhanced version to batch set
    }
</code></pre>

<p>The performance tuning rule is first to find out the part where the bigger portion of the time used in.  This method contains two major for loop.  One is the first for calculation logic and the second is just purely setting data to the right cell.</p>

<p>The total time of the method takes around 9 seconds when the involved number of records are 42 and each have 5 cells affected.  It's found that 99% of the time spent on the second for loop.</p>

<p>After testing more intensively, each record.set() takes around 0.05 second.  That is why operation on around 42 * 5 = 210 cells takes 9 seconds.</p>

<p>OK.  Root cause is found and it's time to see why it takes so long to call record.set().  After checking on the source of ExtJs Record and Store object.</p>

<p>In Record.js:</p>

<pre><code>set : function(name, value){
        var encode = Ext.isPrimitive(value) ? String : Ext.encode;
        if(encode(this.data[name]) == encode(value)) {
            return;
        }
        this.dirty = true;
        if(!this.modified){
            this.modified = {};
        }
        if(this.modified[name] === undefined){
            this.modified[name] = this.data[name];
        }
        this.data[name] = value;
        if(!this.editing){
            this.afterEdit();
        }
    },

    // private
    afterEdit : function(){
        if (this.store != undefined &amp;&amp; typeof this.store.afterEdit == "function") {
            this.store.afterEdit(this);
        }
    },
</code></pre>

<p>In Store.js:</p>

<pre><code>    afterEdit : function(record){
        if(this.modified.indexOf(record) == -1){
            this.modified.push(record);
        }
        this.fireEvent('update', this, record, Ext.data.Record.EDIT);
    },
</code></pre>

<p>You can find that each Record.set() will call store.afterEdit() with its own as parameter.  Hence, I am considering batch update all cells in one record and then trigger Record.afterEdit() method.  Below is the "cracked" method added for batch set data.</p>

<pre><code>batchSet : function(cells){
        for (var i = cells.length; i--;) {
            var name = cells[i].name;
            var value = cells[i].value;
            var encode = Ext.isPrimitive(value) ? String : Ext.encode;
            if(encode(this.data[name]) == encode(value)) {
                return;
            }
            this.dirty = true;
            if(!this.modified){
                this.modified = {};
            }
            if(this.modified[name] === undefined){
                this.modified[name] = this.data[name];
            }
            this.data[name] = value;
        }
        if(!this.editing){
            this.afterEdit();
        }
    },
</code></pre>

<p>After testing, operation based on the same data set takes around 3.5 seconds now.  Suddenly drops 60%!</p>

<p>Kind of satisfied on what I have changed on this.  However, I think there should be room to improve.  Any Comment?</p>
]]></content>
  </entry>
  
</feed>
