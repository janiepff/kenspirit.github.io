<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Javascript | Thinking in Crowd / 鹄思乱想]]></title>
  <link href="http://kenspirit.github.io/tags/javascript/atom.xml" rel="self"/>
  <link href="http://kenspirit.github.io/"/>
  <updated>2013-05-28T21:56:25+08:00</updated>
  <id>http://kenspirit.github.io/</id>
  <author>
    <name><![CDATA[鹄思乱想]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Share code between Node.js and browser]]></title>
    <link href="http://kenspirit.github.io/blog/2013/04/13/share-code-between-nodejs-and-browser/"/>
    <updated>2013-04-13T12:59:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/04/13/share-code-between-nodejs-and-browser</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>When you are writing a Node.js based web application, it comes to a demand to share code between Node.js and browser because both the frontend and backend are written in JavaScript.  Some utility APIs, such as validation, data processing, are the common cases.</p>

<p>The philosophy of organizing code in Node.js, current trend also, is modularization.  Each module file has its own execution context, requires its dependent APIs from other modules and publishes its own APIs out for other modules.</p>

<p>Hence, the code sharing between Node.js and browser requires the code to be used as the same way in browser.</p>

<h2>Situations and Solutions</h2>

<p>Things work differently regarding the JS and modules loading mechanism.  Because in browser, it works asynchronously while in Node.js it is synchronous.  In browser, we cannot directly do inline require like Node.js:</p>

<p>```javascript
var a = xxx;
a.foo();</p>

<p>var b = require('b');
b.bar();
```</p>

<p>There are two kinds of situations:</p>

<h3>Modularization already realized for browser code</h3>

<p>If you have already modularized your JS code for browser and used some AMD / CMD script loader, such as <a href="http://requirejs.org/">RequireJS</a>, or <a href="http://seajs.org/">SeaJS</a>, you might expect your life would be easier.  However, this is not the case.</p>

<p>The require must be like below in order to make sure all dependent modules to be loaded successfully and then execute the code which uses them.</p>

<p>```javascript
define(['./b'], function (b) {</p>

<pre><code>var a = xxx;
a.foo();
b.bar();

return {
    bla: function(){
        console.log('bla');
    }
};
</code></pre>

<p>});
```</p>

<p>We can see that there is quite some syntax different between Node.js style and the AMD / CMD one in browser.</p>

<p>To overcome this incompatibility, there are two main approaches.</p>

<ul>
<li><p>Directly add boilerplate code in one side to fit the other</p>

<ol>
<li>Some sample manual boilerplate code and also more explanation can be found <a href="http://www.2ality.com/2011/11/module-gap.html">here</a>.</li>
<li><a href="https://github.com/ajaxorg/node-amd-loader">node-amd-loader</a>: Add one extra line in Node.js module to load AMD style module.</li>
<li>The <a href="https://github.com/jrburke/amdefine">amdefine</a> for RequireJS: Special boilerplate code in Node.js module and then can be stripped out by <a href="https://github.com/jrburke/amdefine#optimizer">RequireJS Optimizer</a>.</li>
</ol>
</li>
<li><p>Build process to handle the boilerplate</p>

<ol>
<li><a href="https://github.com/substack/node-browserify">browserify</a>: Recursively analyze all the <code>require()</code> calls in your app in order to build a bundle you can serve up to the browser in a single <code>&lt;script&gt;</code> tag.</li>
<li><a href="https://github.com/medikoo/modules-webmake">modules-webmake</a>: Bundle CommonJS/Node.js modules for web browsers.</li>
<li><a href="https://github.com/kenspirit/webassemble">webassemble</a>: Based on modules-webmake.  Auto bundle CommonJS/Node.js packages for web browsers.</li>
</ol>
</li>
</ul>


<p>Personally, I prefer introducing extra build process to handle the boilerplate for me.</p>

<p>The advantages of build process boilerplate are:</p>

<ol>
<li>Boilerplate code is brittle and subject to change.  Adding it to every file makes future change harder.  If some build process can automatically remove them, why not use the build process to automatically add them?</li>
<li>Modularization is good but for production environment in browser, it is always better to minimize network request to load JS file.  Most of the time, module files are bundled into single package for one call.  If build process need to be introduced to handle it, it would be great to integrate sharing logic into it also.</li>
<li>If the boilerplate is introduced in build process, it is better to discover potential error during development cycle instead of last minute preproduction testing.</li>
</ol>


<p>You may have concern on effectiveness during development cycle.  However, if you can make good use of a good IDE, say <a href="http://www.sublimetext.com/">Sublime Text</a> and some task runner, say <a href="http://gruntjs.com/">Grunt</a>, it's just a couple of seconds' waiting after a hotkey command after saving your JS file in IDE.  It might just be the time you switch from IDE to browser and press F5.</p>

<h3>Legacy or namespace browser code style</h3>

<p>Although it's seldom the case that when you are using such hot tech of Node.js but still need to stick to the old style in browser, it's actually easier to share your Node.js code under this circumstance.</p>

<p>The webmake and webassemble mentioned above is easy to bundle your modules under global or a particular namespace.</p>

<p>So, what is my favorite choice?  Write the Node.js style code and share them to browser by webassemble.  Why not webmake?  Because the webassemble is made by me. :P</p>

<p>So tell me what is yours.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expression in AngularJS must be idempotent and for multiple calls]]></title>
    <link href="http://kenspirit.github.io/blog/2013/02/02/expression-in-angularjs-must-be-idempotent-and-for-multiple-calls/"/>
    <updated>2013-02-02T14:32:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/02/02/expression-in-angularjs-must-be-idempotent-and-for-multiple-calls</id>
    <content type="html"><![CDATA[<p>Recently, I encounter two very interesting issues when using ng-repeat in <a href="http://angularjs.org">AngularJS</a>.  Not completely understanding the <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch">$watch</a> and <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest">$digest()</a> is the root cause.</p>

<h2>Requirement</h2>

<p>I am making some workout entries as a list and one special requirement is to group the records by the date.</p>

<p>In order to break the entries to different groups, I use a scope level variable <em>$scope.lastActionDate</em> to keep track of the last actionDate of the entry to decide whether I should add the actionDateGroup DIV.  The source is as below.  The debug messages are used to explain the issues I encountered.  You can safely ignore them now.  Actually, you may already guess what one of the issues is after seeing them.  Yes, only one.  I bet you can never guess the second one and why.</p>

<p>
``` html</p>

<pre><code>&lt;style&gt;
    body {font-family: 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;}
    ul li {list-style-type: none;}
    .actionDateGroup {font-weight: bold; color: red}
&lt;/style&gt;
&lt;div id="content" ng-controller="EntryCtrl"&gt;
    &lt;div id="entries"&gt;
        &lt;ul&gt;
            &lt;li ng-repeat="entry in entries"&gt;
                &lt;div ng-switch on="isNewDateGroup(entry.actionDate)"&gt;
                    &lt;div ng-switch-when="true" class="actionDateGroup"&gt;{{entry.actionDate}}&lt;/div&gt;
                &lt;/div&gt;
                &lt;span&gt;{{entry.desc}}&lt;/span&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;script type="text/javascript" src="./js/angular/angular.js"&gt;&lt;/script&gt;
&lt;script&gt;
    function EntryCtrl($scope, $location) {
        $scope.entries = [{
            desc: 'Rope jumping count 1000',
            actionDate: '2012-01-31',
        },{
            desc: 'Jogging 3000M',
            actionDate: '2012-01-31'
        },{
            desc: 'Situp 40 * 3',
            actionDate: '2012-01-30'
        }];
        $scope.lastActionDate = null;
        $scope.calledCount = 0;

        $scope.isNewDateGroup = function(actionDate) {
            $scope.calledCount++;
            console.log('Function called count: ' + $scope.calledCount);
            console.log('Entry date vs Scope date: ' + actionDate + ' vs ' + $scope.lastActionDate);
            if ($scope.lastActionDate === null || $scope.lastActionDate !== actionDate) {
                $scope.lastActionDate = actionDate;
                return true;
            }
            return false;
        };
    }
&lt;/script&gt;
</code></pre>

<p>```
</p>

<h2>Expectation</h2>

<ol>
<li><em>actionDate</em> of the first entry will always be shown as it's the first group.</li>
<li><em>actionDate</em> of the remaining entries will be shown if its value is not the same as the previous one.</li>
</ol>


<h2>Phenomenon</h2>

<p>When the sample data is as above (case #1), the effect looks like it's behaving correctly as below:</p>

<ul>
    <li style="list-style-type: none;">
        <div style="font-weight: bold; color: red">2012-01-31</div>
        <span>Rope jumping count 1000</span>
    </li>
    <li style="list-style-type: none;">
        <span>Jogging 3000M</span>
    </li>
    <li style="list-style-type: none;">
        <div style="font-weight: bold; color: red">2012-01-30</div>
        <span>Situp 40 * 3</span>
    </li>
</ul>


<p>However, if you change the <em>actionDate</em> of the last entry to be also <strong>2012-01-31</strong> (case #2), you will find the result is that no date group is shown.  Why?  Isn't it supposed to show only the first one as all entries have the same <em>actionDate</em>?</p>

<h4>Expected result:</h4>

<ul>
    <li style="list-style-type: none;">
        <div style="font-weight: bold; color: red">2012-01-31</div>
        <span>Rope jumping count 1000</span>
    </li>
    <li style="list-style-type: none;">
        <span>Jogging 3000M</span>
    </li>
    <li style="list-style-type: none;">
        <span>Situp 40 * 3</span>
    </li>
</ul>


<h4>Actual result:</h4>

<ul>
    <li style="list-style-type: none;">
        <span>Rope jumping count 1000</span>
    </li>
    <li style="list-style-type: none;">
        <span>Jogging 3000M</span>
    </li>
    <li style="list-style-type: none;">
        <span>Situp 40 * 3</span>
    </li>
</ul>


<p>Now if you check the calledCount in the debug message, you will find that it's called 6 times (double the entry count) in case #1 and 9 times in case #2.  There are two issues I never thought they should happen:</p>

<ol>
<li>The <em>isNewDateGroup</em> function is called more than the entries' count.  (Guess this, right?)</li>
<li>The called count is different when the data is different.  (how about this?)</li>
</ol>


<h2>Causes</h2>

<p>In AngularJS <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch">$watch</a> API:</p>

<blockquote><ul>
<li>Since <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest">$digest()</a> reruns when it detects changes the watchExpression can execute multiple times per <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest">$digest()</a> and should be <strong>idempotent</strong>.</li>
<li>The listener is called only when the value from the current watchExpression and the previous call to watchExpression are not equal <strong>(with the exception of the initial run, see below)</strong> ...</li>
<li>The watch listener may change the model, which may trigger other listeners to fire. This is achieved by <strong>rerunning the watchers until no changes are detected</strong>. The rerun iteration limit is 10 to prevent an infinite loop deadlock.
...
(Since watchExpression can execute multiple times per $digest cycle when a change is detected, be prepared for multiple calls to your listener.)</li>
</ul>
</blockquote>

<h3>Issue #1</h3>

<p>The <em>isNewDateGroup</em> being watched whose calculation relies on value of <em>lastActionDate</em> is not idempotent and so during initial run stage, <em>lastActionDate</em> is set to 2012-01-30 at the end of case #1 which causes the illusion of working, while it is set to 2012-01-31 at the end of case #2 which illustrates the error.</p>

<h3>Issue #2</h3>

<p>In below code, if I comment out <strong>$scope.lastActionDate = actionDate;</strong> or change the <strong>return true;</strong> to <strong>return false;</strong>, the called count will be 6, same as case #1.  This implies that the return value of the expression is the cause.</p>

<p>``` javascript</p>

<pre><code>if ($scope.lastActionDate === null || $scope.lastActionDate !== actionDate) {
    $scope.lastActionDate = actionDate;
    return true;
}
</code></pre>

<p>```</p>

<p>Remember what the API states: <strong>rerunning the watchers until no changes are detected</strong>?  Let's see what the return value is for watch expression <em>isNewDateGroup</em> after each run.</p>

<p>If the <em>actionDate</em> of the last entry is <strong>2012-01-30</strong>:</p>

<p>
<table style="font-size: 0.85em;">
    <tr>
        <td style="padding: 5px; border: 1px solid black;"></td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Rope jumping</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Jogging</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Situp</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">1st <br/>(initial)</td>
        <td style="padding: 5px; border: 1px solid black;">true ($scope.lastActionDate === null)</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">true ('2012-01-31' !== '2012-01-30';<br/>
        $scope.lastActionDate = '2012-01-30')
        </td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">2nd</td>
        <td style="padding: 5px; border: 1px solid black;">true ($scope.lastActionDate !== '2012-01-31')</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">true</td>
    </tr>
</table>
</p>


<p>If the <em>actionDate</em> of the last entry is <strong>2012-01-31</strong>:</p>

<p>
<table style="font-size: 0.85em;">
    <tr>
        <td style="padding: 5px; border: 1px solid black;"></td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Rope jumping</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Jogging</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Situp</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">1st <br/>(initial)</td>
        <td style="padding: 5px; border: 1px solid black;">true ($scope.lastActionDate === null)</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">2nd</td>
        <td style="padding: 5px; border: 1px solid black;">false (change compared to last run)</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">3rd</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
    </tr>
</table>
</p>


<p>So now you see why changing the last entry to 2012-01-31 causes the 3rd time to evaluate the expression again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String interpolation should not be used with Class Directive in AngularJS]]></title>
    <link href="http://kenspirit.github.io/blog/2013/01/30/string-interpolation-should-not-be-used-with-class-directive-in-angularjs/"/>
    <updated>2013-01-30T07:02:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/01/30/string-interpolation-should-not-be-used-with-class-directive-in-angularjs</id>
    <content type="html"><![CDATA[<p>Do you see any issue in below HTML snippet with <a href="http://angularjs.org">AngularJS</a> code?<br/>

``` html</p>

<pre><code>&lt;span ng-class="task-{{task.type}}"&gt;{{task.type}}&lt;/span&gt;
&lt;input type="text" ng-model="task.type"/&gt;
</code></pre>

<p>```
</p>

<p>Do you see what is the difference between the one below and above?<br/>

``` html</p>

<pre><code>&lt;span ng-class="'task-' + task.type"&gt;{{task.type}}&lt;/span&gt;
&lt;input type="text" ng-model="task.type"/&gt;
</code></pre>

<p>```
</p>

<p>The first one use String interpolation in Class <a href="http://docs.angularjs.org/guide/directive">Directive</a>.  The result is that the css class you expect to got based on model value <em>task.type</em> will not be applied to the <em>span</em> element. It took me a long time to figure out why.</p>

<p>Before furher reading, it's better if you have read the Developer Guide, <a href="http://docs.angularjs.org/guide/directive">Directive</a> section which explains the concept of <strong>String interpolation</strong> and <strong>Compilation process, and directive matching</strong>, although honestly, it doesn't quite clearly say how the String interpolation should or can be used.  Before, I just have the rough idea that it can be evaluated and replaced in String and also reflect the change from model.</p>

<p>If you use the first code snippet to create sample AngularJS page and bind an <em>task</em> model to it, you can see that the String Interpolation "<em>works</em>": the ng-class attribute and the content of the span tag can be replaced correctly with model value.  Even if you change the model value through the input field, they can be updated accordingly.  However, the CSS is not applied as expected.</p>

<p>Why?  Let's take a look at AngularJS source:</p>

<p>In function <em>collectDirectives</em>, when it checks the element's attribute, it calls <em>addAttrInterpolateDirective</em> before <em>addDirective</em>.  In <em>addAttrInterpolateDirective</em>, the <a href="http://docs.angularjs.org/guide/expression">Expression</a> in String interpolation will be converted to a new directive with compile function to watch the change and set new value to the attribute which is the class directive in this case.  There are two important things need to be aware of:</p>

<ol>
<li>A new directive is ad-hoc created before the class directive it's inspecting.</li>
<li>The new directive's linking function is watching the expression change to update the class directive value itself.</li>
</ol>


<p>```javascript</p>

<pre><code>function collectDirectives(node, directives, attrs, maxPriority) {
  var nodeType = node.nodeType,
      attrsMap = attrs.$attr,
      match,
      className;

  switch(nodeType) {
    case 1: /* Element */
      // use the node name: &lt;directive&gt;
      addDirective(directives,
          directiveNormalize(nodeName_(node).toLowerCase()), 'E', maxPriority);

      // iterate over the attributes
      for (var attr, name, nName, value, nAttrs = node.attributes,
               j = 0, jj = nAttrs &amp;&amp; nAttrs.length; j &lt; jj; j++) {
        attr = nAttrs[j];
        if (attr.specified) {
          name = attr.name;
          nName = directiveNormalize(name.toLowerCase());
          ...
          addAttrInterpolateDirective(node, directives, value, nName);
          addDirective(directives, nName, 'A', maxPriority);
        }
      }
      ...
    }
    ...
}

function addAttrInterpolateDirective(node, directives, value, name) {
  var interpolateFn = $interpolate(value, true);

  // no interpolation found -&gt; ignore
  if (!interpolateFn) return;

  directives.push({
    priority: 100,
    compile: valueFn(function(scope, element, attr) {
      var $$observers = (attr.$$observers || (attr.$$observers = {}));
      ...
      attr[name] = undefined;
      ($$observers[name] || ($$observers[name] = [])).$$inter = true;
      (attr.$$observers &amp;&amp; attr.$$observers[name].$$scope || scope).
        $watch(interpolateFn, function(value) {
          attr.$set(name, value);
        });
    })
  });
}
</code></pre>

<p>```</p>

<p>Let's see how class directive works now.  It's at function <em>classDirective</em>.  If you put an expression in class directive, it will watch that.  Once there is any value change, it adds/removes class from element.  Hence, the second example above works correctly.</p>

<p>```javascript</p>

<pre><code>function classDirective(name, selector) {
  name = 'ngClass' + name;
  return ngDirective(function(scope, element, attr) {
    scope.$watch(attr[name], function(newVal, oldVal) {
      if (selector === true || scope.$index % 2 === selector) {
        if (oldVal &amp;&amp; (newVal !== oldVal)) {
           if (isObject(oldVal) &amp;&amp; !isArray(oldVal))
             oldVal = map(oldVal, function(v, k) { if (v) return k });
           element.removeClass(isArray(oldVal) ? oldVal.join(' ') : oldVal);
         }
         if (isObject(newVal) &amp;&amp; !isArray(newVal))
            newVal = map(newVal, function(v, k) { if (v) return k });
         if (newVal) element.addClass(isArray(newVal) ? newVal.join(' ') : newVal);      }
    }, true);
  });
}
</code></pre>

<p>```</p>

<p>However, if you put String interpolation into it, it will be watching <strong>undefined</strong>.  Why?  Remember what <em>addAttrInterpolateDirective</em> does?  An extra directive is added before this class directive and so its linking function runs before the one for class directive.  And one more thing I omit above: its linking function explicitly sets <strong>attr[name] = undefined;</strong>.  Hence, when the linking functions run sequentially, the class directive's linking function doesn't watch the expression in String interpolation or the value derived although the String interpolation itself works correctly to set the value to class directive.</p>

<p>Hence, in order to set CSS class on HTML element dynamically, we should either use:</p>

<ul>
<li>ng-class / ng-class-odd / ng-class-even without String interpolation by directly using model value or Expression.</li>
</ul>


<p>or</p>

<ul>
<li>HTML class attribute directly with String interpolation.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A response pends forever issue in MongoDB, Connect and Node.js]]></title>
    <link href="http://kenspirit.github.io/blog/2012/12/05/a-response-pends-forever-issue-in-mongodb-connect-and-nodejs/"/>
    <updated>2012-12-05T21:08:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2012/12/05/a-response-pends-forever-issue-in-mongodb-connect-and-nodejs</id>
    <content type="html"><![CDATA[<p><strong>My ignorance</strong><br/>
When I first switched to use <a href="https://github.com/masylum/connect-mongodb">connect-mongodb</a> to replace the MemoryStore in <a href="https://github.com/senchalabs/connect">Connect</a>, I found that the homepage of my pet project cannot be even loaded and it seems the response is kept waiting there.  If I switched back to use MemoryStore, it's all fine.  There must be something wrong when I am using <a href="http://www.mongodb.org/">MongoDB</a> for session management.</p>

<p>First, I dig into the <em>session.js</em> in Connect.  Around line 267:
```javascript connect/lib/middleware/session.js</p>

<pre><code>// proxy end() to commit the session
var end = res.end;
res.end = function(data, encoding){
  res.end = end;
  if (!req.session) return res.end(data, encoding);
  debug('saving');
  req.session.resetMaxAge();
  req.session.save(function(){
    debug('saved');
    res.end(data, encoding);
  });
};
</code></pre>

<p>```</p>

<p>After opening the debug feature in <a href="http://nodejs.org">Node</a>, I found that it's never going into the callback of <em>session.save()</em>.  Hence, the 'saved' message is never printed in the console after 'saving' and the response is never ending.</p>

<p>Why would this happened?  I kept tracing the code and found that <em>session.save()</em> in Connect is calling the <em>sessionStore.set()</em> method.  The <em>MongoStore.set()</em> method in <em>connect-mongodb.js</em> is just purely calling <em>collection.update()</em> and no much magic there.  However, it seems the <em>update()</em> method call has either no err and data coming back.  Is there something wrong with the MongoDB or the Collection?</p>

<p>MongoDB log doesn't seems to have any query or update action recorded and I just found that there are 10 connections started every time I started my app, but I remembered there were 5 connections (default pool size) before (Actually, I haven't noticed that this is the phenomenon of the problem I have at that time yet).</p>

<p>Without any clue, I checked the initialization of the MongoStore and find below code:
```javascript</p>

<pre><code>if (server_config.isConnected()) {
  authenticateAndGetCollection(callback);
} else {
  server_config.connect(db, function (err) {
    if (err) callback(Error("Error connecting (" + (err instanceof Error ? err.message : err) + ")"));
      authenticateAndGetCollection(callback);
    });
}
</code></pre>

<p>```</p>

<p>It turns out that the flow goes into <em>server_config.connect()</em> again.  But why?  DB should be initialized in below code which is intended to encapsulate all DB operation.
```javascript DbManager.js</p>

<pre><code>DbManager = (function() {
  var db = new Db('tyt', new Server('127.0.0.1', 27017, {auto_reconnect: true}, {}), {safe: true});
  db.open(function(){});

  return {
    getDb: function() {
        return db;
    }
  }
})();

exports.DbManager = DbManager;
</code></pre>

<p>```</p>

<p>```javascript In my node app.js</p>

<pre><code>var express = require('express')
  , DbManager = require('./db.js').DbManager
  , mongoStore = require('connect-mongodb');

var app = module.exports = express();

// Configuration
app.configure(function(){
  app.use(express.session({
      secret: 'kenspirit',
      key: 'tt.sid',
      cookie: {secure: false, maxAge: 300000},
      store: new mongoStore({db: DbManager.getDb()})
  }));
});
</code></pre>

<p>```</p>

<p>If you are familiar with Node, you may have already noticed what I haven't done right here.  I am assuming the DB should be connected and ready for use already as I have called <em>db.open()</em> during DbManager's construction.  However, Async is the most importance concept in Node, <em>db.open()</em> takes my callback will immediately return and it doesn't guarantee it's opened already.  If I change to below code, problem solved.</p>

<p>```javascript</p>

<pre><code>var db = DbManager.getDb();
db.open(function(err, db) {
  if (db) {
    app.use(express.session({
      secret: 'kenspirit',
      key: 'tt.sid',
      cookie: {secure: false, maxAge: 300000},
      store: new mongoStore({db: db})
    }));
   }
});
</code></pre>

<p>```</p>

<p><strong>The root of not responding</strong><br/>
I wonder where is the actual source to make the response kept waiting?  I have configured the <em>auto_reconnect</em> already.  Later I found that in mongodb:
```javascript mongodb/lib/mongodb/db.js
  Db.prototype.open = function(callback) {</p>

<pre><code>...
self._state = 'connecting';
...
self.serverConfig.connect(self, {firstCall: true}, function(err, result) {
  if(err != null) {
    // Set that db has been closed
    self.openCalled = false;
    // Return error from connection
    return callback(err, null);
  }
  // Set the status of the server
  self._state = 'connected';
  // Callback
  return callback(null, self);
});
...
</code></pre>

<p>  };</p>

<p>  Db.prototype._executeInsertCommand = function(db_command, options, callback) {</p>

<pre><code>...
// If the pool is not connected, attemp to reconnect to send the message
if(self._state == 'connecting' &amp;&amp; this.serverConfig.autoReconnect) {
  process.nextTick(function() {
    self.commands.push({type:'insert', 'db_command':db_command, 'options':options, 'callback':callback});
  })
}
...
</code></pre>

<p>  ;}
```</p>

<p>```javascript mongodb/lib/connection/server.js
  Server.prototype.connect = function(dbInstance, options, callback) {</p>

<pre><code>...
// Force connection pool if there is one
if(server.connectionPool) server.connectionPool.stop();
...
// Create connection Pool instance with the current BSON serializer
var connectionPool = new ConnectionPool(this.host, this.port, this.poolSize, dbInstance.bson,  this.socketOptions);
...
// Set up on connect method
connectionPool.on("poolReady", function() {
  // Create db command and Add the callback to the list of callbacks by the request id (mapping outgoing messages to correct callbacks)
  var db_command = DbCommand.NcreateIsMasterCommand(dbInstance, dbInstance.databaseName);
  // Check out a reader from the pool
  var connection = connectionPool.checkoutConnection();
  // Set server state to connEcted
  server._serverState = 'connected';
  // dbInstance._state = 'connected';  If I add this line here, even if my code doesn't do any change, it works.
  ...
});
</code></pre>

<p>  };
```</p>

<p>Finally, the root cause is found.  Normally, when <em>db.open()</em> is called, it sets its <em>_state = 'connecting'</em>, and it then will call <em>server.connect()</em> to create connection pool and in the callback, it sets its <em>_state = 'connected'</em> again.  However, my case is that the second call <em>server.connect()</em> in MongoStore.js first make the first connection pool stops and then creates a new connection pool again(This should be where makes the mongo db log has 10 connections opened).  Somehow, the callback in normal flow cannot be executed so that <em>db._state</em> has not been set to 'connected'.  What is more, the callback set in <em>MongoStore.js</em> doesn't set the <em>db._state</em> to 'connected'.  The <em>db._state</em> is remained in 'connecting' forever which makes my update command keep pushing to its commands stack.</p>

<p><strong>Most appropriate way to initialize MongoDB and its connections in Node.js</strong><br/>
I began to wonder what is the "most appropriate way" to initialize MongoDB and manage its connections and googled around.</p>

<p>At first, I found a similar question asked in <a href="http://stackoverflow.com/questions/10656574/how-to-manage-mongodb-connections-in-a-nodejs-webapp">StackOverFlow</a>.<br/>
However, the reply doesn't seem to be reasonable.  It recommands opening a new connection (actually, a DB and Connection Pool there) per request.  And it said it's due to MongoDB is asynchronous.  It's pretty confusing and the asynchronous mechanism in Node should be achieved by callback instead of creating new connection per request.  If so, what is the point of using pool then?  This approach should be more slow.</p>

<p>Later I found out a reply from the author of node-mongodb-native in <a href="http://stackoverflow.com/questions/10307994/where-can-i-find-complete-documentation-concerning-node-mongodb-native/10349450#10349450">StackOverFlow</a> too.  It clearly stated "DO NOT call open on each request.".</p>

<p>I believe only opening MongoDB once with appropriate pool size and initialize node application in the <em>db.open()</em> callback should be the right way to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ExtJS, Jasmine, Unit Test – Part 2 (Ajax & Behavior)]]></title>
    <link href="http://kenspirit.github.io/blog/2012/08/30/extjs-jasmine-unit-test-part-2-ajax-behavior-2/"/>
    <updated>2012-08-30T23:04:06+08:00</updated>
    <id>http://kenspirit.github.io/blog/2012/08/30/extjs-jasmine-unit-test-part-2-ajax-behavior-2</id>
    <content type="html"><![CDATA[<p>Ajax is a pretty common used feature now for every JS Rich application. How to test it is common headache for many application.</p>

<p>ExtJS has been adopted in the two companies I worked and am working for.  Hence, here I only show you how to test Ajax in ExtJS built application.</p>

<p>In my previous post <a href="http://www.thinkingincrowd.me/blog/2012/08/13/extjs-jasmine-unit-test-part-1-philosophy-and-test-for-store/">ExtJS, Jasmine, Unit Test – Part 1 (Philosophy and Test for Store)</a>, the part on how to test Autoload <em>Ext.data.Store</em> simply override <em>Ext.lib.Ajax</em> so that it does nothing and <em>Ext.data.Store</em> is tested through manual loading data.</p>

<p>That is the simplest way but cannot fulfill the requirement to test real production code which uses Ajax feature.</p>

<p><strong>How real production code might look like if the application is built entirely by ExtJS?</strong></p>

<p>```javascript</p>

<pre><code>xxx.UiImpl = Ext.extend(xxx.Ui, {
    initComponent: function() {
        xxx.UiImpl.superclass.initComponent.call(this);

        this.emptyNameWarningMsg = 'Name is empty!';
        this.duplicateNameWarningMsg = 'Name has been in used!';
        this.nameField = Ext.getCmp('xxx.name');

        this.initEventHandlers();
    },

    initEventHandlers : function() {
        this.nameField.on('blur', this.validateName, this);
    },

    validateName: function(){
        var sName = this.nameField.getValue();
        if (sName == '') {
            this.nameField.markInvalid(this.emptyNameWarningMsg);
            return;
        }

        Ext.Ajax.request({
            url : config.appName() + "/foo/validateName",
            method : 'GET',
            params : {
                name : sName
            },
            success : function(data){
                if (data.responseText != '') {
                    this.nameField.markInvalid(this.duplicateNameWarningMsg);
                }
            },
            failure : function(data){
                alert("validate failure!");
            },
            scope: this
        });
    }
});
</code></pre>

<p>```</p>

<p>Above is a simple UI implementation class which extends from an UI class.  You can safely guess that this UI class simply has one name field which is bound with a Blur Event.  The Blur Event handler triggers an Ajax calls to validate whether the typed-in name is empty or duplicated within the system.  Pretty straightforward, right?</p>

<p><strong>Considering the Test Philosophy I mentioned in my last post, what contracts or behaviors we should test against here?</strong></p>

<p>Here are some examples:</p>

<ol>
<li>Contract between user and our system (blur event).  I would expect there would some code like this in my Jasmine Spec:</li>
</ol>


<p>```javascript</p>

<pre><code>oUI.nameField.fireEvent('blur');
</code></pre>

<p>```</p>

<ol>
<li>Contract between backend data structure and frontend handling on Ajax call.  I am expecting if I set the <em>responseText</em> from Ajax call to be not empty, the <em>nameField</em> in UI should be marked as invalid and show the <em>oUI.duplicateNameWarningMsg</em>.  Say, the response can be stub as:</li>
</ol>


<p>```javascript</p>

<pre><code>Ext.lib.Ajax.response({
    status: 200,
    responseText: 'Duplicate'
});
</code></pre>

<p>```</p>

<ol>
<li>Contract between implementation logic and UI behavior experienced by user.  The point mentioned above that <em>nameField</em> in UI should be marked as invalid and show the <em>oUI.duplicateNameWarningMsg</em> or <em>oUI.emptyNameWarningMsg</em> under different situations<strong>.</strong> Sample Spec code might be:</li>
</ol>


<p>```javascript</p>

<pre><code>oUI.nameField.fireEvent('blur');
expect(oUI.nameField.getActiveError()).toEqual(oUI.emptyNameWarningMsg);

oUI.nameField.setValue('Ken');
oUI.nameField.fireEvent('blur');
expect(oUI.nameField.getActiveError()).toEqual(oUI.duplicateNameWarningMsg);
</code></pre>

<p>```</p>

<ol>
<li>Other Contracts (e.g. Hardcode global variable or Element Id).  Why this is needed?  Because this where most of the change happens but it's very difficult to be aware of.  Sample Spec code might be:</li>
</ol>


<p>```javascript</p>

<pre><code>var oUI = Ext.getCmp('kentest');
</code></pre>

<p>```</p>

<p><strong>The Test Spec is already in mind but how can I use it to test against the production code?  </strong></p>

<p>I googled around and found one useful helper API - <a href="http://github.com/pivotal/jasmine-ajax">Jasmine-Ajax</a> : a set of helpers for testing AJAX requests under the Jasmine BDD framework for JavaScript.  However, now it only supports Prototype.js and jQuery.</p>

<p>I read the source and found it is not difficult to add support for ExtJS.  Hence, I modified it a bit.  Later I may submit a patch to github for this project and see whether it can be accepted.  Here I just attached the modified source first.   <a href="https://dl.dropbox.com/u/17182499/blog/2012/08/mock-ajax.js">mock-ajax</a></p>

<p>How should I include this helper class to use Jasmine to test the Ajax in ExtJS?</p>

<p>Configuration in POM.xml</p>

<p>```xml</p>

<pre><code>&lt;configuration&gt;
    &lt;preloadSources&gt;
        &lt;source&gt;adapter/ext/ext-base-debug.js&lt;/source&gt;
        &lt;source&gt;ext/ext-all-debug-w-comments.js&lt;/source&gt;
        &lt;source&gt;${project.basedir}/Resources/test/js/mock-ajax.js&lt;/source&gt;
        &lt;source&gt;${project.basedir}/Resources/test/js/global.js&lt;/source&gt;
    &lt;/preloadSources&gt;
...
&lt;configuration&gt;
</code></pre>

<p>```</p>

<p>Code in file globalTestStub.js change to be:</p>

<p>```javascript</p>

<pre><code>jasmine.Ajax.installMock();
</code></pre>

<p>```</p>

<p>How to write the Test Spec?</p>

<p>```javascript</p>

<pre><code>describe('Test Maintenance UI', function() {
    beforeEach(function() {
        jasmine.Ajax.useMock();
    });

    it('Maintenance UI should be initialized successfully', function() {
        var oUI = new xxx.UI({});
        expect(Ext.getCmp('kentest')).toBeTruthy();
    });

    it('Focus leaving name field should trigger unique validation.', function() {
        Ext.lib.Ajax.response({
            status: 200,
            responseText: 'Duplicate'
        });

        var oUI = Ext.getCmp('kentest');
        oUI.nameField.fireEvent('blur');
        expect(oUI.nameField.getActiveError()).toEqual(oUI.emptyNameWarningMsg);

        oUI.nameField.setValue('Ken');
        oUI.nameField.fireEvent('blur');
        expect(oUI.nameField.getActiveError()).toEqual(oUI.duplicateNameWarningMsg);
    });
});
</code></pre>

<p>```</p>

<p>Can you see how all above works now?  Please take it a trial and share your comment with me.</p>
]]></content>
  </entry>
  
</feed>
