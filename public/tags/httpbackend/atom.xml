<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: HttpBackend | Thinking in Crowd / 鹄思乱想]]></title>
  <link href="http://kenspirit.github.io/tags/httpbackend/atom.xml" rel="self"/>
  <link href="http://kenspirit.github.io/"/>
  <updated>2013-06-09T20:20:31+08:00</updated>
  <id>http://kenspirit.github.io/</id>
  <author>
    <name><![CDATA[鹄思乱想]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to verify JSON data with AngularJS $httpBackend]]></title>
    <link href="http://kenspirit.github.io/blog/2013/06/08/how-to-verify-json-data-with-angularjs-httpbackend/"/>
    <updated>2013-06-08T22:17:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/06/08/how-to-verify-json-data-with-angularjs-httpbackend</id>
    <content type="html"><![CDATA[<p>When we are writing Unit Test for AngularJS Controller or Service, it's pretty common to verify the data posted to server using <a href="http://docs.angularjs.org/api/ngMock.$httpBackend">$httpBackend</a> in ngMock module.</p>

<p>Consider the most common method: <em>expect(method, url, data, headers)</em>, from the doc, we find that the data is expected to be either <em>String</em> or <em>RegExp</em>.</p>

<blockquote><p><strong>expect(method, url, data, headers)</strong><br/>
Creates a new request expectation.</p>

<p>Parameters<br/>
* method – {string} – HTTP method.<br/>
* url – {string|RegExp} – HTTP url.<br/>
* data(optional) – {(string|RegExp)=} – HTTP request body.</p></blockquote>

<p>So normally, below simple case is working as expected:</p>

<p>```javascript</p>

<pre><code>$httpBackend.expect('POST', 'http://localhost/timeEntry', 'hello').respond(200, 'Done');
$resource('http://localhost/timeEntry/').save('hello');
$httpBackend.flush();

$httpBackend.expect('POST', 'http://localhost/timeEntry', /te/g).respond(200, 'Done');
$resource('http://localhost/timeEntry/').save('test');
$httpBackend.flush();
</code></pre>

<p>```</p>

<p>However, in real application, the data posted to server is normally in JSON format.  How do we verify JSON data then?  Actually, if we look into the source of the <em>angular-mocks.js</em>, it supports JSON data too although it's not documented.</p>

<p>```javascript
  this.matchData = function(d) {</p>

<pre><code>if (angular.isUndefined(data)) return true;
if (data &amp;&amp; angular.isFunction(data.test)) return data.test(d);
if (data &amp;&amp; !angular.isString(data)) return angular.toJson(data) == d;
return data == d;
</code></pre>

<p>  };
```</p>

<p>So below sample also works.</p>

<p>```javascript</p>

<pre><code>$httpBackend.expect('POST', 'http://localhost/timeEntry', {firstName: 'Ken', lastName: 'Chen'}).respond(200, 'Done');
$resource('http://localhost/timeEntry/').save({firstName: 'Ken', lastName: 'Chen'});
$httpBackend.flush();
</code></pre>

<p>```</p>

<p>As we see, the JSON data validation requires the JSON data posted to be exactly the same as the expect value provided.  How if the JSON data posted is different on each posting, say guid or timestamp field is contained, and we want to verify whether the JSON data is valid based on our special valiation logic?</p>

<p>Here is the hack to make AngularJS take our special validation logic.</p>

<p>```javascript</p>

<pre><code>var Validator = (function() {
    return {
        hasMinimumFields: function(entry) {
            return StringUtil.isNotBlank(entry.id) &amp;&amp; StringUtil.isNotBlank(entry.desc) &amp;&amp;
                StringUtil.isNotBlank(entry.lastUpdateOn) &amp;&amp; StringUtil.isNotBlank(entry.status);
        },
        isNewEntry: function(entry) {
            return this.hasMinimumFields(entry) &amp;&amp; entry.status === 'P';
        }
    };
})();

$scope.desc = 'Hello there';

var data = {
    test: function(data) {
        var entry = angular.fromJson(data);
        return (entry.desc === $scope.desc) &amp;&amp; Validator.isNewEntry(entry);
    }
};
$httpBackend.expect('POST', 'http://localhost/timeEntry', data).respond(200, 'Done');
$scope.saveEntry(); // Let's assume this method will post the data with model $scope.desc
$httpBackend.flush();
</code></pre>

<p>```</p>

<p>The hacking as you see is to take advantage of the <em>test</em> method which the <em>RegExp</em> has and AngularJS uses for data matching.  But when the data is not posted as expected, the Unit Test fails with below message:</p>

<p>```javascript</p>

<pre><code>Chrome 27.0 (Linux) Unit: Controllers Test EntryCtrl should start entry in correct format if only entry desc is filled. FAILED
Error: Expected POST http://localhost/timeEntry with different data
EXPECTED: {}
GOT:      {"status":"P","actualStartOn":"2013/06/08T21:24+0800","desc":"First Unit Test","id":"3849ae1a-4b9c-40be-baa0-60eeaf3af430","lastUpdateOn":"2013/06/08T13:24:44.104+0000"}
</code></pre>

<p>```</p>

<p>This error message is not quite developer friendly and it doesn't tell you much about why it failed at first glance.  However, if we make the test data contain the JSON value too, the expect message would be more meaningful.</p>

<p>```javascript</p>

<pre><code>var data = {
    desc: $scope.desc,
    status: 'P',
    id: 'SHOULD NOT BLANK',
    lastUpdateOn: 'SHOULD NOT BLANK',
    test: function(data) {
        var entry = angular.fromJson(data);
        return (entry.desc !== $scope.desc) &amp;&amp; Validator.isNewEntry(entry);
    }
};
</code></pre>

<p>```</p>

<p><code>javascript
EXPECTED: {"desc":"First Unit Test","status":"P","id":"SHOULD NOT BLANK","lastUpdateOn":"SHOULD NOT BLANK"}
</code></p>
]]></content>
  </entry>
  
</feed>
