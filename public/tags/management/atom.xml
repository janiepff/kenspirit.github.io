<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Management | Thinking in Crowd / 鹄思乱想]]></title>
  <link href="http://kenspirit.github.io/tags/management/atom.xml" rel="self"/>
  <link href="http://kenspirit.github.io/"/>
  <updated>2013-04-27T15:27:51+08:00</updated>
  <id>http://kenspirit.github.io/</id>
  <author>
    <name><![CDATA[鹄思乱想]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[打造 Facebook 读后感]]></title>
    <link href="http://kenspirit.github.io/blog/2013/04/25/review-on-book-inside-the-facebook/"/>
    <updated>2013-04-25T06:10:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/04/25/review-on-book-inside-the-facebook</id>
    <content type="html"><![CDATA[<p>看完<em><a href="http://www.amazon.cn/gp/product/B0060E1LIK/ref=ox_ya_os_product">YouTube 创始人陈士俊自传</a></em>后，很快我又把<em><a href="http://www.amazon.cn/dp/B00ANI5YXW">打造 Facebook</a></em>看完了。但感觉这没上本书过＂瘾＂，我看得更快和粗略。</p>

<p>笔者王淮主要是为外部人士揭秘 Facebook  内部一些流程和机制，包括招聘，人员培养，团队合作，项目流程等。本书内容叙述直白，但略显平淡和笼统。揭秘的 Facebook 流程，其实也和其他一些关于敏捷，管理等文章提及的好的做法没太大差别。这其实也在意料之中，因为核心机密也没可能爆料，加上好的做法本来就那些，关键看怎么做，执行力如何和团队配合，而且最主要是配合不同公司文化，架构和流程作调整。</p>

<p>下面我只抽 Facebook 做得比多数公司好的其它关键说说。</p>

<h2>制胜关键</h2>

<h3>重视内部工具，平台搭建</h3>

<p>可能是和 Facebook 的工程师文化驱动文化也有关，Facebook 内部竟然还有专门的团队负责所有工程师要用的工具和平台的搭建，而且最重要的是这个团队还是被放在最高优先级和重要的位置上，而不是说把二流的人放在那。</p>

<p>这就应该和其他大多数公司很不同。很多公司都是把重心和一流人才放在产品上面，但却不知道这样一个打造工具和平台的团队，其实才是打造公司核心技术，和提高工程师生产率的重要基石。如果一个公司能为项目工程师提供一键搭建环境，和各种提高生产率以及沟通的工具，那这家公司的技术功底和自动化流程做得有多好啊。</p>

<h3>所有人以 Facebook 的整体利益为考虑出发点</h3>

<p>这可不是说那么容易的。特别是大公司，各个部门各自为政，以部门利益为出发点，在人员调配，项目进度安排上可以说是协调的噩梦。每每总要等待各个部门的老大的最顶层上司直接命令下来才能成事。想想中间要花费多少功夫。书中虽然没有提及细节，但好几处都提到和体现这个整体利益。无论在人员换组，项目人手调配，进度安排上，感觉他们都能比较好的处理好，这相当不容易。</p>

<p>作为一个曾经体验过部门之间要人和不放人，被不同 Manager 带过都被打上不同标签和不平等对待的人，真是气不打一处来。当时还是在家小公司啊。还有就是项目组之间如果有依赖，优先级和协调的重要性现在更是深有体会。</p>

<p>在 Facebook 里，整体利益的另一体现就是 Don't reinvent the wheel。  笔者提到的就是他们项目里的核心机器学习的组件，当初考虑到是放在自己支付安全组内还是放在 Anti-Spam 那边。因为那边已经有现成的框架，最后平衡考虑还是放在别组，然后协调和推进。可是很多公司，往往因为只顾部门利益，总想自己造些什么出来显露功绩。即使有现成的东西也不用，造成资源浪费。</p>

<h3>发挥工程师创意</h3>

<p>和 Google 的 20% 自由时间差不多，Facebook 也有内部的 Hackathon 来鼓励工程师做各种好玩的事情，甚至可以推迟项目时间。真是难得。</p>

<h2>八卦</h2>

<p>书里也提到了关于 Facebook 请公关公司炮制散布 Google 负面新闻的事情。Mark 在内部向所有员工说明并要求大家要支持 Marketing 部门，因为它们平常都在保护公司的利益。现在即使犯一点错，也应该得到体谅。</p>

<p>书里也提到 Mark 很在意公司保密的原则，一但有人出错，坚决处理。</p>

<p>这里隐含的意思就有点意思了。Mark 是一个很看重公司机密的人。他也很注意公司团结，员工应该一致向外。个人感觉这件事情上，Facebook 的 Marketing 应该不会在老板没出声的情况下，自己乱来吧？何况书中也说到 Mark 在关键问题的产品把控上是很严的。所以，小人之心猜测那也是 Mark 本人的意思。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[待在优秀的地方，还是把所在的地方改变的优秀]]></title>
    <link href="http://kenspirit.github.io/blog/2012/07/15/stay-in-good-or-change-to-be-good/"/>
    <updated>2012-07-15T17:31:25+08:00</updated>
    <id>http://kenspirit.github.io/blog/2012/07/15/stay-in-good-or-change-to-be-good</id>
    <content type="html"><![CDATA[<p>已经换了工作差不多一年，期间还有幸被派去美国学习所做的系统后台开发，趁着本博客重新启航，是时候回顾一下了。</p>

<p><strong>小公司 vs 大公司</strong></p>

<p>在小公司那么多年来，给我最大的感受就是灵活性强，行动敏捷。再加上本人后来能担当上Team Lead角色，所以，有什么好的想法，自然容易尝试和贯彻。但是公司的敏捷，一但被利用成不断高强度赶项目而忽视了人员培养，代码和框架的改进，团队和系统的问题便不断浮现。这也成为我离开的原因之一。不过，对怎么样推动改变上，我并没有做的很好。在能自己拍板范围外的事，虽然有提意见，但是推动不够，主要都在等领导的改变和决策，主动性还不够强。</p>

<p>来了大公司差不多一年了，最大的感受和没有来之前想象到的差不多，就是沟通成本非常高，行动迟缓。再加上职位上我只是小兵一名，有好的想法，也没法通过“强硬”的手段，推广出去。在哪里体现出迟缓的问题呢？</p>

<ol>
<li><p>问题达成结论难。邮件多，开会部门多，人员杂，是大公司的通病。这其实还不是主要问题。问题是一开始讨论邮件或者开会的人员，在等级或者部门上来讲，大家都是平级的。通常情况是老大级别一般先没有参于，即使有，也是各方的老大，也都在，结果还是打平。在谈一个问题的时候，除非大家对一个问题共识较多，或者各方影响不大，方案比较容易通过。但是如果主要涉及一方要其它各方做更大改变，就不容易出结论了。因为大家平级，不好说一方强行推行。那么最终可能要拉锯一段时间，最后再把老老大拉出来，才能拍板。</p></li>
<li><p>推行改变很难。改变，本来就是很难的事情。想一想睡惯懒觉的你突然要自己每天早起30分钟，跑5圈，你做的到吗？更何况如果是要改变别人，那更难了。再想象在大公司，你要改变的是多少个别人。举个例子，从10月份进公司我问为什么不用Maven，有人答我，可能今年5月，到几个星期前我再抱怨，再有人说8月。现在就放话在这，等等看什么时候实施得了。另一个原因同开会难有定调一样，涉及到影响流程，或某些人员的工作比较大的时候，就一定要有一位拍板的人物了。</p></li>
</ol>


<p>其实无论是软件还是非软件公司，大了，自然不好管了。Yahoo不是也被批官僚气氛严重，甚至连Google也不例外。Agile的提出，其中一个焦点也致于减少沟通环节。我们也引入了Agile，但是，感觉形式多于内容，反而更乱。</p>

<p><strong>如何改变，如何敏捷</strong></p>

<p>个人认为，要做到Agile，很重要的一个思想就是行动迅速，不断反省，找出不完善的地方，加以改正。这里面，非常需要的一个手段，就是试错。但是很多大公司，很难实现Agile的原因，一个原因是人多难协调，行动缓慢，另一个原因就是不敢试错。一般来说，大公司除了客观原因由于子系统杂，多，乱外，更是因为人员求稳，怕担责的思想，不敢随意做改变。怕错了，出问题，承担后果。</p>

<p>之前看了一本David J. Anderson写的关于<a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402/ref=sr_1_1?ie=UTF8&amp;qid=1342343902&amp;sr=8-1&amp;keywords=Kanban+David+J">Kanban</a>的书，个人感觉是非常适合大公司引用来进行流程，甚至是文化的改进的，甚至比Agile更有效。其中一个重要的原因是Agile的推行，一般意味着对现有流程的一次大的变革。如果人员思想跟不上，或者没有抓住重点，流于形式的话，问题更多。反而，Kanban强调的是在现有流程上的不断发现各个部位的瓶颈，不断进行细微改善和调整。里面推崇的Kaizen文化，更是精华：“任何人对流程改进的尝试，即使失败，或者出问题，都不会被追究。” 要做到这点，虽然需要有良好的衡量机制，更重要的是一种开放和允许尝试的文化。当每个人都不必惧怕所谓的承担责任时，甚至鼓励自发的对流程进行改善的时候，力量可是不容小看的。</p>

<p>具体操作上来说，要推行改变，首先要对你提出的东西，有深刻的理解，它的优缺点都要清楚，必须强调改变带来的好处是远大于它的缺点的。因为抵制的人，总会拿它的缺点说事。而且，你也必须要有坚实的论证，才能说服同事，甚至是你的老板。之前看了一本书《<a href="http://www.amazon.com/Driving-Technical-Change-Terrence-Ryan/dp/1934356603/ref=sr_1_1?ie=UTF8&amp;qid=1342343784&amp;sr=8-1&amp;keywords=Driving+Technical+Change">Driving Technical Change</a>》by Terrence Ryan，主要正是教人如何推行改变。最后，当然得期望你上面的领导是英明的，你就事半功倍了。</p>

<p><strong>改变才是永恒</strong></p>

<p>其实，没有哪里可以永恒保持优秀，重要的是如何不断的改变，来追寻优秀。小公司可以变得臃肿，大公司也可以敏捷。重要的是，首先自己要有一颗秉持Kaizen的心，和同一班同样追寻改变和优秀的人合作。</p>

<p>所以，今年我的目标就是"Push for Change; Act as Model” - “推行改变，以身作则”。其实这作为每一年的目标都是正确的，但是，对于现在的我来说，是迫切的。这正是针对自己之前的不足，也是针对目前的环境。问题多的地方，机会才多。这么一段时间以来，我感觉也确实推动了一些东西，无论直接还是间接，甚至方法上可能并不正确，或者为自己留下后患，我都无所畏惧，将继续前进。</p>

<p>可喜的是，新任的Team Lead，对问题上和我有比较一致的看法，也很积极推动团队的前进，感觉非常高兴。同时，可以在他身上，学习如何在大公司内推动改变，确实难得。前景暂时还是光明的，只需要继续努力。</p>

<p>接下来，具体的想改变的事项，我希望能在目前项目的前端开发引入Unit Test，以验证自己对前端开发和测试的想法，以及作为发展自己前端开发能力的一项手段。敬请期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[到底是前进还是后退？]]></title>
    <link href="http://kenspirit.github.io/blog/2012/02/05/forward-or-backward/"/>
    <updated>2012-02-05T02:07:56+08:00</updated>
    <id>http://kenspirit.github.io/blog/2012/02/05/forward-or-backward</id>
    <content type="html"><![CDATA[<p>自从我离开旧公司以来，都有旧同事问我新公司这边有没有什么好的职位。</p>

<p>一开始，其实都系正常，因为问我的人，都已经在那做了和我差不多那么多年，甚至都还是第一份工作。所以，希望出去闯闯也理所当然。但是近来，好像人数还有增多的倾向，而且是服役多长时间的都有，有扩散的倾向。这还不是让我最担心的，更重要的是，从每个人身上，我都听到些怨言。这样，感觉情况就不妙了。</p>

<p>我走的时候，就听说公司，上至大老板开始更加重视起和员工的沟通，员工培养上面来。</p>

<p>本想我走了后，可能还真是做了件好事，但为什么所谓“更加重视员工”的做法还会引起那么多怨言和激发人员要走的想法呢？</p>

<p>拿我听到的两点来说吧:</p>

<p><strong>1.  加薪方面</strong></p>

<p>本来人员流失后，加薪是正常和需要的，尤其是我之前还在职并还能发表一下意见的时候，已经和上层说过这个问题了。公司开发部中层方面（3年左右）的人员，薪酬水平有点偏低的。但我听到的很多怨言，都说这次加薪幅度，很多人都不满意。估计主要是中层加的不多。像一些做了5年以上的，公司里非常重视的少数，好像并没太大声音听到，因为我也知道有一些加的好像真不少，我也和他们说其实公司对他们已经很不薄，不要以为外面真的高很多而跟风轻率跳槽。</p>

<p>所以我感觉，可能中层普遍加的都并不多，薪酬集中到某些人上面去了。这里是一个问题，因为感觉公司以前一直有一个想法就是，最重要的那么年资老的，能干活的人，保住就行了。其它人就无所谓了。反正有老员工带着干。</p>

<p>其实这样的想法是错误的，会引起下面的问题。要保住和发展公司，不是只要有老员工就行的了。</p>

<ul>
<li><p>新员工感觉不受重视，没发挥空间。因为上层，也只认得老员工，有事也找他们。新员工Turn over太快。其实这也和上层缺乏和下面的员工进行沟通有关。我就听一个新员工说过：“我们这些新人，其实都不重要，都是堆砖头的，老员工在就行了。”</p></li>
<li><p>老员工经常要带新员工，但因为他们流动太快，老员工都有培训疲劳症了。公司的产品本来是有一个比较好的框架的，做的事情，一部份是重复性劳动，一部份是业务逻辑或复杂的customization。如果一直要老员工培训新人来做重复性的劳动，老员工就会很烦，而且因为项目紧还要忙于处理剩下的部分，还没有时间去改进框架和产品。框架很快就被毁了。</p></li>
<li><p>公司总不招一些有经验的人，这样，老员工学习新知识，新文化只能靠上层，或者自学了。可是，因为忙，基本哪还有时间，有时周末都还要加班。上层也少和下面的沟通，更不要说创造培训的机会了。这样，久而久之，老员工感觉学不到东西了，你工资又不比别人有吸引力，那为什么还要留着呢，更何况连本来保留着的一些感情，还被一些人，一点一点的摧毁了。老员工的流失也成了必然。听一个老员工说，他临走前问上层为什么不招有经验的人，那个竟然答，我们不需要有经验的，进来还不是要教他？我真是无语了。</p></li>
</ul>


<p>还有另一方面是，有人说这次加薪幅度不高，但是搞了个什么类似奖金的东西，就是做满一年后，会再拿到双薪外可能多一个月左右的工资吧。但据他们算过以后，觉得如果分摊到每一个月现拿，才差不多达到他们觉得理想的水平。所以普遍让人觉得，又想让人留下，又一点诚意都没有。</p>

<p>其实这种压后拿钱，和别人给个什么期权是一样道理，是有用的，但要看什么时候。如果别人都很不爽了，或者觉得你没有前途了，还要来干什么呢？所谓乱世用重典，重要时候，一定要用让人一击即倒的手段，让人无法拒绝，而不是还谈什么感情，理想的。过年那段时间，我刚好看了一本关于人脑学习特性的书(Brain Bugs)里面有说到，人普遍来说是比较看重眼前利益的，你说现在得到20元，或者一个月后拿到40元。基本都是选现拿的。因为远期目标并不多多少，而且还要看你说话算话不。所以，如果真如我听到的，要等上一年，而且即使现在分摊出来，才是理想的价格，可以说是没有多少吸引力的。</p>

<p><strong>2.  请假方面</strong></p>

<p>听说现在请假很不容易，要提前一个有，还真有人被reject了，可能多是一两天那种情况吧，我不知道是真的那么忙呢，还是专门出这种政策来防人出去面试找工作的。如果真是后一种情况，还真是脑残做法。所谓上有政策，肯定下有对策，请个病假不就行了，还不用提前说呢。退一步说，如果真是那么忙，据我所知，以前一起工作的同事，基本和我熟悉的，每个人工作都是很负责任的。有需要的话，晚上周末自觉加班，过年过节被点名要开电话或加班，最多抱怨一下，也还是这样。到真有事要请假，相信也是有急事，事后也会补回来。再退一步说，现在公司那么多怨言的情况下，还出这样的政策，真是还怕不够多吗？想走的人，真不爽了，没找到新工作，也会走。真搞不懂他们是怎么想的。</p>

<p>之前，我在LinkedIn里还看了两篇文章：</p>

<p><a href="http://www.linkedin.com/news?actionBar=&amp;articleID=5562842806801670153&amp;ids=cPATdjAPe3wSdj0PczkMd3oRdiMPczcNd3AMdz0Sd30MdjsOdzkRb34Me30Rdj8Scj8Uej0Vej8SdjkIcj8Td3gRej0UdzoOc3AQczoRdiMPdj4MdPoNc3wSc3wOd3wOdzkR&amp;aag=true&amp;freq=weekly&amp;trk=eml-tod2-b-ttl-0&amp;ut=2yCqJXsKqFql41">Six Reason Why You Should Give Your Employee a 4-Day Week</a></p>

<p><a href="http://www.linkedin.com/news?actionBar=&amp;articleID=1026708525&amp;ids=cPsOdzoVdj8MciMTdzcScPoVdzATe3wTcj4NdzkRb34Tdj8PcjgOc34Idj8Re30Tdz8MciMPcPsMe3sMcz0N&amp;aag=true&amp;freq=weekly&amp;trk=eml-tod2-b-ttl-1&amp;ut=0D2UlrYgjNgR41">Why You Should Give Your Employee Unlimited Vacation</a></p>

<p>里面其实说的都是为什么这样会更尊重员工，减少公司成本，激起员工工作热情，还可以从中找出积极向上的人。其实想起来何尝不是呢？想起我们平时不是有很多假期都没有放，要堆到年后才清吗？放个长一点的假，其实也是觉得无聊，想干活了。其实有些时候，放松了，可能更好管。</p>

<p>本来既然已经离开，就不好再说什么，但是看到这种情况，还是忍不住要发泄一下。也不知道那些那么另人不爽的政策，是不是又是那个人想出来的。真是“成也萧何 败也萧何”。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[9种比钱更好的激励员工的方法]]></title>
    <link href="http://kenspirit.github.io/blog/2011/12/17/9-things-that-motivate-employee-more-than-money/"/>
    <updated>2011-12-17T00:24:26+08:00</updated>
    <id>http://kenspirit.github.io/blog/2011/12/17/9-things-that-motivate-employee-more-than-money</id>
    <content type="html"><![CDATA[<p>激励员工的士气</p>

<p>最近看到篇文章：“<a href="http://goo.gl/ushlH">9种比钱更好的激励员工的方法</a> (9 Things That Motivate Employees More Than Money)”。</p>

<p>第1、6点，展示了公司的高层有没有真正的关心过下属，是真的把他们做的事都看在眼里，放在心上，还是只是说说而已。表扬不应该是空泛的，应该很具体，让下属知道，原来我的老板真的看在眼里，知道我在做什么的，还肯特意抽时间和他吃饭，谈话。如果真的关心，员工是感觉的到的。很多别的都是浮云。说到底，还是有没有心，就像关心自己朋友，家人一样。</p>

<p>第2、3、9，其实还是让员工有“当家做主”的感觉，把他和公司联系在一起。生死共存。尽量减少中间层管理人员，也是希望减少一种被命令的感觉。</p>

<p>下面是译文：</p>

<p><strong>别简单的向他们展示钱(即使你有). 下面有9种更好的方法来提升士气.</strong></p>

<p><strong>激励员工的能力</strong>是一个企业家需要具备的最重要的能力之一. 两年前, 我认识到我并不具备这种能力. 所以,我请了一个有这种能力的CEO.</p>

<p>Josh在企业界已经有12年的经验, 包括在Comcast公司运营一个重要的部门. 我知道他已经很老练, 但一开始的时候我还是对他有点怀疑. 当时我们正在经历一些成长的危机, 我认为我们并不充足的现金非常难提高公司和员工的士气.</p>

<p>我错了.</p>

<p>在他和他任命的团队领袖的帮助下, Josh不单单重建了公司的文化, 还打造了一个充满激情, 奋力拼搏的团队. 而这正是我希望致力于为发展和改善公司想做的.</p>

<p>下面是我从他身上学到的9件事:</p>

<ol>
<li><p><strong>不要吝惜表扬.</strong> 每一个人都渴望得到表扬, 而这也是最容易做到的一件事情. 再说, 从一个CEO那得到表扬, 比你想像的要有效得多. 为你的团队成员取得的任何改进提出表扬. 当你适应了一对一下为员工提出表扬, 你可以尝试在其他所有人的面前表扬那些值得表扬的人.</p></li>
<li><p><strong>把管理人员都去掉.</strong> 项目里没有项目经理? 不对吧! 请试一下. 我明白把项目经理或管理人员去掉, 让你的员工以一个团队的形式紧紧的工作而不是向某一个人汇报的做法会有点让人怀疑. 请想一想. 比让你的管理人员失望更糟糕的事情是什么? 是让你的团队失望! 让一个团队的人平等的于同事一起工作, 项目通常会做得更好更快. 他们会很早来到办公室, 留得很晚, 并把他们所有的精力集中在解决问题上面来.</p></li>
<li><p><strong>把你的想法变成是他们的.</strong> 人们都不愿意被人命令做事. 与其告诉别人你想做不什么出来; 通过一些方式让他们觉得你提出的要求好像是他们自己想出来的一样. “我想你这样做”可以说成”你不觉得如果我们这样做的话更好吗?”</p></li>
<li><p><strong>绝不批评或纠正.</strong> 任何人, 是的, 我说的是任何人, 都不愿意听到别人说他们做错了. 如果你在找一个打压士气的人, 这就是了. 要尝试一种委婉的方式让人们去提高, 从他们的错误中学习, 并解决问题. 你可以问:”这是解决问题的最好办法吗?” 这种情况下,你们是在谈论解决方案的对话中, 而不是互相指责.</p></li>
<li><p><strong>让所有的人成为领袖.</strong> 指出你下面的最出色人员的强项, 并让他们知道正是因为他们的出色表现, 你希望他们成为其它人的榜样. 这样, 定出高标准, 那他们自然而然得被激励并为了保持作为一名领袖的名声而努力.</p></li>
<li><p><strong>一星期带一名员工出吃午饭.</strong> 让他们得到惊喜. 别发公告来说明制定出这样一个政策. 走到一名员工面前, 然后邀请他和你共进午餐. 这是非常简单的方法让他们知道你有关注和感激他们的辛勤工作.</p></li>
<li><p><strong>认可并给于奖励.</strong> 这两件事有很多形式: 大声在公司会议点名说出他成功的为公司做了什么事情. 比赛或举办游戏并把结果记录在白板上,让任何人都可以看到. 有形的奖励也行, 但别太昂贵了. 尝试一些事情像晚餐, 奖杯, spa服务和牌匾等.</p></li>
<li><p><strong>举办公司派队.</strong> 以一个团队来做事情可以维系一个团队很长时间. 举办公司郊游活动, 生日派队, 快乐时光时间. 别只是等到节假日才举办公司活动. 一年内不间断的举办活动可以让你的员工知道所有人都在一起.</p></li>
<li><p><strong>分享荣誉和痛苦.</strong> 当你的公司表现好的时候,庆祝. 这是最好的时间来让所以人知道你感激他们每一个人的辛勤劳动. 当人们帮助你的公司成功的时候, 尽你的最大努力让人们知道你是会怎么来感激他们的. 如果有什么让人失望的事情, 同样于所有人分享. 当你期望有很好的表现的时候, 你的团队应该知道公司当前的位置. 要坦白和透明.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发团队领袖可能会犯的十个错误]]></title>
    <link href="http://kenspirit.github.io/blog/2011/08/04/10-mistakes-software-team-lead/"/>
    <updated>2011-08-04T11:18:37+08:00</updated>
    <id>http://kenspirit.github.io/blog/2011/08/04/10-mistakes-software-team-lead</id>
    <content type="html"><![CDATA[<p>昨天看到一篇文章不错。写出很多之前我在公司看到了一些团队的情况。</p>

<p>作为Team Lead，我觉得我做的最不够的就是Protect them from project manager。</p>

<p>下面是翻译过来的文章。省略了开头一点玩笑话。</p>

<p>Adam Roy开场通过提出以下几个团队领袖可能有的一些疑问带出主题。这些疑问是:</p>

<ol>
<li><p>我如何说服的我团队做xxx</p></li>
<li><p>我该拿团队里的那个专门搞事 的家伙怎么办?</p></li>
<li><p>我该如何做一个团队领袖呢?</p></li>
<li><p>我们为什么无法远离无谓的争吵呢?</p></li>
<li><p>我会不会失去朋友呢?</p></li>
<li><p>…</p></li>
</ol>


<p>他说这些问题其实缠绕他多年，而在接下来的讲座，他也逐一做出解答。他正在写一 本叫《开发团队领袖手记》的书，里面也涵盖这些方面的内容。</p>

<p>下面就来说说这十个错误:</p>

<p><strong>#1 </strong><strong>没有</strong><strong>认识</strong><strong>到</strong><strong>团队</strong><strong>的成熟度</strong>****</p>

<p>这点是首要注意的地方因为后面谈到的问题都是回顾到团队成熟度。Roy说，可以从3个层面来评价一个敏捷团队的成熟度。</p>

<ol>
<li><p>混乱</p></li>
<li><p>学习</p></li>
<li><p>自我引导</p></li>
</ol>


<p><strong>混乱</strong></p>

<p>一个混乱的团队就是哪都觉得很忙。  可能他们总是在争吵，或一直都被要求在非常有限的时间做太多的事情。但其实结果都一样－－混乱。没有人有任何时间变得有条理，没有人有任何时间学习新的知识因为他们一直都在忙这忙那。  如果你问我的话，这个团队明显成熟度不高。因为所有人，要么耗尽精力，要么感到沮丧因为缺乏机会学习，而最终好的人都会离开。但是，Roy说这种混乱其实非常常见，而我也很赞同。如果你是在这么一个混乱的团队里当领袖，秘诀就是要正确的行动起来。你必须自信和强势。</p>

<p><em>      <strong>当船快要沉的</strong>时<strong>候，你需要的是一个</strong>发<strong>号施令的</strong>领<strong>袖，而不是开会。</strong></em></p>

<p>一个混乱的团队里的领袖，必须坚定立场，而且可能必须要和领导层说清楚，整个团队并不能把他们要求的所有的事情都完成的了。这是一个艰难的角色。他必须坚定的做出一些艰难的决定。</p>

<p><em>       <strong>管理要做得</strong>对<strong>，做得好是一件很</strong>艰难<strong>的工作。</strong></em></p>

<p>但为什么作为一个团队领袖，你必须自己做出这些艰难的决定，而不是和团队商讨呢？ 答案很简单，因为没有足够的时间。 通过你自己做出这些执行上的决定，你让你的团队得到一些喘息的空间，可能也就是这些空间让他们把手上的事做完。当然，可能有些你做的决定是错的。这没关系，人生就是这样。但这是为了更重要的正确的事情，也就是让你的团队有成长到另一个层次的空间，一个不断学习的团队。</p>

<p><strong>学</strong><strong>习</strong>****</p>

<p>这个层面的成熟度是团队自我管理的升华，但是团队成员还是有需要得到指导的。 一个团队领袖必须持续不断的为他的团队成员带来一些挑战，和质疑，甚至可能是功课。 目标就是让团队里的成员每周都有进步，开始学会解决自己遇到的问题。</p>

<p><em>       <strong>所以，你要怎么做？</strong></em></p>

<p>作为一个学习成长的团队里的领袖，你要让团队里的成员学会以解决自己遇到的问题，然而成长为自我引导的团队。 如果某一个人带善一个问题来找你，你应该鼓励他们自己想办法解决，并问“你会怎么来处理这个问题？” 来强迫他们思考。</p>

<p><strong>自我引</strong><strong>导</strong>****</p>

<p>成熟的第三个层次就是自我引导型的团队。  这是我们所有人都想去到的地方。 在这样的团队里面，领袖更像是一个导师。他不需要像在一个混乱的团队里那样为团队做各种执行方面的决定或告诉人们该做什么。但即使是在一个自我引导的团队里，团队领袖还是需要最少50%的时间在团队上面。</p>

<p>所以，第一个错误就是不能正确认识到你的团队是在什么成熟度，也因此不能够正确的领导你的团队。如果你当他们是自我引导型的团队在运作，但其实他们事实上还是在混乱的状态，那么不久你就会在一条河上像没有浆似的乱窜。</p>

<p><strong>#2 </strong><strong>惧怕下放</strong><strong>责</strong><strong>任</strong>****</p>

<p>如果你常常习惯自己一手包办，可能要你下放责任给其它人是比较不容易接受，尤其是你觉得其它人并不能把事情做好的时候。</p>

<p><em>如果每个人都<strong>对</strong>目前手上做的事情都感到很舒服，没什么挑<strong>战</strong>的<strong>时</strong>候，就是你做的不<strong>对</strong>的<strong>时</strong>候了。</em>__</p>

<p>当你要下放责任的时候，你必须习惯让他人去承担那些本是你自己做的事情的责任。 这些外加的责任，会把他们拉出那个安全区，这是一件很好的事情。 适时挑战一下你的团队和拉他们出安全区才可以让他们成长。</p>

<p><strong>#3 </strong><strong>惧怕参于</strong>****</p>

<p>这一般来说是沟通不够有效，但Roy谈得更深入。</p>

<p><strong>#4 </strong><strong>安</strong><strong>抚</strong>****</p>

<p>公共要素(Bus Factor) － 这是什么？ 公共要素指的就是那些会导致整个项目停滞不动的人员的数量，假如他们同时被公车撞了的话。这其实说的就是某些个体掌握太多信息。我看到太多地方有这种情况，无论是好的还是坏的项目。 所以我觉得这很正常。但Roy提到的是你不应该只安抚这些个体就因为他们掌握了大量重要的对项目的了解。 你对待一个公共要素为1 (也就是说他一个人如果被公车撞了的话，项目就倒了) 的人应该和别的任何一个人一样。 我非常喜欢在人身上定义一个公共要素的主意，因为它让我注意到六度分离理论值(Kevin Bacon Number)。</p>

<p><strong>#</strong><strong>5</strong><strong> </strong><strong>疏远</strong>****</p>

<p>这个应该是说由于太多的会议或邮件等烦杂事情要处理，导致基本上和整个团队实际的工作脱节了，最终疏远了。这个和六度分离理论没有关系。</p>

<p><strong>#</strong><strong>6</strong><strong> </strong><strong>太合理了</strong>****</p>

<p>不确定我是否同意这个术语但Roy的意思是认为所有人都能清楚明白你说的意思但实际上你并没有把自己的观点阐明是太合理了。我想这点的关键是说当你和一群人相处，尤其是对一个敏捷团队来说，假定他们拥有和你同样的知识水平和理解力是不正确的。你应该用最合适的方式去沟通，而不能做太多的假设。</p>

<p><strong>#</strong><strong>7</strong><strong> </strong><strong>责备</strong>****</p>

<p>如果你认为某个人是垃圾，那你就会有意无意的以这个为借口，不让他参与到团队的事务上来。这世界上总有这样的垃圾人物，但你所要做的是了解他们的短处，并把他们提升到整个团队的水平，而不是疏远他们，因为这样就意味着一直背负这些沉重的包袱。</p>

<p><strong>#</strong><strong>8</strong><strong> </strong><strong>忽略影响行为因素的力量</strong>****</p>

<p>你必须认识到那些会作用到个人身上的行为因素的力量和知道它们是如何影响个人的。主要有这么三种行为因素：</p>

<ul>
<li><p>个人</p></li>
<li><p>群体</p></li>
<li><p>外界环境</p></li>
</ul>


<p>所有这些因素都会影响到一个团队是否能够成功。所以你必须找到有没有什么因素正在影响团队的敏捷度。其中一个外界环境的因素可能是硬件设备不足够支撑你所需。比如说你没有预算添置一台持续集成的服务器，那你几乎永远无法变得敏捷起来。</p>

<p><strong>#</strong><strong>9</strong><strong> </strong><strong>惧怕</strong><strong>太独断</strong></p>

<p>很明显这在英国和挪威是很普遍的，但在丹麦不适用。我敢打赌你不知道。但这据称是真的。独断，就是坚定自己的立场并拒绝任何你感觉不能接受的事情。如果你是在一个处于混乱状态下的一个团队里面，那你必须非常独断。在一个处于混乱状态下的一个团队里面，惧怕独断是致命的。</p>

<p><strong>#</strong><strong>10 </strong><strong>散播不做承诺的风气</strong></p>

<p>这里说的是模糊其词。Roy说你应该任何时候都对项目期限负责。当你对团队谈论的时候，确保他们也告诉你每个任务的具体完成时间。很明显，让他们作出承诺，他们会更有激情的完成任务。Roy的建议是当你开会结束的时候，并问每一个人他们下一步要做的事情是什么，确保他们的回复是什么时候前做完什么事情。但是，任何人都只应该承诺他控制范围内可以完成的事情。承诺一些要别人替你完成的事情是没有意义的。还有，一但你发现你无法按时交货时，让整个团队的人都知道，他们可能有办法帮忙并让你及时完成任务。</p>

<p><strong>问题和解答</strong></p>

<p>下面这些问题和解答其实持续很长时间才得出。我用bullet表单总结了一下，因为bullet的样式非常好。</p>

<ul>
<li><p>你需要认识到你什么时候需要转换领导形式 ―― 你必须停止用一个在混乱模式的团队下的领袖角色来领导一个成长型的团队。</p></li>
<li><p>没有一个所谓的既混乱又成长型的团队。这两者是不可共存的，但是一个团队会从一种形式，转换为另一种形式。</p></li>
<li><p>跨不同地域的团队不能像在同一地方的团队表现好。如果你是这样的事实情况下，你要做的是改变现实。</p></li>
<li><p>敏捷团队应该是两个Pizza的团队。也就是说，只够两个Pizza可以喂饱的团队。</p></li>
<li><p>好的团队是成长起来的，不是雇佣来的。</p></li>
<li><p>Scrum有时并不适用于一些混乱模式下的团队。</p></li>
<li><p>团队领袖和经理其实并没有不同如果他们是同一个人。其实他们也可以是同一个人。</p></li>
<li><p>如果你的团队处在混乱模式，你从项目经理应该保护他们。</p></li>
</ul>


<p><strong>相关书籍</strong></p>

<p>Managing Teams Congruently – Gerald M Weinberg</p>

<p>Behind Closed Doors – Johanna Rothman</p>

<p>Influencer (The Power To Change Anything) – Patterson et al</p>

<p>Succeeding With Agile – Mike Cohn</p>

<p>原文链接: <a href="http://agile.dzone.com/news/10-mistakes-software-team">http://agile.dzone.com/news/10-mistakes-software-team</a></p>

<p>By Roy Osherove</p>
]]></content>
  </entry>
  
</feed>
