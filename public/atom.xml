<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Thinking in Crowd / 鹄思乱想]]></title>
  <subtitle><![CDATA[Swan flying in the immense sky]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.thinkingincrowd.me/"/>
  <updated>2016-03-05T12:25:18.228Z</updated>
  <id>http://www.thinkingincrowd.me/</id>
  
  <author>
    <name><![CDATA[鹄思乱想]]></name>
    <email><![CDATA[chengusky@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[有经验和没有经验的程序员的区别]]></title>
    <link href="http://www.thinkingincrowd.me/2016/03/04/Novice-vs-Experienced/"/>
    <id>http://www.thinkingincrowd.me/2016/03/04/Novice-vs-Experienced/</id>
    <published>2016-03-03T17:30:45.000Z</published>
    <updated>2016-03-03T23:55:40.000Z</updated>
    <content type="html"><![CDATA[<p>近来我一直都需要带些毕业生（怎么我的队伍就那么多新人呢，呵呵），发现很多人在解决问题的方法上都存在一些问题。解决问题，其实是每个程序员每天都在干的事情。但是方法好还是不好，我觉得正是有经验和没有经验的程序员之间很重要的区别。刚好最近又看到了余晟公众号（yurii-says）的《砍伐大树 v.s. 收割庄稼》里面阐述的解决问题的四个步骤。所以，我想根据身边的案例详细一点解释一下这四个步骤。</p>
<h2 id="认识和定位问题">认识和定位问题</h2>
<p>一般来说，新手进入一个公司和团队之后，team lead 会分配一两个简单的任务让新人练练手。所以，首先要做的事情就是搭环境，和认识已有的系统和代码。</p>
<p>在搭环境和做任务的过程中，新人经常遇到问题或异常后就蒙了，不知道怎么继续下去。然后就求救说：“出错了，怎么办？”。我都会反问一句：“哪里出错了？你定位到问题在哪里了吗？”。可是一般收到的答案都是“不知道”。像我们公司的系统架构，把后端分了两层，一层专门服务于表现层，另一层专门访问数据库和提供 web service。系统的架构就简单如下图所示。如果在浏览器发起的一个 Ajax 请求有异常返回，那异常到底是在哪一层，或者是哪一个传输环节？如果在传输环节可能是因为对象类型，属性不一致导致。如果在 Domain 层可能是业务逻辑，数据库操作出现问题等。</p>
<p><img alt="Company System Architecture" src="http://77g8zm.com1.z0.glb.clouddn.com/company_system_architecture.png"></p>
<p>​认识和定位问题的能力应该是程序员技能宝典里面的 101，并且是要持续修炼的能力。<strong>看日志</strong>和<strong>看代码</strong>是获取这种能力的两种最基础的手段。</p>
<h3 id="看日志">看日志</h3>
<p>在没有源码的情况下，看日志可以说是唯一定位问题的方法了。再说，即便有源码，也不可能全都看一通，或者顺着源头一直 debug 下去，直到遇到问题为止。所以，定位问题的起点一般都是先看日志。</p>
<p>日志来源基本可以分为几大类：</p>
<ol>
<li>程序：项目代码  </li>
<li>框架：团队或者公司内部框架，因为不少公司还有专门制造内部轮子的部门  </li>
<li>中间件，外部组件：广义地指所有外部的组件，包括数据库，Web 服务器，Application 服务器，以及云平台等。  </li>
</ol>
<p>一般来说，我们都先从第一种着手。因为一个好的项目，第一大类的日志应该是要把内部框架和所有外部系统组件的异常都封装好。异常处理设计的好，从这里的日志出发就可以较容易地追溯至真正问题所在。可是如果看完第一大类的日志都没能确定问题的原因，很可能是自身项目没有做好异常的捕捉处理，把外部系统或组件的异常给吞吃和隐藏了；又或者是因为一些运行时异常没有被捕捉到，然后就被写到外层的框架或者容器的日志里，比如说 Weblogic/Tomcat。</p>
<p>所以，经验首先就在于懂得在什么地方找日志；先看什么，后看什么；以及在项目自身日志不健全情况下，如何寻求第二或者第三大类的日志，看出错时间点的前后到底有什么信息可以帮助推断真正问题所在。</p>
<h3 id="看代码">看代码</h3>
<p>当定位到要改动的源码的位置时，很多新人面对着一个从未接触过的庞大的项目代码库，在 IDE 里面跳转多几次就乱了。他们遇到每一个方法调用都想进去看个明白。但是，一开始就想看懂整个系统的代码是不现实的。除了代码量庞大，或者找不到源码作者咨询以外，我们可能还有时间的压力，必须尽快找到问题和解决方案。那么，我们就必须有<strong>猜代码</strong>的能力。如何忽略细节，不迷失在茫茫代码海洋里，迅速定位和看懂自己的任务需要涉及和修改的代码是哪一块，是非常重要的。就像浏览文章一样，找段落大意，猜不同的代码大概是完成什么功能，然后再决定是否应该深入去研究某一块，而不是一次搞懂所有的代码。</p>
<h2 id="认清问题">认清问题</h2>
<p>其实就是<strong>知其然，知其所以然</strong>。</p>
<h3 id="从技术上来看">从技术上来看</h3>
<p>准确定位到问题或者异常发生在什么地方了，并不代表要修改的代码就是且只是那一块。我们不能头痛医头，脚痛医脚。</p>
<p>比如说，我们对外提供的一个 Web Service，因为浏览器或者调用方传的参数不全，报了 NullPointerException，我们要怎么改？改调用方还是提供方？首先，根据健壮性原则，也就是 <strong>Postel’s law</strong>，看起来应该是改提供方这边：</p>
<blockquote>
<p>Be conservative in what you do, be liberal in what you accept from others</p>
</blockquote>
<p>但是，除了改提供方，我们还要考虑为什么调用方会提供少了一个参数，是所有的情况下都少了吗？还是某一些场景才会？尤其是当调用方是从一个具有复杂的业务操作逻辑的页面过来的时候，我们更需要全面分析。这才不至于说见一个洞，补一个洞，其实还漏了几个洞。</p>
<h3 id="从做产品或者功能设计来看">从做产品或者功能设计来看</h3>
<p>明白用户的功能使用场景和背后的动机，是产品功能的设计，如何取舍技术难点等的重要决策依据。</p>
<p>举个栗子，船运公司的单据录入部门其实有一份标准的操作指南。录入人员要根据托运人是谁，运什么货，从哪运到哪，要不要报关等一大堆的信息，决定应该怎么录入单据。那份操作指南其实就像一个问答系统，或者更像是一颗决策树一样。从成百上千种分门别类，如货物，航线，费用，报关等的问题找到那对应的决策路径来获知最后该怎么做。</p>
<p>那么，如果我们要做一个指南维护页面，怎么让用户容易找到他想要修改的条目，和清晰展现出来就要有一些考量了。对查找这个功能，开发人员一开始把那些门类和问题都做为下拉框展示出来以作为查询条件，并且还算聪明地实现了级联过滤，不至于用户因为门类和问题数目过多而不好找到他想要的东西。但是用户反映说那个问题的下拉框不能有级联。为什么？原因其实是有些问题是通用的。它们有可能出现在很多门类当中。所以，一种场景是他们已经知道要改的是某一个具体的问题，他想找出相关的所有门类。那么，我们把问题那个下拉框做成级联，他们就悲剧了。因为他们根本就不知道什么门类下有那个问题，怎么可能要求他们先选好门类，再选问题来查找呢？就问题这个下拉框，换另一种思路，做自动补全，让用户输入关键字就能过滤就好了。</p>
<h2 id="可行性分析">可行性分析</h2>
<p>在定位好问题和界定范围后，下一步就要看能采取什么方法来解决问题。</p>
<p>拿最近让新人做的一个开发任务来说吧。有一个页面，需要把数据库的数据，按照树的结构渲染出来和进行数据维护。这里，我们要考虑的东西有什么呢？</p>
<ol>
<li><p>页面生成树要用什么前端技术，它的特点是什么？它生成树形结构的表现形式时，需要的数据结构是什么样的，是不是就是对应的树状数据结构还是没有要求？对树的结点进行页面上的操作时，数据就会自动更新吗，还是说我们要另外再独立更新数据？</p>
</li>
<li><p>页面的数据结构和数据库的结构一样吗？中间要经过多少次的转换？转换放在前台还是后台做？页面到底有一些什么业务操作，以及这些业务操作其实最后反映到数据库层面的形态是什么样的？界面操作后如何把信息带回后台，要带回什么数据（比如 ID，操作类型标记等）?  </p>
</li>
<li><p>后台的数据更新逻辑是怎么样的？每次更新都需要整颗树的全部信息进行全量更新吗？</p>
</li>
</ol>
<p>动手编码之前，对这些问题有初步的认识是相当重要的。有初步的想法之后，怎么做才能用最少的时间和精力来验证是否可行？如果还没有搞清楚，一下子就上手编码是很危险的。这个开发任务，也正是因为上面说的某几个方面没有做好，中间一些实现推倒重来了几次，进度比预期长了很多。</p>
<p>另一种非常重要的情况就是，我们想到或者碰到的技术难点，可能在实际应用场景根本碰到的情况就不高。如果避开那种场景来考虑的话，系统设计和实现方式可能就大大不同了。对于怎么舍弃一些技术细节问题，曹政的公众号（caozsay）的《如何应对并发(3) - 需求裁剪》就针对一个案例说得很清楚，大家可以看看。</p>
<p>还有，可行路径的选择，当然也受计划的影响。一个月，还是三个月时间的实现方案当然会有所不同。</p>
<h2 id="估算">估算</h2>
<p>估算和可行性分析其实密切相关。只有经过充分的可行性分析，估算才相对有意义。我觉得不是说有经验的人，估算的时间就比较准。而是有经验的人大概知道什么地方有坑，把上面的可行性分析和任务拆分做得更细，考虑得更全面一些。</p>
<p>其实人对时间的估算是非常不准确的，也不应当仅仅依赖于时间估算来做计划或者确定项目期限。我个人对估算的想法在之前写的 Kanban 系列里面有一篇文章也讲了一下。有兴趣可以看看。</p>
<ul>
<li><a href="http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/" target="_blank" rel="external">Dive into Kanban (3) - How Kanban address the estimation headache</a></li>
</ul>
]]></content>
    
    
      <category term="Experience" scheme="http://www.thinkingincrowd.me/tags/Experience/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何授权和分配工作]]></title>
    <link href="http://www.thinkingincrowd.me/2016/01/31/How-to-delegate/"/>
    <id>http://www.thinkingincrowd.me/2016/01/31/How-to-delegate/</id>
    <published>2016-01-31T07:43:05.000Z</published>
    <updated>2016-03-05T12:24:58.000Z</updated>
    <content type="html"><![CDATA[<p>最近在看李笑来推荐的《领导梯队》。其中描述了从管理自己到管理他人的转变，其中一项不容易适应的事情是要懂得授权和分配工作。</p>
<p><strong>懂得授权和分配工作是成为管理者道路上要习得的首要技能</strong>。因为这点非常重要，并且是不少人第一次从个人贡献者转变成一线管理者时做得不好的地方。</p>
<h2 id="目的">目的</h2>
<p>授权和分配工作任务其实只是手段。这样做的最主要的<strong>目的是多人协作，达成目标并同时提高每个人的能力</strong>。</p>
<h2 id="心态">心态</h2>
<p><strong>人要适应变化，首要必须是心态上的调整和适应</strong>。很多人没法把一件事情做好，很多情况下是因为心态没有改变过来，而不是他没有那种能力。其实如果能把握好上面说的目的，心态已经是调整好一大半了。</p>
<p>在个人贡献阶段，每个人基本只要为自己做的事情负责，做得又快又好就行。这个阶段对个人硬技能的修炼提高是比较明显的。所以，个人也能比较容易得从中获取安全感和成就感。</p>
<p>一旦个人能力提高到一定程度，很多公司就很自然的让他领导或者管理他人一起做事情了。那么，他用自己的专业技能来做事的时间比例就会减少，有相当一部分，甚至可能是大部分的时间都要花在管理和协调上面。</p>
<p>这种转变其实对个人的心理变化会有很大影响。因为，这意味着他要舍弃熟悉和一直依赖的专业技能，去做一些虚而杂的管理，心理安全感上面会有很大的压力。特别是近年来全球都推崇组织扁平化，削减不必要的层级，还有一些管理人员失业后不好找工作的消息，让不少刚上升或准备上升一线管理的人都心有顾忌，放不下自己的专业技能。所以，很多人对这种转变是心有抵触的。</p>
<p>但是，软件开发领域，一旦涉及多人协作，少至两人，尤其当你是担当组织领导这样的角色的时候，必须懂得如何授权和分配工作。并不是说你一定是成为管理者后才要习得的技能。</p>
<p>再说，这样做对自己也有很大的好处。你可以把自己熟悉，但是对别人来说有挑战的工作交给别人尝试，然后自己腾出时间来做更有挑战的工作。但是，这并不意味着授权和分配工作就是把自己厌恶的工作交给别人做。下面会说到这个问题。</p>
<p>那么我们要如何授权和分配任务呢？<strong>授权，首要的是要能放心</strong>。如果你的下属，没有一个能让你放心的话，是没法授权的。放不下心是很多管理人员做不好这点的原因。但是，我们要搞清楚，放不下心是下属的能力，做事态度的问题，还是我们自己的心理问题而已。</p>
<p>一般来说，你带领的团队，可能能力会比你弱一点，你也才会担当或者被任免为领导角色。所以，如果只是下属的能力还暂时不胜任，你要做的是指导他，让他的能力慢慢提升，从而胜任工作并解决问题。而不是你觉得他做的不够你快和好，就自己下场抢了下属的工作来做。这样的话，他永远无法提升，你也无法放心。就软件开发而言，下属要下场写代码，你最好只是审查他的代码，分析他哪写的逻辑不清晰，需要重构等。</p>
<h2 id="方式">方式</h2>
<p>如果你能做到放心，并且愿意授权和分配工作了，那应该怎么分配呢？</p>
<h3 id="分配原则">分配原则</h3>
<h4 id="擅长什么做什么">擅长什么做什么</h4>
<p>软件行业一直有前端，后端，数据库管理，测试和运维等分工。所以，按擅长的领域来分工也是很明显和自然的一种方法，当然你的下属可能也会按这样的原则来揽任务。再说，项目期限紧的情况下，多是只能这样安排。</p>
<h4 id="不擅长什么做什么">不擅长什么做什么</h4>
<p>可能不是很多人会采取这种策略。而且，不少技术人员，尤其是比较资深的，有一些不恰当的歧视心态，并且不愿意走出舒适区，只想干自己喜欢的技术。比如，开发看不起测试，后端看不起前端，XX 语言看不起 YY 语言等。</p>
<p>但是，如果时间充裕，在培养新人或者有机会挑战自我的时候，我都会时不时专门挑下属不熟悉或者不擅长的领域，让他去死磕一下。一方面可能是我在的公司团队都比较小，要做的事情都比较杂。无论是前端后端，数据库等都要自己搞。另一方面，我也想通过这种手段来让大家有机会扩充知识面，并了解不同的领域有什么不同和相通之处。并更好的理解上下游合作伙伴，减少歧视的心态。</p>
<h4 id="想做什么安排什么">想做什么安排什么</h4>
<p>这就没什么特别好说的，只要团队内沟通协调良好，大家互相支持，尽量都可以这样安排并结合上面两点来考虑。</p>
<h4 id="不能长期把垃圾工作交给他人">不能长期把垃圾工作交给他人</h4>
<p>这一点是特别要注意的地方。当你承担了分配工作的重任，不是说随心所欲的按自己喜好，下属亲疏来分配的。所以，即便上面说了，可以把自己熟悉的工作分配出去，但不代表你可以把你不想做的垃圾工作都给别人。一方面，这样做并不能锻炼你的下属，他的能力无法得到提高。另一方面，他会对你这个领导产生厌恶感，你和团队之间凝聚力就会变差，而且以后他还会很不愿意听你的安排和意见。</p>
<p>相反，我通常是把垃圾工作自己揽过来处理。真要交出去的时候，可以和下属讨论怎么减少这类型的工作，或者有没有什么好办法来解决。比如说写一些自动化的脚本或者工具，运用新的技术等。这样，就可以将无聊的事情变得有趣，并且对大家的能力，眼界也有所提高。</p>
<h3 id="跟进，不是放任自理">跟进，不是放任自理</h3>
<p>其实，我觉得授权和分配工作只是第一步。重要的一步是如何跟进和指导，不是分配完就不管，最后到期限时追进度而已。</p>
<h4 id="目标明确">目标明确</h4>
<p>其实这点不能说是在跟进时才考虑，因为一开始分配任务的时候，也应该清楚的解释好工作任务的内容和目标。不同的任务类型，处理手段或隐含的目标是不同的。而且，有些人做着做着，可能就深入细节，偏离了大方向，延误了进度。所以，跟进的过程中，要时不时确保目标明确。</p>
<p>之前我安排一个下属通过 POC (Proof of Concept) 来确定 Solr 是否可以用来取代数据库 SQL 查询以提高性能，另一个下属是做一个新功能的页面原型，和通过 POC 来确定初步构想页面结构和操作能否实现，有没有技术难点，并让业务分析人员尽早确定。你们觉得各自的“目标”是什么呢？他们清楚吗？</p>
<p>虽然两个任务都涉及技术的 POC，但是分析角度和要求有细微不同。</p>
<p>第一个的任务，因为是针对旧功能的改造。首要的是充分了解旧的 SQL 查询是怎样的逻辑。如果换成用文本检索的方式，新的数据存储结构和字符的模糊匹配特性，能否完全模拟出原来 SQL 查询的功能？即便不行，那是否还满足当前业务的要求？这边对技术细节的理解和对比要相当清楚，以免换技术方案后，对原功能造成大影响。</p>
<p>另一边的页面原型，主要则是把握大的方向没有问题，主要的交互功能点能实现出来就可以了。一些很细的技术边角，即使后面真的出现并无法解决，可能再和业务商量一些替代方案就好了。而且还处在我们向业务方出提议阶段，时间上希望能尽快先有一个版本。如果业务对我们提议的页面原型有些修改意见，原先的技术问题可能都不用解决。</p>
<h4 id="授之于渔">授之于渔</h4>
<p>当下属遇到问题不知道怎么样解决的时候，我看过不少领导直接上来就给具体方法或者答案，手把手教怎么做，代码该怎么写，有什么 API，哪里有类似的代码可以抄等。</p>
<p>可是，我是相当不喜欢这种方式。因为：</p>
<ol>
<li><p>解决问题的方法不见得只有一种。</p>
</li>
<li><p>直接照搬，下属就缺少思考锻炼，下次也不会举一反三</p>
</li>
</ol>
<p>看到下属遇到问题，我一般至少准备分两三次来进行指导。</p>
<ol>
<li><p>首先我会询问他目前卡在什么地方，分析的思路是怎么样的？如果方向偏了，我会提示解决方向，然后就让他再自己摸索。</p>
</li>
<li><p>再隔一段时间，我再问他问题解决得怎么样？如果这个时候，他已经按提示方向摸到了门道，基本就可以了。如果还是没有头绪，我会再慢慢解释思考的思路，目标原则或者有什么要取舍的。再让他尝试按解释了的思路去解决问题。</p>
</li>
<li><p>最后基本就是再做代码审查了。</p>
</li>
</ol>
<p>这里要把握好中间间隔的时间，提示的程度需要看情况而定。项目的松紧，人的能力等都要考虑。</p>
<h4 id="不接受意见怎么办？">不接受意见怎么办？</h4>
<p>当你对下属做出指导，提供意见或者别的方案的时候，他可能并不买帐。</p>
<p>这种问题其实很难解决。要降低这种问题出现后能温和的处理，首先当然不能粗暴地命令。正如上面所说的，解决问题的答案不止一种，就像编程语言和框架一样。所以，你往往需要从技术或者业务上，<strong>真诚和耐心的详细分析</strong>，你们的方案主要区别是在哪里，为什么说你的考虑可能在目前情况下更优。有些时候，可能真的是技术上来说他们的方案确实更完善。但是从项目性质或者进度上来考虑，需要舍弃一些东西，没必要做得太复杂。有时我们还可以尝试寻求可测试或可量度的手段来进行比较，又或再拉几个人来讨论，发表见解和投票等。</p>
<p>一般来说，优秀的 IT 人员，在摆事实和讲道理后，都会接受合理的意见的。如果作为领导，一直都是很真诚的教导下属，更容易共同寻求最终两方都能接受的方案。</p>
]]></content>
    
    
      <category term="Experience" scheme="http://www.thinkingincrowd.me/tags/Experience/"/>
    
      <category term="Delegation" scheme="http://www.thinkingincrowd.me/tags/Delegation/"/>
    
      <category term="Leadership" scheme="http://www.thinkingincrowd.me/tags/Leadership/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Modulization and Bundling with TypeScript and Webpack for JavaScript Full Stack Project]]></title>
    <link href="http://www.thinkingincrowd.me/2016/01/02/Modulization-and-Bundling-with-TypeScript-and-Webpack-for-JS-Full-Stack-Project/"/>
    <id>http://www.thinkingincrowd.me/2016/01/02/Modulization-and-Bundling-with-TypeScript-and-Webpack-for-JS-Full-Stack-Project/</id>
    <published>2016-01-02T08:09:39.000Z</published>
    <updated>2016-01-03T05:00:43.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Modulization">Modulization</h2>
<p>In a Full Stack JS project, the essence is how to write code consistently and easy to share and maintain because code sharing between server and browser is unavoidably.  Before talking about what strategy we are taking, let’s have a review on the trend of the modulization first.</p>
<h3 id="Ancient_history">Ancient history</h3>
<p>There is no such thing and all things are global.  This causes potentially naming conflict and it’s not good for maintenance.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> logo = <span class="string">'KanbanizeIT'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">(name)</span> </span>{</div><div class="line">  alert(logo + <span class="string">' wish you a happy new year, '</span> + name);</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Package/Namespace_Concept">Package/Namespace Concept</h3>
<p>Some well-known library, like ExtJS, takes package/namespace concept and they manage the source in this structure.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Ext.ns(<span class="string">'com.kanbanizeit'</span>);</div><div class="line"></div><div class="line">Ext.apply(com.kanbanizeit.SubModule, {</div><div class="line">  oneThousand: <span class="number">1024</span>,</div><div class="line">  oneThousandInComputer: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> oneThousand;</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="Immediately-Invoked-Function-Expression_(IIFE)">Immediately-Invoked-Function-Expression (IIFE)</h3>
<p>This approach reduce the hassle of long namespace and groups all internal stuffs encapsulated.  Many small library adopts this style, e.g. jQuery.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> kanbanizeIT = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> privateField = <span class="number">1024</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    publicStuff: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> privateField;</div><div class="line">    }</div><div class="line">  };</div><div class="line">})();</div></pre></td></tr></table></figure>

<h3 id="CommonJS/Node-js">CommonJS/Node.js</h3>
<p>This style went popular due to the popularity of Node.js.  Each file is a module and all variables defined within that file are only visible in that file.  If you have public API want to publish, you need to export it.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// logo.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="string">'KanbanizeIT'</span>;</div><div class="line"></div><div class="line"><span class="comment">// sayHello.js</span></div><div class="line"><span class="keyword">var</span> logo = <span class="built_in">require</span>(<span class="string">'./logo'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = {</div><div class="line">  sayHello: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="string">'Welcome to join '</span> + logo;</div><div class="line">  }</div><div class="line">};</div></pre></td></tr></table></figure>

<h3 id="AMD/CMD">AMD/CMD</h3>
<p>CommonJS is suited for server-side JS loading because it’s synchronous file loading in Node.js.  But for browser, script loading is asynchronous and so other groups of people propose different styles target for browser-side JS loading.</p>
<p><a href="http://www.requirejs.org/" target="_blank" rel="external">RequireJS</a> is the representative for AMD style.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>{</div><div class="line">  a.doSomething();</div><div class="line"></div><div class="line">  b.doAnotherThing();</div><div class="line">}]);</div></pre></td></tr></table></figure>

<p><a href="http://seajs.org/docs/en.html" target="_blank" rel="external">sea.js</a> is the representative for CMD style.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span><span class="params">(require, exports, module)</span>) </span>{</div><div class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>);</div><div class="line">  a.doSomething();</div><div class="line"></div><div class="line">  <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'b'</span>);</div><div class="line">  b.doAnotherThing();</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="ES6">ES6</h3>
<p>The latest ECMAScript 6 standard has below syntax.  However, this is not supported in most of the JS execution environment yet.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// xxx.js</span></div><div class="line">export <span class="keyword">default</span> xxx;</div><div class="line"></div><div class="line"><span class="comment">// yyy.js</span></div><div class="line">import xxx from <span class="string">'./xxx'</span>;</div></pre></td></tr></table></figure>

<h3 id="My_strategy">My strategy</h3>
<p>About 2 years ago, I wrote an article “<a href="http://www.thinkingincrowd.me/2013/04/13/share-code-between-nodejs-and-browser/" target="_blank" rel="external">Share code between Node.js and browser</a>“ about this topic already.  At that time, I explain why I decided to choose to write the code in Node.js style and then use tools like <a href="https://github.com/substack/node-browserify" target="_blank" rel="external">browserify</a> (Now we has Webpack too) to do the bundling for browser.  I still consider my choice is the right way to go.  </p>
<p>Now I just changed to <strong>write all JavaScript in ES6 format no matter for browser-side or server-side</strong>, then do the bundling for browser.  This choice enables me to have consistent coding style regardless which environment it’s targeted to.  One more reason for me to abandon the hassle introduced from AMD or CMD is that when the HTTP2 era comes, I have no need to do the bundling anymore and just have to skip this step without changing any code.</p>
<p>But browser doesn’t support ES6 syntax now.  No worry, you should use a transpiler.  Checkout my article <a href="http://www.thinkingincrowd.me/2015/12/26/TypeScript-vs-Babel/" target="_blank" rel="external">TypeScript vs Babel</a> if you know nothing about it.</p>
<h2 id="Bundling">Bundling</h2>
<p>To me, <strong>The No. 1 principle of bundling is <a href="https://en.wikipedia.org/wiki/Single_Source_of_Truth" target="_blank" rel="external">Single Source of Truth</a></strong>.</p>
<p>How is that?  Normally, we need to have some configuration to define a bundle name and file selectors to decide what files to be included in the bundle, like the <a href="https://jawr.java.net/" target="_blank" rel="external">JAWR</a> used in my company.  It is really ugly and error-prone.</p>
<p>Now, if we make use of the modulization and control the dependency through ES6 <code>import</code> and <code>export</code>, then we can base on this relationship to control the bundling as well.  What we need to do is to specify a bootstrap JS file as entry point and let the tools to figure out all dependencies to be included.  No other configuration should be needed unless special requirement is raised, such as bundle splitting for lazy load, etc.  </p>
<p>Hence, <strong>the dependency specified in the source code itself should be the only single truth</strong>.  </p>
<h3 id="TypeScript_config_&amp;_folder_structure">TypeScript config &amp; folder structure</h3>
<p>Sample <code>tsconfig.json</code> setting is as below which compiles all TypeScript source to be compatible with ES5 standard and use CommonJS style for module usage.  Folder structure is simply separated to <code>common</code>, <code>client</code> and <code>server</code> for illustrating purpose.  You can further arrange based on your preference.  </p>
<p>The compiled source is output to <code>build</code> directory and retains the original folder structure.</p>
<p><img alt="Source Folder Structure" src="http://77g8zm.com1.z0.glb.clouddn.com/js_typescript_folder_structure.png" style="position: relative; float: right; margin-left: 5px; border: 0px; padding: 0px;"></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  "<span class="attribute">compilerOptions</span>": <span class="value">{</span></div><div class="line">    "<span class="attribute">target</span>": <span class="value"><span class="string">"es5"</span></span>,</div><div class="line">    "<span class="attribute">module</span>": <span class="value"><span class="string">"commonjs"</span></span>,</div><div class="line">    "<span class="attribute">outDir</span>": <span class="value"><span class="string">"build"</span></span></div><div class="line">  },</div><div class="line">  "<span class="attribute">exclude</span>": <span class="value">[</span></div><div class="line">    <span class="string">"node_modules"</span>,</div><div class="line">    <span class="string">"dist"</span>,</div><div class="line">    <span class="string">"build"</span></div><div class="line">  ]</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Webpack_integration">Webpack integration</h3>
<p>When integrating Webpack with TypeScript support, we need to use <code>ts-loader</code> to compile the <code>.ts</code> file.  Sample <code>webpack.config.js</code> is as below when I am testing to bundle the client-side JavaScript for browser usage:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>),</div><div class="line">    path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = {</div><div class="line">    context: __dirname + <span class="string">'/src'</span>,</div><div class="line">    entry: {</div><div class="line">      index: <span class="string">'./client/index'</span></div><div class="line">    },</div><div class="line">    output: {</div><div class="line">        path: __dirname + <span class="string">'/dist'</span>,</div><div class="line">        publicPath: <span class="string">'/'</span>,</div><div class="line">        filename: <span class="string">'[name].bundle.js'</span></div><div class="line">    },</div><div class="line">    resolve: {</div><div class="line">      root: __dirname,</div><div class="line">      extensions: [<span class="string">''</span>, <span class="string">'.ts'</span>, <span class="string">'.js'</span>]</div><div class="line">    },</div><div class="line">    <span class="built_in">module</span>: {</div><div class="line">      loaders: [</div><div class="line">        { test: <span class="regexp">/\.ts$/</span>, loaders: [<span class="string">'ts-loader'</span>], exclude: <span class="regexp">/node_modules/</span> }</div><div class="line">      ]</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>There are two issues discovered after the testing:</p>
<ul>
<li>Any compile warning can possibly block the webpack build process.  To fix this, we can add a <code>ts</code> config in webpack and ignore some particular errors.  </li>
</ul>
<p><img src="http://77g8zm.com1.z0.glb.clouddn.com/js_typescript_error.png" alt="TypeScript Warning"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = {</div><div class="line">  ts: {</div><div class="line">    ignoreDiagnostics: [<span class="number">2339</span>]</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>Normally, we only need to bundle the code for browser, so the webpack <code>entry</code> only specify entries for client-side script.  Even though the <code>ts-loader</code> still use the <code>tsconfig.json</code> to compile all TypeScript, the compiled TypeScript is not output to the <code>outDir</code> specified in <code>tsconfig.json</code> and so the server-side TypeScript is not compiled to JavaScript.  Then how can Node.js use the TypeScript then?  </li>
</ul>
<p>There is one approach to use <a href="https://github.com/theblacksmith/typescript-require" target="_blank" rel="external">typescript-require</a> extension and put <code>require(‘typescript-require’);</code> to the bootstrap entry js executed by Node.js, <code>.ts</code> module can be loaded just like the <code>.js</code> module.</p>
<p>However, I don’t want to go with it because it introduces some exception (Entry <code>.js</code> file for Node.js and this special extension).  I still want all TypeScript source be compiled out to a build folder with exact folder structure.</p>
<h3 id="Gulp_Integration">Gulp Integration</h3>
<p>I have to bring in Gulp to control the process instead.  First compiles all TypeScript and then calls Webpack to do the bundling by pointing to the <code>build</code> folder instead of original <code>src</code> folder.  Hence, <code>ts-loader</code> in <code>webpack.config.js</code> is not necessary anymore.</p>
<p><code>gulpfile.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'./gulp'</span>);</div></pre></td></tr></table></figure>

<p><code>index.js</code> under gulp folder.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'./typescript'</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">'./webpack'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'typescript'</span>, <span class="string">'webpack'</span>]);</div></pre></td></tr></table></figure>

<p><code>typescript.js</code> under gulp folder.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> ts = <span class="built_in">require</span>(<span class="string">'gulp-typescript'</span>);</div><div class="line"><span class="keyword">var</span> tsconfig = <span class="built_in">require</span>(process.cwd() + <span class="string">'/tsconfig.json'</span>);</div><div class="line"><span class="keyword">var</span> tsProject = ts.createProject(<span class="string">'tsconfig.json'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'typescript'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> tsResult = tsProject.src() <span class="comment">// instead of gulp.src(...) </span></div><div class="line">    .pipe(ts(tsProject));</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> tsResult.js.pipe(gulp.dest(tsconfig.compilerOptions.outDir));</div><div class="line">});</div></pre></td></tr></table></figure>

<p><code>webpack.js</code> under gulp folder.  To be aware that the <code>webpack</code> task has defined a dependency on <code>typescript</code> task so that it will waits under the <code>typescript</code> task to complete before it starts.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> gutil = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> webpackConfig = <span class="built_in">require</span>(process.cwd() + <span class="string">'/webpack.config'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'webpack'</span>, [<span class="string">'typescript'</span>], <span class="function"><span class="keyword">function</span><span class="params">(callback)</span> </span>{</div><div class="line">    <span class="comment">// run webpack</span></div><div class="line">    webpack(webpackConfig, <span class="function"><span class="keyword">function</span><span class="params">(err, stats)</span> </span>{</div><div class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> gutil.PluginError(<span class="string">'webpack'</span>, err);</div><div class="line">        gutil.log(<span class="string">'[webpack]'</span>, stats.toString({</div><div class="line">            <span class="comment">// output options</span></div><div class="line">        }));</div><div class="line">        callback();</div><div class="line">    });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>The execution is as below.</p>
<p><img src="http://77g8zm.com1.z0.glb.clouddn.com/js_webpack_gulp.png" alt="Gulp and Webpack"></p>
<p>Till now, you should have basic idea on how to work with TypeScript and Webpack for JavaScript full stack project.  But there is one more thing, how about CSS?  Can it be the same?</p>
<h3 id="CSS_dependency">CSS dependency</h3>
<p>For example, my app uses AngularJS and Bootstrap and I want to include them all like below.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// &lt;reference path="typings/angularjs/angular.d.ts" /&gt;</span></div><div class="line"><span class="comment">// &lt;reference path="typings/angularjs/angular-route.d.ts" /&gt;</span></div><div class="line"></div><div class="line">import <span class="string">'angular'</span>;</div><div class="line">import <span class="string">'angular-route'</span>;</div><div class="line">import <span class="string">'angular-ui-bootstrap'</span>;</div><div class="line">import <span class="string">'bootstrap.css'</span>;</div></pre></td></tr></table></figure>

<p>How can I setup the Webpack and bundle all dependencies?  Here is the complete <code>webpack.config.js</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>),</div><div class="line">    ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>),</div><div class="line">    HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>),</div><div class="line">    path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = {</div><div class="line">    context: __dirname + <span class="string">'/build/src'</span>,</div><div class="line">    entry: {</div><div class="line">      index: <span class="string">'./client/index'</span></div><div class="line">    },</div><div class="line">    output: {</div><div class="line">        path: __dirname + <span class="string">'/dist'</span>,</div><div class="line">        publicPath: <span class="string">'/'</span>,</div><div class="line">        filename: <span class="string">'[name].bundle.js'</span></div><div class="line">    },</div><div class="line">    resolve: {</div><div class="line">      alias: {</div><div class="line">        <span class="string">'bootstrap.css'</span>: path.join(__dirname, <span class="string">'/node_modules/bootstrap/dist/css/bootstrap.min.css'</span>)</div><div class="line">      },</div><div class="line">      root: __dirname,</div><div class="line">      extensions: [<span class="string">''</span>, <span class="string">'.css'</span>, <span class="string">'.js'</span>]</div><div class="line">    },</div><div class="line">    <span class="built_in">module</span>: {</div><div class="line">      loaders: [</div><div class="line">        {</div><div class="line">            test: <span class="regexp">/\.(eot|woff|woff2|ttf|svg|png|jpg)$/</span>,</div><div class="line">            loader: <span class="built_in">require</span>.resolve(<span class="string">"url-loader"</span>) + <span class="string">'?name=[name]-[hash].[ext]'</span></div><div class="line">        }</div><div class="line">        , { test: <span class="regexp">/\.css$/</span>, loader: ExtractTextPlugin.extract(<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>) }</div><div class="line">      ]</div><div class="line">    },</div><div class="line">    plugins: [</div><div class="line">      <span class="keyword">new</span> HtmlWebpackPlugin({</div><div class="line">        inject: <span class="literal">true</span>,</div><div class="line">        template: <span class="string">'./src/client/index.html'</span>,</div><div class="line">        chunks: [<span class="string">'index'</span>]</div><div class="line">      })</div><div class="line">      , <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].css'</span>, {</div><div class="line">        allChunks: <span class="literal">true</span></div><div class="line">      })</div><div class="line">    ]</div><div class="line">}</div></pre></td></tr></table></figure>

<p>There are couples of setting took me a while to figure out.</p>
<ol>
<li><p><code>alias</code> for <code>bootstrap.css</code> is necessary so that it can be correctly resolved.  </p>
</li>
<li><p>Without the <code>require.resolve(&quot;url-loader&quot;)</code>, when parsing the CSS file, it complaints <code>Cannot resolve module &#39;url-loader&#39;</code>.  </p>
</li>
<li><p><code>ExtractTextPlugin</code> is used to output the CSS as a separated file instead of being embedded in the bundled JS and dynamically generated as a <code>&lt;style&gt;</code> tag in HTML file during page load.</p>
</li>
<li><p><code>HtmlWebpackPlugin</code> is used to automatically inject the generated CSS and JS files into the appropriate location in the entry HTML file as below.</p>
</li>
</ol>
<p><img src="http://77g8zm.com1.z0.glb.clouddn.com/js_webpack_gulp_final_result.png" alt="Final HTML result"></p>
<p>I haven’t talked about how to include internal CSS or HTML yet.  However, I think you can figure out yourself based on the sample and strategy described here.  </p>
]]></content>
    
    
      <category term="Javascript" scheme="http://www.thinkingincrowd.me/tags/Javascript/"/>
    
      <category term="TypeScript" scheme="http://www.thinkingincrowd.me/tags/TypeScript/"/>
    
      <category term="AngularJS" scheme="http://www.thinkingincrowd.me/tags/AngularJS/"/>
    
      <category term="Webpack" scheme="http://www.thinkingincrowd.me/tags/Webpack/"/>
    
      <category term="browserify" scheme="http://www.thinkingincrowd.me/tags/browserify/"/>
    
      <category term="bundling" scheme="http://www.thinkingincrowd.me/tags/bundling/"/>
    
      <category term="CSS" scheme="http://www.thinkingincrowd.me/tags/CSS/"/>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Sword/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 Retrospect and 2016 Goal Setting]]></title>
    <link href="http://www.thinkingincrowd.me/2015/12/31/2015-retrospect-and-2016-goal-setting/"/>
    <id>http://www.thinkingincrowd.me/2015/12/31/2015-retrospect-and-2016-goal-setting/</id>
    <published>2015-12-31T15:50:00.000Z</published>
    <updated>2015-12-31T15:51:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="总结">总结</h2>
<h3 id="个人学习">个人学习</h3>
<p>花费了一年半多的时间，终于把 <a href="https://www.coursera.org/" target="_blank" rel="external">Coursera</a> 上的 <a href="https://www.coursera.org/specialization/jhudatascience/1" target="_blank" rel="external">Data Science</a> 学完了。不过，断断续续的，其实有些内容掌握得并不好，Statistical Inference 和 Regression Model 有些都不太记得了。不过，这次学习也大概知道数据分析干的是什么事情，以后有需要再深入也容易些。最近有些项目要做一些数据分析，也练了一下手。反正有了些基础知识，后面什么时候有需要都可以拿来再深入使用。</p>
<p>因为主要精力花在这个课程上面，写代码的时间少了。本来说要做的 Kanban 系统，中间也放下了。靠近年尾，团队里面开展 MEAN Stack 方面技术的自学。所以，我也重新捡回来，带他们一起去学，给他们一些意见。既然 Data Science 上完了，我的重心也可以放回来这边了。感觉自己还是更喜欢写代码多一些。回头把之前做了一点的 Kanban 系统用 TypeScript 重写和 Webpack 把构建流程完善一下。有兴趣的小伙伴可以联系我。</p>
<h3 id="工作">工作</h3>
<p>没什么特别好说的。过去一段时间，我花了不少精力带人。团队里面，带新人最多的应该是我了。感觉这方面自己还是做得还行的。至少我是一个很乐意分享和教别人的一个人。可惜我带的人像走马观花一样，时间都不是很长，要么他们换小组了，要么我换项目了。不过，我还是会尽量最好一个 Leader。明年从各方位带领身边的小伙伴学习，无论什么方面。现在我都教起粤语来了。</p>
<h3 id="时间安排">时间安排</h3>
<p>这个没什么好说的了。就像笑来老师说的，我们从来就不应该管理时间，而应该是管理自己。看了他介绍的<a href="http://www.amazon.cn/%E5%A5%87%E7%89%B9%E7%9A%84%E4%B8%80%E7%94%9F-%E6%9F%B3%E6%AF%94%E6%AD%87%E5%A4%AB%E5%9D%9A%E6%8C%8156%E5%B9%B4%E7%9A%84-%E6%A0%BC%E6%8B%89%E5%AE%81/dp/B00FYHDY1G" target="_blank" rel="external">《奇特的一生》</a>那本书，柳比歇夫的<strong>”时间统计法“</strong>真是让人叹为观止。我试着记录了几天，经常开始做一件事情前忘记开始记录，或者不记得停止上一个手上的事情再开始下一个。不知道有什么好方法能够养成这样的习惯，好像有点反人类。还是坚持下去摸索一下怎么做才好。</p>
<h3 id="善事">善事</h3>
<p>今年的最后一天，我还没有做年终总结，联合国儿童基金会就帮我做了一点，寄了几张月捐证书什么的。没想到已经 3 年了。</p>
<p><img alt="UNICEF" src="http://77g8zm.com1.z0.glb.clouddn.com/unicef_certificate.jpg?imageView/2/w/400"></p>
<h2 id="展望">展望</h2>
<p>具体没什么好写的。主要是下面几条原则和两本书：</p>
<p><a href="http://www.amazon.com/How-Read-Book-Intelligent-Touchstone/dp/0671212095" target="_blank" rel="external">How to Read a Book: The Classic Guide to Intelligent Reading</a><br><a href="http://www.amazon.com/Beyond-Feelings-Guide-Critical-Thinking-ebook/dp/B005K24AY0" target="_blank" rel="external">Beyond Feelings: A Guide to Critical Thinking</a>  </p>
<ol>
<li><strong>管理好自己</strong></li>
<li><strong>做了再说</strong>  </li>
<li><strong>学习学习再学习</strong></li>
<li><strong>锻炼身体</strong></li>
<li><strong>分享（博客，公众号，…）</strong></li>
</ol>
<p>学习和成长真的就是一个人不断磨练的过程，所以加入了笑来老师的《七年》和池建强老师的《攻城狮之路》那个群。希望 2018 年，也就是我的下一个七年，能有一些较明显的转变。</p>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Goal" scheme="http://www.thinkingincrowd.me/tags/Goal/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript vs Babel]]></title>
    <link href="http://www.thinkingincrowd.me/2015/12/26/TypeScript-vs-Babel/"/>
    <id>http://www.thinkingincrowd.me/2015/12/26/TypeScript-vs-Babel/</id>
    <published>2015-12-26T10:38:00.000Z</published>
    <updated>2015-12-31T00:09:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Transpiler_or_not?">Transpiler or not?</h2>
<p>Before discussing TypeScript and Babel, what we need to decide is <strong>whether to use a transpiler or not</strong>.</p>
<p>I was once opponent on using transpiler language when I first saw CoffeeScript, ClojureScript.  I think that is purely the programmer’s ingrained habit and that is why it goes popular mostly in particular communities (e.g. Python, Ruby, Lisp).  </p>
<p>There are also other languages (e.g. GWT, Dart) that can be used for web frontend development but they don’t feel right either, not to mention other transpiler that compiles some tranditional backend language like JAVA, Ruby or Python to JavaScript.  I don’t know why such scenario exists.  Just because they don’t want to learn JavaScript?</p>
<p>However, now I am a proponent of using “advanced” language and then transpiling to raw Javascript.  The main reasons are as below:</p>
<h3 id="Catch_up_the_great_features_in_ES6_standard">Catch up the great features in ES6 standard</h3>
<p>ES6 standard includes a lot of great features while not every JS environment (Browsers, Node.js, etc.) supports them well and consistently.  It’s a huge benefit if the code can be written in latest standard once and reusabled in every JS environment especially working in full stack JS project.</p>
<p>Transpiler can address this issue pretty well.</p>
<h3 id="Unevitable_build_stage">Unevitable build stage</h3>
<p>Another reason I oppose transpiler before is the worry on the quality &amp; readability of the code transpiled and the hassle of adding unnecessary build stages.</p>
<p>But now, modulization, code sharing between browser and backend, bundling require a build stage anyway.  What is more, there are plenty of solutions to realize code hot-reload to greatly streamline development process already.  Hence, adding transpilation step is not a problem anymore.</p>
<h3 id="Code_written_in_TypeScript_and_Babel_IS_standard_Javascript">Code written in TypeScript and Babel IS standard Javascript</h3>
<p>With Babel, you just use any new feature it supports in JavaScript way.</p>
<p>TypeScript is so called a typed superset of JavaScript.  In theory, any existing JavaScript can be processed by TypeScript after renaming <code>.js</code> to <code>.ts</code> directly.  Although actually some edge cases disobey this rule, it’s easy to identify and fix.</p>
<p>Using TypeScript and Babel for transpilation differs from CoffeeScript and other alternatives.  We are actually writing the future JavaScript for the moment.  Enjoy it.</p>
<h2 id="TypeScript_vs_Babel">TypeScript vs Babel</h2>
<h3 id="ES6_new_feature_support">ES6 new feature support</h3>
<p>Please go check ECMAScript 6 compatibility <a href="https://kangax.github.io/compat-table/es6/" target="_blank" rel="external">table</a>.  In general, TypeScript support on new ES6 feature cannot catch up Babel.  If you have big concern on this, the only option is Babel.</p>
<h3 id="Transpiled_code_readability">Transpiled code readability</h3>
<p>Refering to a simple class defined as below.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Greeter {</div><div class="line">  greeting: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">  <span class="constructor"><span class="keyword">constructor</span>(message: string) </span>{</div><div class="line">    <span class="keyword">this</span>.greeting = message;</div><div class="line">  }</div><div class="line"></div><div class="line">  greet() {</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.greeting;</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>TypeScript</strong> transpiled code is more clean, recognizable and familiar to the approach we used to define class before.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Greeter = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">Greeter</span><span class="params">(message)</span> </span>{</div><div class="line">          <span class="keyword">this</span>.greeting = message;</div><div class="line">      }</div><div class="line">      Greeter.prototype.greet = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.greeting;</div><div class="line">      };</div><div class="line">      <span class="keyword">return</span> Greeter;</div><div class="line">  })();</div></pre></td></tr></table></figure>

<p><strong>Babel</strong> transpiled result code takes advantage on using the new Object method but makes the code a little complex.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> _createClass = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{ <span class="function"><span class="keyword">function</span> <span class="title">defineProperties</span><span class="params">(target, props)</span> </span>{ <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.length; i++) { <span class="keyword">var</span> descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || <span class="literal">false</span>; descriptor.configurable = <span class="literal">true</span>; <span class="keyword">if</span> (<span class="string">"value"</span> <span class="keyword">in</span> descriptor) descriptor.writable = <span class="literal">true</span>; <span class="built_in">Object</span>.defineProperty(target, descriptor.key, descriptor); } } <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(Constructor, protoProps, staticProps)</span> </span>{ <span class="keyword">if</span> (protoProps) defineProperties(Constructor.prototype, protoProps); <span class="keyword">if</span> (staticProps) defineProperties(Constructor, staticProps); <span class="keyword">return</span> Constructor; }; })();</div><div class="line"></div><div class="line">  <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, {</div><div class="line">    value: <span class="literal">true</span></div><div class="line">  });</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span><span class="params">(instance, Constructor)</span> </span>{ <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) { <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>); } }</div><div class="line"></div><div class="line">  <span class="keyword">var</span> Greeter = exports.Greeter = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="comment">// transform-class-properties</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Greeter</span><span class="params">(message)</span> </span>{</div><div class="line">      _classCallCheck(<span class="keyword">this</span>, Greeter);</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.greeting = message;</div><div class="line">    }</div><div class="line"></div><div class="line">    _createClass(Greeter, [{</div><div class="line">      key: <span class="string">'greet'</span>,</div><div class="line">      value: <span class="function"><span class="keyword">function</span> <span class="title">greet</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.greeting;</div><div class="line">      }</div><div class="line">    }]);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Greeter;</div><div class="line">  })();</div></pre></td></tr></table></figure>

<h3 id="Module">Module</h3>
<p>In ES6, it is exactly one module per file and one file per module.  <code>import</code> and <code>export</code> keyword are used to reference other modules or publish its own API.</p>
<p>Babel exactly supports same syntax and can transpile to CommonJS, AMD and other style.</p>
<p>In TypeScript, there are two different concepts:</p>
<ol>
<li>Internal Module (Namespaces)</li>
<li>External Module</li>
</ol>
<p>I don’t want to go to the extent of explaining the difference of them.  If you really want to know about it, you can check it out in the TypeScript <a href="http://www.typescriptlang.org/Handbook#modules" target="_blank" rel="external">handbook</a>.  The external one is just like the ES6 standard.</p>
<p>What you must know is that, <strong>DON’T mix them together</strong>.  And you should have <strong>NO CHOICE but to use the external module</strong>.  However, if you are telling me you don’t have to use any 3rd-party library, then you can go with the internal one.</p>
<p><a href="https://www.stevefenton.co.uk/2015/05/Stop-Mixing-TypeScript-Internal-And-External-Modules/" target="_blank" rel="external">https://www.stevefenton.co.uk/2015/05/Stop-Mixing-TypeScript-Internal-And-External-Modules/</a></p>
<p>Some usage syntax of external module used in TypeScript are as below for backwards compatibility with CommonJS and AMD style modules:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// xxx.js</span></div><div class="line"><span class="keyword">export</span> = xxx;</div><div class="line"></div><div class="line"><span class="comment">// yyy.js</span></div><div class="line"><span class="keyword">import</span> xxx = <span class="built_in">require</span>(<span class="string">'./xxx'</span>);</div></pre></td></tr></table></figure>

<p>However, above usage should be legacy soon.  In order to take advantage of ES6 and write uniform code, I think it’s better to use the exact ES6 syntax instead.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// xxx.js</span></div><div class="line">export <span class="keyword">default</span> xxx;</div><div class="line"></div><div class="line"><span class="comment">// yyy.js</span></div><div class="line"><span class="keyword">import</span> xxx <span class="keyword">from</span> <span class="string">'./xxx'</span>;</div></pre></td></tr></table></figure>

<h3 id="Type_and_IDE_support">Type and IDE support</h3>
<p><strong>TypeScript</strong></p>
<p>As JSer, I once believed that type and compiler support are not so much important.  I might also be one of the main reason that people thinks it’s flexible and love it.  However, quality control is really not that easy if the codebase is large and many people involved, especially when it’s used heavily in system with complex business logic like ERP while no Unit Test exists.  If we can have type support and compilation checking with little cost, it should be worthy.</p>
<p>Type support is the first principle in TypeScript and you can tell from its definition of position (typed supperset of JavaScript).  What is more, the <a href="http://definitelytyped.org/" target="_blank" rel="external">DefinitelyTyped</a> project provides type support on many existing 3rd-party JavaScript libraries.  It seems the whole JavaScript world supports type suddently and you don’t need to start from scratch.</p>
<p>Let’s use Sublime Text 3 with TypeScript plugin as an example to see how it’s working.  </p>
<p><strong>Install TypeScript &amp; Definition manager</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> -g typescript tsd</span></div><div class="line">tsd <span class="keyword">install</span> angular angular-route</div></pre></td></tr></table></figure>

<p>After the installation completes, there is a <code>typings</code> folder generated under the location you execute <code>tsd</code> command.  The definition files are located there and refering these definition files in your JavaScript is very simple.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// &lt;reference path="typings/angularjs/angular.d.ts" /&gt;</span></div><div class="line"><span class="comment">// &lt;reference path="typings/angularjs/angular-route.d.ts" /&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">'angular'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'angular-route'</span>;</div></pre></td></tr></table></figure>

<p><strong>Code Tips and auto-complete</strong></p>
<p><img alt="Code Tips" src="http://77g8zm.com1.z0.glb.clouddn.com/TypeScript-Code-Tips.png"></p>
<p><strong>Jump to definition and many support shortcuts</strong></p>
<p><img alt="Plugin-Features" src="http://77g8zm.com1.z0.glb.clouddn.com/TypeScript-Plugin-Features.png"></p>
<p><strong>Warning about missing properties</strong></p>
<p><code>Show Error List</code> shows all error in your project.  </p>
<p><img alt="Miss-Properties-1" src="http://77g8zm.com1.z0.glb.clouddn.com/TypeScript-Warn-Miss-Properties1.png"></p>
<p><img alt="Miss-Properties-2" src="http://77g8zm.com1.z0.glb.clouddn.com/TypeScript-Warn-Miss-Properties2.png"></p>
<p><strong>Warning about incorrect function signature</strong></p>
<p>Status bar shows the error focusing on.</p>
<p><img alt="Unmatch-Interface" src="http://77g8zm.com1.z0.glb.clouddn.com/TypeScript-Warn-Interface.png"></p>
<p><strong>Warn but not block</strong></p>
<p>When you compiles the TypeScript to normal JavaScript, it warns but not blocks on code generation by default.  This is great because it allows for gradual evolvement after you mass renaming <code>.js</code> file to <code>.ts</code> format for the transition.</p>
<p><img alt="Warn-Not-Block" src="http://77g8zm.com1.z0.glb.clouddn.com/TypeScript-Warn-Not-Block.png"></p>
<p>So far, you have a glimpse on how fascinating the IDE support is for TypeScript.  I haven’t tried the famous Webstorm and Visual Studio, but they should have great support as well.</p>
<p><strong>Babel</strong></p>
<p>There is a project called <a href="http://flowtype.org/" target="_blank" rel="external">Flow</a> for type support in Babel.  However, it doesn’t support Windows environment yet.  It also have no support for <a href="http://definitelytyped.org/" target="_blank" rel="external">DefinitelyTyped</a> project yet although it [plans][] to.</p>
<p>For IDE, Sublime’s Flow plugin doesn’t seem to have much feature.  Facebook has built an IDE called <a href="http://nuclide.io/" target="_blank" rel="external">Nuclide</a> as suite of packages on top of Atom.  From my experience, installing <a href="http://nuclide.io/" target="_blank" rel="external">Nuclide</a> packages is very slow and causes the Atom to halt with high CPU.  I have to give it up in Mac.  You may have a try though.</p>
<h2 id="Conclusion">Conclusion</h2>
<p><img alt="TypeScript_Babel_Decision" src="http://77g8zm.com1.z0.glb.clouddn.com/TypeScript_Babel_Decision.png"></p>
<p>Above sudo code is just for funny purpose.  It’s really a choice of taste and there is no aboslute right or wrong for the selection.  Actually, there are other things to consider as well.  Which works better with Webpack and Node.js?  How to fit into the build process?  I will illustrate these areas’ consideration in another article later.  </p>
<p>For me, I decided to take the shot for TypeScript because I evaluated that type support is more important than purely pursuing edge feature support and it has great IDE support.  What is more, AngularJS 2 are written with it.  They are my best bet for future.</p>
]]></content>
    
    
      <category term="Javascript" scheme="http://www.thinkingincrowd.me/tags/Javascript/"/>
    
      <category term="TypeScript" scheme="http://www.thinkingincrowd.me/tags/TypeScript/"/>
    
      <category term="Babel" scheme="http://www.thinkingincrowd.me/tags/Babel/"/>
    
      <category term="ES6" scheme="http://www.thinkingincrowd.me/tags/ES6/"/>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Sword/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dive into Kanban (6) - Scrum vs Kanban]]></title>
    <link href="http://www.thinkingincrowd.me/2015/10/08/Dive-into-Kanban-6-Scrum-vs-Kanban/"/>
    <id>http://www.thinkingincrowd.me/2015/10/08/Dive-into-Kanban-6-Scrum-vs-Kanban/</id>
    <published>2015-10-08T13:47:57.000Z</published>
    <updated>2015-12-21T09:18:03.000Z</updated>
    <content type="html"><![CDATA[<p>As a Kanban fan, I attended a Scrum-Master training organized by the company.  This is a good chance for me to know Scrum more from an experienced person beside reading books, blogs or other documentations.  </p>
<p>Here I will try to compare some core concept in Scrum with the same or similar idea in Kanban.  </p>
<h2 id="Timebox">Timebox</h2>
<p>Timebox is important in Scrum.  Sprint is the crucial one which is normally 2 ~ 4 weeks.  It’s used to control pacing for delivering usable feature instead of mockup or prototype.  </p>
<p>There is NO prescribed Timebox in Kanban.  Kanban can have different Cadence for Replenishment and Delivery.  What is more, it can be on demand like release whenever there is something useful for users.  </p>
<h3 id="Pressure_&amp;_Goal">Pressure &amp; Goal</h3>
<p>From my perspective, the most important benefit or purpose of the Timebox is the pressure &amp; goal it imposed.  The whole team is driven by a hard deadline limitation &amp; commitment to plan &amp; deliver.  This can provide a shared goal &amp; understanding to the whole team.  </p>
<p>This sounds like deadline driven and many people don’t like it.  But I think what we hate is that the deadline is unreasonably set by some managers regardless of the task difficulty and reality.  The Scrum Timebox is not that kind of a thing.  It’s fixed for steady pacing and the team control what items are included in one Sprint.  Commitment is made by the team together.  </p>
<p>In Kanban, The steady pacing is controlled by WIP.  It makes sure everyone can try to focus on one item at at time and reduce multi-tasking.  For the pressure &amp; goal, there is no explicit thing imposed in Kanban.  It’s not so obvious but it exists when you really pay attention on the flow effeciency of the item.  This can be a good thing or bad depending on the preference &amp; maturity of the team.  </p>
<h3 id="Evil_of_endless_item_splitting">Evil of endless item splitting</h3>
<p>Many people don’t quite agree on such rude approach when fitting an item in a box, because cases happen that some team end up splitting the backlog item into finest level as technical items because it is too big to fit into a desired sprint Timebox.  Hence, they argue that the Timebox approach causes the undesired consequence.  </p>
<p>However, before blaming on it, we should know that:  </p>
<ol>
<li><p>Reducing the length of Timebox is NOT the goal of agility  </p>
<p>We should not merely pursue the goal of reducing length of Timebox in order to prove that we are more agile than before.  There is always a boundary or limitation for your business.  Too short Timebox can also introduce overhead.  Length of the Timebox should be chosen depending on how often we want and actually can deliver belancing the cost it takes.  It’s not by merely using item splitting to reduce the timebox while it might need some other technical breakthrough, like introducing the automatic testing.  </p>
</li>
<li><p>No matter use Scrum or Kanban, to be agile, we always want to split the item as small as possible but still should be a usable unit for user to perform testing.  </p>
<p>The purpose for this is to let user validate the output as soon as possible and get feedback.  Make the item to be small shorten the feedback loop.  Don’t split just for fitting into something.  Also, item splitting is not purely development team’s decision and it also need PO’s contribution.  </p>
<p>In an ERP system, to implement a form containing 1000 fields in 5 tabs, is it acceptable to incrementally implement tab by tab or even section by section in one tab?  The strategy might also be different between developing a new product and doing a migration project.  For migration project, to the user, only when the new system that fully provide what old system has, the new system can be regarded as usable and can replace the old one.  During development phase, PO needs to align with user to accept “incrementally growing” version and do UAT gradually as well.  Of course, how development team guarantee that the new feature doesn’t break the old one is also a huge challenge.</p>
</li>
<li><p>Just let it be if the item really cannot be further broken down.  </p>
<p>It happens and also some workable units are still not releasable from business perspective.  Then we have to disable the function or rollback the change.  The process is the same when things go wrong that originally planned item cannot be completed within Sprint.  The challenge here is not using Scrum or Kanban.  It’s whether and how the Source Code Management, Testing &amp; Release process supports these kinds of scenarios.  If we have technical level support here, we can more easily balance the Timebox length and item size or take the more flexible and on-demand delivery approach without the restriction of Timebox.  </p>
</li>
</ol>
<h2 id="Roles">Roles</h2>
<p>Roles are defined in Scrum and not particularly mentioned in Kanban.  And one of opinion in the Kanban is that because no role or job title changed or external role introduced, resistance of change from management or employees should be minimal. But is that means that Kanban doesn’t have any of the role defined in Scrum?</p>
<h3 id="Product_Owner">Product Owner</h3>
<p>No matter what agile methodology or old-fashion water-fall, we always want and need to have PO.  This role is very important and makes final decision on Product, including requirement, priority, scope, etc.  Especially when a Kanban board serves multiple Product, it even requires to involve multiple PO to have alignment on item priority as well.  </p>
<h3 id="Team">Team</h3>
<p>In Scrum, it emphasizes that the team is cross-functional and should be responsible for development, testing, release and anything required for delivering the usable features after each Sprint.  When all things are controlled within one team, for sure life is easier.  </p>
<p>However, traditional organization structure might breakdown the team by speicialty, like development team, testing team, UI/UX team, Release team, Infrastructure team, etc.  When this kind of company need to introduce Scrum into their development process, it requires to do structural change.  Without structure change, it does not work.  </p>
<p>How does Kanban Team looks like then?  How to define starting &amp; ending stage in a Kanban board?  How many team or different parties involved?</p>
<p>One of the selling point in Kanban is that it doesn’t require the company to do structural change.  The essence of Kanban is to change as little as possible, visualize the existing development process and map the value stream instead of introducing any imaginary ideal process or borrowing one from external success story.  Sounds very promising, right?  </p>
<p>There are pros and cons of it.</p>
<p>To define the start and end point for the Kanban board, David mentioned in his <a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402" target="_blank" rel="external">book</a>:  </p>
<blockquote>
<p>Successful teams have tended to stick to adopting workflow visualization with cards and limiting WIP within their own political sphere of control, and negotiating a new way of interacting with immediate upstream and downstream partners.</p>
</blockquote>
<p>For example, when initially adopt Kanban within development team, the start and end point can only cover the development stages, because upstream who provides requirement and downstream who provides testing services are not in control.  So in this case, there is just one team involved here.  </p>
<p>Because the team doing Kanban might not necessary controls the item flow from end to end, it might be more difficult to become real agile from the considering from the whole business flow.  For example, when controlling the WIP at the first stage of Kanban board, the development manager must have agreement with PO.  What is more, chance of the improvement area is to block PO from sending urgent requests from time to time which interrupts the normal development flow and affects quality.  If development manager has less political power than PO and PO doesn’t realize the agility of the company needs his own improvement, it’s difficult for the whole company to become agile.  Power from higher level’s is required then.  </p>
<p>The structure of the team in Kanban depends on the flow visualized in Kanban.  It can be as narrowed as only one development team, or cross department.  Hence, this requires full cooperation from upstream and downstream and the person who introduces Kanban need to have great ability to influence them.  The other side, the person who introduces Scrum most likely has political power and ambition to do the structure change to break down the barriers already.  </p>
<p>Hence, knowing what is in front is important before choosing the radical way of Scrum to reorganize the company structure or the incremental way of Kanban to influence upstream and downstream.  </p>
<p>No matter which way to choose, management must have the ability to drive change among teams or departments.  It’s not just simply adopting a process by following rules and then hoping the company becomes agile one day.  The training on Kanban and Scrum actually should be more on the management level to understand the prerequisite instead of the team to understand the process concept.  It’s more like the growing a culture.</p>
<h3 id="Scrum_Master">Scrum Master</h3>
<p>I heard a special saying that “Actively doing nothing”.  A Scrum Master should be just like a Sheep Dog or Coach who actively do nothing on the team.  </p>
<p>In Kanban, there is no such role because it encourages that everyone involved in the Kanban process looks for the bottleneck and area to improve because everything is transparent and reflected on the board.  </p>
<p>One question may arise that if one day the team can do Scrum very well and nothing needs Scrum Master to coach, will the Scrum Master role be redundant?  </p>
<p>I think the existence of this role depends on whether you think a dedicated facilitator, coach, issue spotter or change driver is required.  To be honest, I think the Kanban way is the ideal situation to pursue because to stay agile, everyone in the team must have agile thinking and culture.  But that is really not easy and sometimes an outsider can more easily facilitate necessary Kanban activities, spot out the problems in the process.  Sometimes we need a neutral judge on the conflict or need a coach because we don’t know the unknown.  </p>
<p>Lately, I am more inclined to have a dedicated “Kanban Master”.</p>
<h2 id="Work_Item_Restriction">Work Item Restriction</h2>
<p>Scrum limits total items committed by the team at the beginning of the Sprint.  When there is a change requested from PO, normally it should be planned on next Sprint.  </p>
<p>Kanban limits the WIP per workflow state.  When upstream wants to introduce urgent item, it’s OK to accept but required to pull out another one if the WIP limit is reached.  And there must be consensus that the lead time of that item will be enlarged.  </p>
<p>Different business model might be suited for different methods or use both in a combination way.  For purely new product development, Scrum and Kanban should be both fine.  But if the team is both developing new product or feature and also need to handle urgent production support, Kanban might be more suitable.  Taking the Scrum approach requires you to consider how the urgent issue should be handled because production urgent issue normally is not accepable to wait until next Sprint.  </p>
<h2 id="Afterword">Afterword</h2>
<p>There is a good mini-book about the difference between Scrum and Kanban in <a href="http://www.infoq.com/minibooks/kanban-scrum-minibook" target="_blank" rel="external">InfoQ</a> and I suggest you to take a look on it.  I like one statement in the foreword very much.</p>
<blockquote>
<p>these are just tools, and what you really want to do is have a full toolkit, understand the strengths and limitations of each tool and how to use them all.</p>
</blockquote>
<h3 id="Series">Series</h3>
<ul>
<li><a href="http://www.thinkingincrowd.me/2015/05/20/Dive-into-Kanban-1-What-is-it/" target="_blank" rel="external">Dive into Kanban (1) - What is it</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/30/Dive-into-Kanban-2-Visualizing-Process/" target="_blank" rel="external">Dive into Kanban (2) - Visualizing Process</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/" target="_blank" rel="external">Dive into Kanban (3) - How Kanban address the estimation headache</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/06/05/Dive-into-Kanban-4-Variability-and-Flow-Interruption/" target="_blank" rel="external">Dive into Kanban (4) - Variability and Flow Interruption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/07/23/Dive-into-Kanban-5-Difficulty-and-Resisted-Opinions-on-Adoption/" target="_blank" rel="external">Dive into Kanban (5) - Difficulty and Resisted Opinions on Adoption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/10/08/Dive-into-Kanban-6-Scrum-vs-Kanban/" target="_blank" rel="external">Dive into Kanban (6) - Scrum vs Kanban</a></li>
</ul>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Kanban" scheme="http://www.thinkingincrowd.me/tags/Kanban/"/>
    
      <category term="Scrum" scheme="http://www.thinkingincrowd.me/tags/Scrum/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dive into Kanban (5) - Difficulties and Resisted Opinions on Adoption]]></title>
    <link href="http://www.thinkingincrowd.me/2015/07/23/Dive-into-Kanban-5-Difficulty-and-Resisted-Opinions-on-Adoption/"/>
    <id>http://www.thinkingincrowd.me/2015/07/23/Dive-into-Kanban-5-Difficulty-and-Resisted-Opinions-on-Adoption/</id>
    <published>2015-07-23T13:50:49.000Z</published>
    <updated>2015-12-19T12:58:01.000Z</updated>
    <content type="html"><![CDATA[<p>As you have gone this far to know what Kanban is and the benefits it can bring, do you eagerly attempt to adopt in your team or company?  Hold on a little bit first and you should know what difficulties or resisted opinions you may encounter.  </p>
<h2 id="Management_level">Management level</h2>
<h3 id="Adoption">Adoption</h3>
<p>It’s said that Kanban can evolve from bottom to top, which means you can adopt it within the team you can control first and then gradually influence your partners or external parties.  However, this approach is still very difficult.  </p>
<p>You should have some power to say NO.  The reason is that you have to control the tasks/items pushed from the higher level or external parties.  Else, it’s difficult to setup WIP and your team can be frequently interruptted if the tasks/items arrives everywhere.  Hence, it’s better if you can leverage your tasks and resources.  </p>
<p>Do you feel desperate if you don’t have positional power or it’s hard to say no?  There is still chance.  Remember that the first step of applying Kanban is to visualize the process and showing the exact situation your team is encountering.  Hence, it’s good chance to sell the Kanban idea if there is some kind of figures can that how messy the situation is, how much effort is wasted, how many tasks per person concurrently, how many recurring blocking issues or requirement quality is not good, etc.  </p>
<h3 id="WIP_Limit">WIP Limit</h3>
<p>It’s hard to persuade the management that there is WIP limit set to the team and NO work can be accepted if resource is full.  Same as above that you can show what the current situation is and see if you can get figures that, concurrently how many tasks each member normally works on.  </p>
<p>David once shared a funny story.  He met with the development and marketing head for one of his consultation client.  Marketing head is complaining that their requests are not being served well and the lead time is too long.  The development head said that each person in his team is already handling average 7 items concurrently.  David asked the marketing head whether they think development team is already doing their best they can?  What do you think about 7 items per person?  Is it too many or too few?  The marketing head has no hesitation on expressing that 7 items per person is too many but he also thinks 1 item per person doesn’t sound realistic.  After David gradually increase the WIP, marketing head agree on around 3/4 items per person.  </p>
<p>Actually, it’s obvious and intuitive that most of the people can do one thing best without interruption and cannot do things well when multi-tasking.  Afraid of setting WIP is because management is concern on the resource utilization when there is blocking issue.  </p>
<h4 id="Supporting_arguments">Supporting arguments</h4>
<p>Once you encounter above situation, you might need some supporting theories or arguments.  </p>
<ol>
<li><p>Change from utilization to flow management.  </p>
<p> A smooth flow enables us to react and change facing the challenging reality due to the nature that development process contains many variabilities.  In parking lot, we can emphasize on utilization because there is almost no variability affecting parking space.  But on the road, we need to measure and consider how cars flow smoothly because there are too many variabilities.  Lower WIP and enabling slack, which likes limiting number of cars on the road, are ways to achieve agility.  </p>
</li>
<li><p>Multi-tasking has negative impact on quality.  </p>
<p> First, there is causation between WIP and average lead time, and the relationship is linear.  That is described by Little’s Law in Queuing Theory.  Second, there is also observation shared by David in his <a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402" target="_blank" rel="external">book</a>:  </p>
<blockquote>
<p>Longer lead times seem to be associated with significantly poorer quality. In fact, an approximately six-and-a-half times increase in average lead time resulted in a greater than 30-fold increase in initial defects. Longer average lead times result from greater amounts of work-in-progress.</p>
</blockquote>
<p> Hence, smaller WIP can bring good quality beside shorter lead time.  </p>
</li>
</ol>
<h3 id="Defer_Commitment">Defer Commitment</h3>
<p>I met one development head who shares that their boss would prefer to be told that their requests are already being taken and holding in someone’s hand even though that guy hasn’t really spent much quality of time on it.  In the end, the quality might not be good for all items and the lead time for them are all increased because the boss might check the team from time to time and interrupt their progress if he thinks his item is being accepted.  </p>
<p>Obviously, this example shows that, the management don’t understand well when it’s best for the commitment to be made.  They misunderstand that once the team is acknowledged on the tasks, they are committed to it.  I think we can take the canteen as an example.  The people who lines up are not guaranteed to be served and we obviously should not count the meal ready time starting from waiting in line.  The commitment hasn’t been made by the canteen yet.  You can complaint too many guests but not blame serving you poorly.  So, when the commitment is made by the canteen?  The time order is taken.  </p>
<p>Similarly, we should defer our commitment to the stage which indicates we really accept the item.  It should most likely be the time we pulled the item from Requirement stage to In-Dev stage.  Aligning the real starting stage of commitment can better set the expectation and ensure predictable lead time.  </p>
<h2 id="Execution_level">Execution level</h2>
<h3 id="Changing_Communication_Channel">Changing Communication Channel</h3>
<p>At the beginning stage, the behavior of the teams is still using the old habit that communicates through phone, IM or email.  Upstreams don’t create tasks through Kanban cards but offline assign them.  In this case, the communication is NOT through cards and it’s not following pull principle.  The consequence is that downstreams are kept interrupted and they actually know what they need to do without checking or updating on board.  </p>
<p>Hence, the most important thing on execution is that the whole team, especially upstream parties, should communicate with downstreams through Kanban cards and stick to the rule that tasks are pulled instead of being pushed.  </p>
<p>You may wonder that how if there is some really urgent thing that need interruption on the team or even I have to specifically assign a task to someone?  </p>
<ol>
<li><p>First checks the board to see what the team or the person is doing which means checking the urgency between your new tasks, the tasks they are working on, and the cards waiting to be pulled.  </p>
</li>
<li><p>Create a card on board, adjust the priority or put to different lane to indicate different classes of services.  </p>
</li>
<li><p>If it’s really an urgent issue like production support case, after doing above, also offline communicates with the team or specific person to realize that there is really something more important need immediately handle.  Then they would decide themselves whether immediately stop and mark the current card as blocked or wait until current tasks is completed.  </p>
</li>
</ol>
<p>It’s understandable that we cannot avoid adhoc urgent issue and offline communication.  However, we should try our best to indicate it in our communication channel, Kanban board and cards.  Actually, when this is done, it encourages the available team resource to check and pick tasks themselves.  Anyone think they can do the job can pick it up.  Proactive attitude and responsibility can grow and lessen the “It’s not my business” atmosphere.  </p>
<p>There is one thing to notice though.  If it’s not easy for the people to put a new card on Kanban board, they are not willing to do so.  For example, the software or website is tremendously slow or there are too many restrictions, rules or requirements about what should or should not be in the card.  </p>
<h3 id="Resisting_Being_Spied">Resisting Being Spied</h3>
<p>I think no one is willing to be monitored or spied on.  Although Kanban can really shows all workload if we put all tasks on board and communicate through it, by no means it’s intended to spy on everyone.  As mentioned in previous article, Kanban appreciate slack and doesn’t intend to achieve 100% utilization.  Kanban just helps to increase transparency, encourage self-management and pro-active collaboration for problem solving.  </p>
<p>From another perspective, if a boss is really intended to spy on the team, no matter using Kanban or not, he will come up his own method.  So the worse thing is that the team must collect data everywhere to demonstrate that the resource is already fully utilized.  But using Kanban, we don’t need to waste time on those boring, time-consuming and meaningless data collection and the boss can see how busy you are right on Kanban board.  </p>
<h2 id="Afterword">Afterword</h2>
<p>It requires mindset change when using Kanban, no matter on management or execution level.  Human nature resists change.  When we decide to adopt it, we must understand the benefits it brings and what existing problems it can address.  If everyone evaluates that the benefits are more than drawbacks, change is easier.  If not, we should know the reasons behind it.  If you want to persuade someone, interesting thing is that you should know he’s using System 1 or System 2 to argue with you, then you can come up more appropriate solutions.  You can take a look at related books about the different systems, like <a href="http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555" target="_blank" rel="external">Thinking, Fast and Slow</a>.  Try recall the scene that you argued with your girlfriend or wife and no consensus was made.  You two were probably arguing with different systems.  Adopting Kanban requires us to make it flow around the rock like water.  </p>
<h3 id="Series">Series</h3>
<ul>
<li><a href="http://www.thinkingincrowd.me/2015/05/20/Dive-into-Kanban-1-What-is-it/" target="_blank" rel="external">Dive into Kanban (1) - What is it</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/30/Dive-into-Kanban-2-Visualizing-Process/" target="_blank" rel="external">Dive into Kanban (2) - Visualizing Process</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/" target="_blank" rel="external">Dive into Kanban (3) - How Kanban address the estimation headache</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/06/05/Dive-into-Kanban-4-Variability-and-Flow-Interruption/" target="_blank" rel="external">Dive into Kanban (4) - Variability and Flow Interruption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/07/23/Dive-into-Kanban-5-Difficulty-and-Resisted-Opinions-on-Adoption/" target="_blank" rel="external">Dive into Kanban (5) - Difficulty and Resisted Opinions on Adoption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/10/08/Dive-into-Kanban-6-Scrum-vs-Kanban/" target="_blank" rel="external">Dive into Kanban (6) - Scrum vs Kanban</a></li>
</ul>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Kanban" scheme="http://www.thinkingincrowd.me/tags/Kanban/"/>
    
      <category term="Adoption" scheme="http://www.thinkingincrowd.me/tags/Adoption/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dive into Kanban (4) - Variability and Flow Interruption]]></title>
    <link href="http://www.thinkingincrowd.me/2015/06/05/Dive-into-Kanban-4-Variability-and-Flow-Interruption/"/>
    <id>http://www.thinkingincrowd.me/2015/06/05/Dive-into-Kanban-4-Variability-and-Flow-Interruption/</id>
    <published>2015-06-05T14:49:04.000Z</published>
    <updated>2015-12-19T12:57:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="External_Sources_of_Variability">External Sources of Variability</h2>
<p>Within the software development cycle, we often face various kinds of flow blocker issues that slows our progress.  Let’s look into some common areas.  </p>
<h3 id="Requirement">Requirement</h3>
<p>Responding to change, one key point in Agile manifesto, is embraced in Agile development.  However, normally there also exists enforcement or agreement that after user story is defined or at least after development is started, requirement should not be changed.  For example, in Scrum, change should be scheduled as new item in next iteration and no new item should be added after sprint backlog is confirmed.  </p>
<p>The reality is that many teams cannot follow the principle well.  From another point of view, do you think it’s better to waste time on doing something we don’t really want and then do it again?  Or it’s better just stop and change it based on new requirement?  </p>
<p>Clearly, there is no absolute right or wrong answer here.  We should understand our business nature and decide ourselves.  Going to either extreme that no any change can be accepted or any change is welcome anytime without constraints can be terrible.  There must be some disciplines to follow no matter which way you choose.  </p>
<h4 id="The_Kanban_solutions">The Kanban solutions</h4>
<p>In Kanban, changing requirement is acceptable but we must agree that it affects lead time.  And we should also have metrics to measure the quality of requirement and prioritization later on.  </p>
<ol>
<li><p>We can either move back the card to “Requirement” stage or mark it as Blocked by REQ under its current stage regarding the change is big enough to impact development or testing.  </p>
<p>We should have statistics on how many cards ever move back to “Requirement” once started development or how many days are blocked by requirement.  </p>
<p>For example, below diagram shows the blocked statistics.  Y-Axis shows different stages in one Kanban board and X-Axis show the total time items are blocked under particular stage.  And the time is also grouped by different blocking reason.  Say, in “In Dev” stage, all time is blocked due to “Priority” reason which means priority kept changing after developer starts development and that is unhealthy signal.  </p>
</li>
</ol>
<p><img alt="Blocked_Statistics" src="http://77g8zm.com1.z0.glb.clouddn.com/Blocked_Statistics.png"></p>
<ol>
<li><p>If the item is discarded once it’s picked from Backlog, we can also show in Kanban’s Discard area and also we can check how much effort has been wasted on it in the report.  </p>
</li>
<li><p>Start as late as possible if we have statistical Lead Time on hand.  Once we have some historical data so that we know on average, 85%, or 98% case that how long it takes to finish one item, then we can start that item as late as possible to avoid requirement change.  </p>
</li>
</ol>
<h3 id="Environment_Availability">Environment Availability</h3>
<p>This is a very typical flow blocker.  The impact of this factor is normally tremendous especially when this issue is dragged without a permanent solution because environment availability often happens in large scale projects involving many teams.  </p>
<p>Say if environment outage takes at least half day to recover, it’s a signal that our recovery and operation capability is weak or the system design need to be reviewed.  And if we don’t solve the issue at the beginning stage of the project, time and cost wasted will increase exponentially every time we do environment preparation, load testing, production release and disaster recovery.  The later stage same thing happens, the more expensive the cost is.  </p>
<p>We can either have larger WIP or actively pursue issue resolution as described below.  </p>
<h3 id="Expediting_items">Expediting items</h3>
<p>Developers often suffers from expediting items as well, for example, overlooked high priority items in backlog, urgent Report requested from manager, production issue support, etc.  </p>
<p>Defining different classes of services and assigning fixed WIP on each class, or enabling slack in the team has the agility to react.  </p>
<h2 id="General_Solutions_in_Kanban">General Solutions in Kanban</h2>
<p>Below are some general approaches used in Kanban to workaround the blocked items, ease the flow to ensure predictable lead time.  Different approachs have its own benefits or drawbacks.  It should be chosen accordingly.  </p>
<h3 id="Larger_WIP">Larger WIP</h3>
<p>The larger WIP, the less tension the team may feel.  Because idle resource can still pull other items in case there are blocked ones.  However, that cause larger and more unprecitable lead time.  Larger WIP also means the people need to multi-tasking and keep switching context.  Empirically, multi-tasking often cause bad quality.  </p>
<p>What is more, less pressure might consequently has less chance of encouraging continuous improvement.  So, this is recommended for immature organization as starting point only.  </p>
<h3 id="Pursuing_resolution">Pursuing resolution</h3>
<p>Strict WIP control requires the team to relentlessly pursue issue fixing.  It greatly encourages continuous improvement culture but it also requires a more mature &amp; fully cooperated team.  </p>
<h3 id="Class_of_Services">Class of Services</h3>
<p>Separating the work items into different classes of services and also assigning suitable WIP on each class is one useful approach to solve the expediting items or flow interruption issue.  </p>
<p>Take below graph as example, we have separated our items into several classes of services:</p>
<ol>
<li><code>L1 TT</code>: Means level 1 Production issue which is intended to be fixed in 4 hours  </li>
<li><code>L2 TT</code>: Means level 2 Production issue which is intended to be fixed in 1 day  </li>
<li><code>Normal</code>: Normal development item or defect  </li>
<li><code>Intangible</code>: Items has no cost of delay  </li>
</ol>
<p>How to assign WIP depends on the nature of the frequency and volume of different levels of items.  If in initial production launch stage, there might be many production support issues so that you have to put fixed resources in <code>L1 TT</code> and <code>L2 TT</code> in order to react quickly and avoid interrupting normal items’ development.  Then the lead time of normal item can still be predictable and the people responsible for normal item development seldom need multi-tasking, ensuring quality.  However, if the system is already kind of stable, instead of assigning fixed resources to the first two classes, you can arrange some resources in Intagible class who can jump into production issue support when needed.  </p>
<p><img alt="Class_of_Services" src="http://77g8zm.com1.z0.glb.clouddn.com/Class_of_Services.png"></p>
<h3 id="Slack_Capacity">Slack Capacity</h3>
<p>Enabling slack in the team helps to face any unexpected situation, remove regular though not urgent blocker, apply automation to shorten lead time or reduce WIP.  Unless the team has slack, continuous improvement can be luxury because they are all busy chasing after business items.  </p>
<h2 id="Afterword">Afterword</h2>
<p>Variability is the major impact on the flow and so we should examine carefully and address on every source in our own process flow.  To analyze existing flow blocker and work out the strategies in Kanban is not easy.  It should be done as part of <a href="http://www.thinkingincrowd.me/2015/05/29/Dive-into-Kanban-2-Visualizing-Process/" target="_blank" rel="external">visualizing process</a>.  </p>
<p>Later on, we will explore how to define WIP and classes of services in-depth.  And if you would like to have more idea on sources of variability, chapter 19 in <a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402" target="_blank" rel="external">Kanban: Successful Evolutionary Change for Your Technology Business</a> is a good reference.  </p>
<h3 id="Series">Series</h3>
<ul>
<li><a href="http://www.thinkingincrowd.me/2015/05/20/Dive-into-Kanban-1-What-is-it/" target="_blank" rel="external">Dive into Kanban (1) - What is it</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/30/Dive-into-Kanban-2-Visualizing-Process/" target="_blank" rel="external">Dive into Kanban (2) - Visualizing Process</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/" target="_blank" rel="external">Dive into Kanban (3) - How Kanban address the estimation headache</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/06/05/Dive-into-Kanban-4-Variability-and-Flow-Interruption/" target="_blank" rel="external">Dive into Kanban (4) - Variability and Flow Interruption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/07/23/Dive-into-Kanban-5-Difficulty-and-Resisted-Opinions-on-Adoption/" target="_blank" rel="external">Dive into Kanban (5) - Difficulty and Resisted Opinions on Adoption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/10/08/Dive-into-Kanban-6-Scrum-vs-Kanban/" target="_blank" rel="external">Dive into Kanban (6) - Scrum vs Kanban</a></li>
</ul>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Kanban" scheme="http://www.thinkingincrowd.me/tags/Kanban/"/>
    
      <category term="Flow" scheme="http://www.thinkingincrowd.me/tags/Flow/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dive into Kanban (3) - How Kanban address the scheduling & estimation headache]]></title>
    <link href="http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/"/>
    <id>http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/</id>
    <published>2015-05-31T05:06:14.000Z</published>
    <updated>2015-12-19T12:57:50.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.thinkingincrowd.me/2015/05/29/Dive-into-Kanban-2-Visualizing-Process/" target="_blank" rel="external">Visualizing the process in Kanban</a> can reduce communication overhead and unnecessary process.  Besides, it can also help to addresses the common estimation headache in development process from a different perspective.  </p>
<h2 id="Reality">Reality</h2>
<p>Traditional manangement or planning style is that, provding how many man-days or man-hours we have in a typical iteration and the estimation on the items we want to do, manager or product owner picks the items that match the man power and item priority.  However, we still meet a typical situation that the expected time of item is delayed, no matter requirement, development or testing.  we can only postpone or cut the scope when we realized that.  Either way affects the original plan and also has additional cost.  The reason is that estimation is often, if not always, wrong.  Frederick Brooks has spent a whole Chapter 2 in his influential software project manangement book, <a href="http://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959" target="_blank" rel="external">The Mythical Man-Month</a>, to discuss about that many years ago.  If we are taking estimation as commitment, we might have a lot of trouble.  </p>
<h2 id="Do_we_still_need_estimation">Do we still need estimation</h2>
<p>If the estimation we have always been doing is not accurate, and we should not use it for commitment and scheduling, is it still useful?  We should ask ourselves what we originally want it to help us to achieve first.  Below listed some common usages:  </p>
<ol>
<li><p>Resource Utilization  </p>
<p>High utilization is intended to do more thing in fixed time.  However, there will be high risk if we plan our man-days to fully match the time we have in a iteration.  Once there is any issue blocker or change, schedule is affected.  And then we have to adjust or replan which is also costly and might also lead to degrade of quality.  </p>
<p>If another intention of high utilization is to eliminate any slack, like the old way to manage physical worker, that is pathetic.  This thinking assumes that slack does no good to the company or the team.  In fact, this is some kind of trustness issue and treating knowledge worker as cost instead of asset.  </p>
</li>
<li><p>Prioritization  </p>
<p>Sometime we use the estimation to help prioritize items, so call evaluating ROI (Return on Investment).  </p>
</li>
<li><p>Scheduling</p>
<p>There are different purposes for planning or scheduling: When should I start if I want something to be completed at a particular time, when something can be completed if I start it now, or what is the max possible outcome given some resources.  </p>
<p>In order to make sure things can be done as planned, many people add some buffer time into the estimation.  For example, a task required 2 man-days to complete might normally be estimated as 2.5 man-days.  However, how much buffer is appropriate highly relies on personal experience.  Although we can decrease error margin through peer evaluation, task breakdown into smaller unit, etc, many influential factors are out of control, such as low productivity due to multi-tasking, priority shifting, resource turnover, etc.  </p>
</li>
</ol>
<p>Martin Fowler has also written a good article, <a href="http://martinfowler.com/bliki/PurposeOfEstimation.html" target="_blank" rel="external">Purpose Of Estimation</a>.  There is no absolute right or wrong on estimation.  It depends on how we use it.  Effort estimation can still be used for roughly comparing the difficulty among tasks, evaluating whether there is risk on an item so we should come up a simplified version if needed, or prioritizing tasks if they are really equally important.  However, if we use it incorrect or the benefits it brings can be achieved through other methods, then we might not need estimation at all.  Actually, in Agile community, there are some voices about discarding effort estimation and also a movement called #NoEstimates.  If you have interest, you can take a look on below articles:  </p>
<p><a href="http://ronjeffries.com/xprog/articles/the-noestimates-movement/" target="_blank" rel="external">The NoEstimates Movement</a><br><a href="http://www.cio.com/article/2381167/agile-development/-no-estimates-in-action-5-ways-to-rethink-software-projects.html" target="_blank" rel="external">‘No Estimates’ in Action: 5 Ways to Rethink Software Projects</a><br><a href="http://www.infoq.com/news/2015/02/agile-no-estimation" target="_blank" rel="external">No Estimation in Small And Large Scale Agile Projects</a>  </p>
<h2 id="Whether_Kanban_can_help">Whether Kanban can help</h2>
<p>What is Kanban’s perspective?</p>
<ol>
<li><p>Resource Utilization  </p>
<p>Assuming we have shown all the tasks on the Kanban board and the team is communicating through Kanban, then we can really knows what each team member is working on right now and in what stage one task is.  Hence, we do be able to know the workload of each person so that we can tell if there is any slack.  </p>
<p>However, Kanban doesn’t encourage achieving 100% utilization on each stage as well, because slack is important for continuous improvement and creativity.  Like Google’s 20% freetime, LinkedIn’s InCubator, Apple’s Blue Sky and Microsoft’s The Garage program, different company takes similar approach to encourage that.  (<em>Notes: Seems Google took back that already but there are still many companies think it’s useful.</em>)  Purely achieving high utilization should not be the way to manage knowledge worker in the new era anymore.  Peter F. Drucker has written many great books about management which are highly recommended.  </p>
</li>
<li><p>Prioritization  </p>
<p>Real prioritization does not really require estimation to assist.  It should NOT be defined as high, medium, low.  Instead, it should be in sequence of one, two, three, etc.  If we cannot set priority in sequence, it means we still don’t know what the most important thing is yet.  If there is something very important and cannot be broken down, we should always spent all resource and time on it, right?  In case that we cannot tell the priority of some tasks, surely we can use the estimation as reference.  </p>
<p>Kanban cannot help on prioritization.  However, it can transparently shows them on board for everyone and make sure we focus on flow to complete the task as fast and smooth as possible.  </p>
</li>
<li><p>Scheduling  </p>
<p>In Kanban, the metrics we used is lead time.  Because it’s actual time, it includes all possible external factors, say environment, people, task difficulty, etc.  What is more, by looking into this figure statistically, we use statistics to decrease the error margin.  We can understand the team’s delivery productivity once having statistical lead time on hand.  Knowing how long it takes for the same class of service (say, Story, Support, or Defect) to complete in 85% or 98% of the cases than using estimation.</p>
</li>
</ol>
<p>Kanban cannot solve all the problems we have, but it helps us to concentrate on the right thing we should care about.  </p>
<h2 id="Afterword">Afterword</h2>
<p>Estimation is hard and often incorrect.  Once it’s used with wrong objective, it brings unnecessary mental effort on developer and cannot serve as valuable reference for scheduling.  Hence, we should focus on what benefits we would like to achieve through estimation.</p>
<p>If we focus on lead time, especially when we know how our lead time spreads statistically, we have better idea when it’s the latest time we should start and have greater agility if our lead time is short and stable.  </p>
<h3 id="Series">Series</h3>
<ul>
<li><a href="http://www.thinkingincrowd.me/2015/05/20/Dive-into-Kanban-1-What-is-it/" target="_blank" rel="external">Dive into Kanban (1) - What is it</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/30/Dive-into-Kanban-2-Visualizing-Process/" target="_blank" rel="external">Dive into Kanban (2) - Visualizing Process</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/" target="_blank" rel="external">Dive into Kanban (3) - How Kanban address the estimation headache</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/06/05/Dive-into-Kanban-4-Variability-and-Flow-Interruption/" target="_blank" rel="external">Dive into Kanban (4) - Variability and Flow Interruption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/07/23/Dive-into-Kanban-5-Difficulty-and-Resisted-Opinions-on-Adoption/" target="_blank" rel="external">Dive into Kanban (5) - Difficulty and Resisted Opinions on Adoption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/10/08/Dive-into-Kanban-6-Scrum-vs-Kanban/" target="_blank" rel="external">Dive into Kanban (6) - Scrum vs Kanban</a></li>
</ul>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Kanban" scheme="http://www.thinkingincrowd.me/tags/Kanban/"/>
    
      <category term="Lead Time" scheme="http://www.thinkingincrowd.me/tags/Lead-Time/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dive into Kanban (2) - Visualizing Process]]></title>
    <link href="http://www.thinkingincrowd.me/2015/05/30/Dive-into-Kanban-2-Visualizing-Process/"/>
    <id>http://www.thinkingincrowd.me/2015/05/30/Dive-into-Kanban-2-Visualizing-Process/</id>
    <published>2015-05-29T16:20:10.000Z</published>
    <updated>2015-12-19T12:57:43.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Process_and_Visualization">Process and Visualization</h2>
<p>I think no one will question the importance of process, but it actually also kills a company’s agility and creativity if it becomes some bureaucracy procedures for doing certain things.  </p>
<p>It’s very easy to add process which possibly is some governace on an incident happened once only but it’s hard to remove an established one.  That is because almost no one can tell the historical reason of adding it or has the guts to suggest removing it.  It is hard to provide compelling reason or evidence to prove that removing it has great benefit or the people is afraid of taking the responsibility for something bad happened if removing it.  </p>
<p>Visualizing process is the <strong>first and the most important</strong> thing in using Kanban.  With proper visualization in Kanban, we can see if there is any process that prevents the item flow efficiently and consider area to improve.</p>
<p>Also, about the communication cost within the process, if we have put most of the valuable information on the Kanban board already, why borther to send out emails to ask a group of people and wait feedback?  </p>
<h2 id="Sample_Process">Sample Process</h2>
<p>Let’s see the process established in one company:</p>
<ol>
<li><p><strong>Business Analysis</strong> collect requirement, confirms priority and a particular release schedule. Then walkthrough requirement to development &amp; QA team.   </p>
</li>
<li><p>Shared <strong>Development and QA team</strong> estimate efforts given the item list and feedback if the items can be included.  </p>
</li>
<li><p>When development is done in time, development team raises a Release Candidate Request to <strong>Release team</strong> for central manangement.  It’s some kind of paperwork to indicate that you have done development testing, QA walkthrough, review with system and/or DBA team for reviewing necessary change if required.  </p>
</li>
<li><p>After release team confirms the item can be included in a particular release, development team can request QA environment deployment from Release team.  </p>
</li>
<li><p>Once QA environment is ready by Release team, <strong>Development team</strong> need to do integration testing and mark the item as “Ready for Testing” so that QA steps in for full testing.  </p>
</li>
<li><p>If QA testing is completed without much blocking issue before final Code Freeze time, release team will include the release item to do PP deployment.</p>
</li>
<li><p><strong>QA</strong> starts PP regression testing and see if there is any issue.</p>
</li>
<li><p>When regession testing is done, <strong>Release team</strong> packs code for arranging prodction release.  </p>
</li>
</ol>
<p><em>Notes: There are many daily or weekly reports gathering item progress &amp; blocking issues within this period.</em>  </p>
<p>You can see how many steps, different groups of people involved here and each step involves some kind of <strong>signal</strong> to indicate it can be ready for next stage to continue the process.  Bunches of email discussion, confirmation can happen especially when something unexpected happens.  </p>
<p>If we visualize the process using the Kanban below and all different teams based on the item status on the board to do actions accordingly, lot of communication cost can be avoided.  </p>
<h2 id="Visualization">Visualization</h2>
<p><img alt="Kanban Board" src="http://thinkingincrowd.u.qiniudn.com/Kanban_Visualize_Process.png"></p>
<p>Here is how the process integrates within the Kanban board.  </p>
<ol>
<li><p>Before items’ priority is confirmed, they are all put under <strong>Backlog</strong> stage.  Once priority is confirmed, then they can be put under <strong>Prioritized</strong> stage. The most important one should be listed at top so that the issue of balancing between different business unit can be easily solved.  As this company’s working style still involves effort estimation, we can put effort estimation as task in the work item or make it as pull condition in Prioritized stage.</p>
</li>
<li><p>If the development of one work item is done, it can be marked as <strong>Completed</strong> (<span style="color: #7ED321">Green</span> border of the card) so that it can be treated as a signal to be pulled to next stage.  </p>
</li>
<li><p>Once release team approve the item and finish QA environment deployment, they can also mark the item as Completed in <strong>RC Request</strong> stage.</p>
</li>
<li><p>If DevInt Test is done, development team can mark the card as Completed in <strong>Dev-Int Test</strong> stage.  </p>
</li>
<li><p>Similar approach can be used on <strong>QA Test</strong>, <strong>PP Deploy</strong> and <strong>PP Regression</strong> stages.  </p>
</li>
<li><p>If any work item is <strong>Blocked</strong>, it can be easily told from the <span style="color: red">Red</span> border of the card and what the reason is.  Further, the blocked time and reason can be used to calcualte the flow efficiency later.  </p>
</li>
</ol>
<p>Hence, visualizing the process in Kanban helps us clearly know in which stage the working item is and what followup actions are required to continue the process or clear the blocking issues. A picture is worth a thousand words.  </p>
<h2 id="Afterword">Afterword</h2>
<p>Process visualization in Kanban is the most essential step.  The difficulty on visualization is how to make policies explicit for everyone in the process.  And we <strong>must reflect the real process</strong> in the company/team instead of copying a existing Kanban board from others or design an ideal version in your mind.  </p>
<h3 id="Series">Series</h3>
<ul>
<li><a href="http://www.thinkingincrowd.me/2015/05/20/Dive-into-Kanban-1-What-is-it/" target="_blank" rel="external">Dive into Kanban (1) - What is it</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/30/Dive-into-Kanban-2-Visualizing-Process/" target="_blank" rel="external">Dive into Kanban (2) - Visualizing Process</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/" target="_blank" rel="external">Dive into Kanban (3) - How Kanban address the estimation headache</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/06/05/Dive-into-Kanban-4-Variability-and-Flow-Interruption/" target="_blank" rel="external">Dive into Kanban (4) - Variability and Flow Interruption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/07/23/Dive-into-Kanban-5-Difficulty-and-Resisted-Opinions-on-Adoption/" target="_blank" rel="external">Dive into Kanban (5) - Difficulty and Resisted Opinions on Adoption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/10/08/Dive-into-Kanban-6-Scrum-vs-Kanban/" target="_blank" rel="external">Dive into Kanban (6) - Scrum vs Kanban</a></li>
</ul>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Kanban" scheme="http://www.thinkingincrowd.me/tags/Kanban/"/>
    
      <category term="Process" scheme="http://www.thinkingincrowd.me/tags/Process/"/>
    
      <category term="Flow" scheme="http://www.thinkingincrowd.me/tags/Flow/"/>
    
      <category term="Visualization" scheme="http://www.thinkingincrowd.me/tags/Visualization/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dive into Kanban (1) - What is it?]]></title>
    <link href="http://www.thinkingincrowd.me/2015/05/20/Dive-into-Kanban-1-What-is-it/"/>
    <id>http://www.thinkingincrowd.me/2015/05/20/Dive-into-Kanban-1-What-is-it/</id>
    <published>2015-05-20T12:55:41.000Z</published>
    <updated>2015-12-19T12:57:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="What_is_Kanban">What is Kanban</h2>
<p><a href="http://en.wikipedia.org/wiki/Kanban" target="_blank" rel="external">Kanban</a> can be considered as a <strong>pull</strong> system <strong>visualizing</strong> the <strong>work-flow</strong> through <strong>stage transition</strong> under certain <strong>constraints</strong>.  </p>
<p>It’s still abstract, right?  Please check below sample Kanban board and I will explain each of the highlighted points below.  </p>
<p><img alt="Kanban Board" src="http://thinkingincrowd.u.qiniudn.com/Kanban_Simple_Flow.png"></p>
<h2 id="Work-flow_&amp;_Stage_Transition">Work-flow &amp; Stage Transition</h2>
<p>It’s not hard to understand, when you are trying to get something done, it always involves stage transition.  At least two stages, in progress and done, right?</p>
<p>In software development field, before one product/feature is available for customer, it normally goes through <strong>collecting requirement</strong>, <strong>requirement analysis</strong>, <strong>design</strong>, <strong>coding</strong>, <strong>testing</strong>, and <strong>release</strong>.  These can be mapped to each column above and considered as the transition stages involved in work-flow especially when each stage is responsible by different person or team.  </p>
<p>Hence, before applying Kanban methodology to the development process, it’s a must we understand how our process is and how the stages are transtioned.</p>
<h2 id="Visualize">Visualize</h2>
<p>Human-beings are better at recognizing and understanding the world visually.  Work process in software development is quite complex when many parties are involved and especially when the governing policies or management is in a mess.  </p>
<p>By visualizing the process with a board like above, it’s easy for everyone to track the work item’s progress and spot out the blocking issue or bottleneck if there is any.</p>
<h2 id="Constraints">Constraints</h2>
<p>The constraints applied in Kanban is called <strong>WIP</strong> (Work in Progress).  This is what differentiates Kanban from other “Card-Wall” style task management system, like <a href="http://trello.com/" target="_blank" rel="external">Trello</a>.  Constraints are those number applied on top of each stage which implies that at most that number of tasks put under that stage in parallel.  In the example above, only 6 tasks can be started in development at the same time.  </p>
<p>We can simply assume the constraint is the number of people in different teams although one person might not be limited to do one thing at a time.  But this idea should be easier to understand at first and we can start from that.  </p>
<h2 id="Pull">Pull</h2>
<p>This is an interesting verb.  It’s the opposite of <strong>Push</strong>.  I think most of the developers can feel the meaning behind it pretty well.  Most of the time, the work items or tasks are assigned/pushed from higher level.  </p>
<p>But in Kanban, it emphasize that the work items must be pulled from downstream.  Once, the downstream is busy which means the constraints mentioned above is met, then the work-flow has to be stopped until there is vacancy again in downstream.  </p>
<p>Not hard to imagine, upstream perfers <strong>Push</strong> more than <strong>Pull</strong> while the downstream should feel the opposite.  The reasons are due to out-dated management philosophy and/or level of trust among teams which Kanban is intended to improve.  </p>
<h2 id="Afterword">Afterword</h2>
<p>If you have some basic understanding on Kanban now and curious on what real benefits it can bring, I suggest you to read the great intro book <strong><a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402" target="_blank" rel="external">Kanban: Successful Evolutionary Change for Your Technology Business</a></strong> by David J Anderson.  </p>
<h3 id="Series">Series</h3>
<ul>
<li><a href="http://www.thinkingincrowd.me/2015/05/20/Dive-into-Kanban-1-What-is-it/" target="_blank" rel="external">Dive into Kanban (1) - What is it</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/30/Dive-into-Kanban-2-Visualizing-Process/" target="_blank" rel="external">Dive into Kanban (2) - Visualizing Process</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/" target="_blank" rel="external">Dive into Kanban (3) - How Kanban address the estimation headache</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/06/05/Dive-into-Kanban-4-Variability-and-Flow-Interruption/" target="_blank" rel="external">Dive into Kanban (4) - Variability and Flow Interruption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/07/23/Dive-into-Kanban-5-Difficulty-and-Resisted-Opinions-on-Adoption/" target="_blank" rel="external">Dive into Kanban (5) - Difficulty and Resisted Opinions on Adoption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/10/08/Dive-into-Kanban-6-Scrum-vs-Kanban/" target="_blank" rel="external">Dive into Kanban (6) - Scrum vs Kanban</a></li>
</ul>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Kanban" scheme="http://www.thinkingincrowd.me/tags/Kanban/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2014 Retrospect and 2015 Goal Setting]]></title>
    <link href="http://www.thinkingincrowd.me/2015/01/04/2014-retrospect-and-2015-goal-setting/"/>
    <id>http://www.thinkingincrowd.me/2015/01/04/2014-retrospect-and-2015-goal-setting/</id>
    <published>2015-01-04T14:53:24.000Z</published>
    <updated>2015-12-31T13:27:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="总结">总结</h2>
<h3 id="个人学习">个人学习</h3>
<p>主要是今年年中做的<a href="http://www.thinkingincrowd.me/2014/07/31/half-year-summary/" target="_blank" rel="external">小结</a>里面说的东西，其实上半年还是私人时间比较足，做了些东西。下半年就疲于公司项目和加班，加上个人精力好像没之前那么旺盛了，所以书也没什么看，也没什么大的产出，博客更是没越来越少的样子。</p>
<h3 id="工作">工作</h3>
<p>2015 年初是最上面管理层定下的项目上线的 Deadline 了，各部门的 PM, BA 开始密集的看目前有什么缺失的功能在上线前必须要提供给用户才能完成整个业务流程，然后各种需求都涌出来了。项目管理，各部门协作的问题变得更乱，”敏捷” 变为按 Deadline 倒推出每个功能必需完成的时间点。情况可想而知。</p>
<p>去年的团队发生了比较大的变动。我的小组从 6 人，断断续续变成了 3 人。其中一个主要的并且也是最复杂的模块的主程和副程都陆续离开了。而且有一段时间，还要借两个人到别的小组去帮助完成他们的模块。人员的管理和工作的安排让我很头疼。因为人手不足，我写代码时间必需增大，但是同时还是要应付各种沟通, 产品线上支持等，真是感觉力不从心。</p>
<p><a href="http://en.wikipedia.org/wiki/Kanban" target="_blank" rel="external">Kanban</a> 在上半年引入和实施了一小会，团队还没找到太多感觉，再加上上面说的一些原因，很难实施下去。去年希望加强的 Code Review 和 Unit Test 这些更是想都不用想了。</p>
<p>2/3 个月前，我负责的一个模块，因为个人疏忽，导致上线后产生重大影响，当天需要紧急回滚。后面连续两三个星期需要白天响应用户和解决问题，晚上加班加点的对数据打补丁，真是焦头烂额。唯一值得庆幸的是，当年我重点培养的新人，也是作为我的副手，在这次事件和我一起解决问题和加班，算是让我得到一点安慰。感觉当初的选择和花时间来教他都是值得的。</p>
<h3 id="时间安排">时间安排</h3>
<p>学习时间：<br>今年后半年自由时间比较少了，精力也感觉没那么足。最多就上下班车里的30分钟，和晚上 10 点到 11 点。早上 5:30 起不来了，变成了 6:30。有时帮忙带一下儿子，有时跳一会绳，出门前的时间就没怎么剩下了。还只是尽量挤挤吧。</p>
<p>家庭时间：<br>一直占个人时间大头。需要尽量陪儿子多一些，分担一下老妈的精神和肉体压力。儿子性格目前像老婆，做一些事情上不能逼太急。但是老妈又是做事比较急那种，什么刷牙，吃饭，洗澡，出门上学，老是要唠叨他。而且他还比较有自己的想法，不太愿意按大人说的做，尤其是在我们语气比较硬的情况下，他就会像是对着干是的。感觉他的心理压力有点大，晚上睡个觉都还可以做梦和他人争论个什么东西。所以，首要任务是用更耐心和引导的方式让他做一些事情，舒缓他的压力。也让老妈在一些小事上就尽量由他，自己也不用那么动气，免得血压高。因为毕竟让他自己定个时间做，他还是可以做完的。</p>
<p>锻炼时间：<br>还是要尽量坚持每天早上固定30分钟左右的锻炼时间。去年中跳绳 1500 下基本满足，后期身体抱恙后又懈怠了些。明年继续。</p>
<h3 id="善事">善事</h3>
<p>还在给联合国儿童基金会捐助一点。壹基金的停了。原因是中间只是想换个帐号来处理，后来这个换帐号还搞得很麻烦，索性停了。今年最有意思的是，人生第一次去当志愿者，探望聋哑儿童，是和老婆，儿子一起去的。算是把前年的想法，实现了一点点。</p>
<h2 id="展望">展望</h2>
<h3 id="做什么">做什么</h3>
<p>其实自己一直想做个什么东西出来，主要是用自己喜欢的技术来尝试实现前公司一些没有做好的部分。这个东西就是一个多租户，自定义表单，自定义业务流程的系统。之前是想做一个适用于企业 ERP 的自定义流程的系统出来。但是接触过一些不同的企业 ERP 才深知流程的复杂。这样的怪兽系统不是我一个人的能力可以做到的。所以，今年，或者今后，闲时就专注做一个围绕 Kanban 的项目管理系统。小则练技术和架构，大则做产品让大家使用。</p>
<h3 id="为什么">为什么</h3>
<ol>
<li>技术上看，它天然是个多租户系统。必须支持多企业，多项目进行管理。自定义表单也是需要的，因为各企业对项目故事点，任务等都需要加适合自己的字段。关于自定义流程，因为已经是基于 Kanban，所以流程是会通过 Kanban 反映出来，不像企业 ERP 那些流程那么复杂，应该还在我能力范围之内。</li>
<li>Kanban 是我很喜欢的一个理论方法。虽然我的实践还很少，但是它的一些理念我甚是喜欢，比如，限定在做工作项 (WIP)，从已有流程中演进，促进各团队相互协作，提高自主性，找出瓶颈和优化流程的 Kaizen 的文化。我承认我的想法是有点理想化，但是让程序员少加班，减少浪费，工作生活平衡是我的梦想。</li>
<li>去年在公司里面遇到的团队和项目管理问题，希望能够在今年能够好好的处理。如何激励团队，应用 Kanban 来合理化项目流程是我觉得最主要的切入点。深入实践 Kanban 在团队的应用取得的经验可以让我完善这样的一个系统。</li>
</ol>
<h3 id="不同点">不同点</h3>
<p>现在的项目管理系统这么多，我想做的这个和他们有什么不同呢？</p>
<p>现在的项目管理系统据我所知，有传统的复合型，如收费昂贵的 Rally, 平民的 Jira, 和免费的 Redmine 等。它们不附属任何理论方法，上面可以用 Scrum / XP / Kanban，包罗万有。但是一般以 Scrum 和 XP 多一些，因为 Kanban 比较新。还有另一种是简易卡片型的，初看上去像 Todo list 或者 Kanban 系统。出名的有 Trello，国内很多如 Teambition，Tower 等。而我想做出来的是完全基于 Kanban 的，为 Kanban 订制的。</p>
<h3 id="目前状况">目前状况</h3>
<p>目前用的是 Node.js，MongoDB 和 AngularJS，自己一个慢慢磨。悲剧的是工作量还不小，我这个伪前端除了把后端的逻辑写完，前端凑合的页面设计真是惨不忍睹。只能在功能实现前凑合一下了，呵呵。功能实现后再把前端设计搞好，估计可以从伪前端升级成初级的了。</p>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Goal" scheme="http://www.thinkingincrowd.me/tags/Goal/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Statistical Inference 课后小结]]></title>
    <link href="http://www.thinkingincrowd.me/2014/09/25/statistical-inference-summary/"/>
    <id>http://www.thinkingincrowd.me/2014/09/25/statistical-inference-summary/</id>
    <published>2014-09-25T14:58:46.000Z</published>
    <updated>2015-05-20T15:09:56.000Z</updated>
    <content type="html"><![CDATA[<p>好不容易才把 <a href="https://www.coursera.org/course/statinference" target="_blank" rel="external">Statistical Inference</a> 的课上完, 真是有点吃力.  简略把教的东西列出来吧, 方便日后再复习.</p>
<h2 id="概率">概率</h2>
<h3 id="条件概率_(Conditional_Probability)">条件概率 (Conditional Probability)</h3>
<p>当 B 发生的概率为 P(B) 时, A 发生的概率为 <code>P(A|B) = P(A ∩ B) / P(B)</code>.<br>如果 A 和 B 是完全独立的事件, 那么 <code>P(A|B) = P(A)P(B) / P(B) = P(A)</code>.</p>
<h3 id="Bayes’_rule">Bayes’ rule</h3>
<p><code>P(B|A) = P(A|B)P(B) / (P(A|B)P(B) + P(A|B𝑐)P(B𝑐))</code></p>
<p><code>P(B𝑐) = 1 - P(B)</code></p>
<h3 id="诊断测试_(Diagnostic_test)">诊断测试 (Diagnostic test)</h3>
<p>首先, 诊断测试里面有几个定义先要搞清楚：</p>
<ul>
<li><em>+</em> 测试为患病的情况</li>
<li><em>-</em> 测试为没有患病的情况</li>
<li><em>D</em> 确定患病的情况</li>
<li><em>D𝑐</em> 确定没有患病的情况</li>
<li><em>sensitivity</em> 当确实患病时, 测试为患病的概率 <code>P(+ | D)</code></li>
<li><em>specificity</em> 当确实没有患病时, 测试为没有患病的概率 <code>P(- | D𝑐)</code></li>
<li><em>positive predictive value</em> <code>P(D | +)</code></li>
<li><em>negative predictive value</em> <code>P(D𝑐 | -)</code></li>
<li><em>prevalance of the disease</em> <code>P(D)</code></li>
</ul>
<p>有个很有趣的例子：<br>假如在一项 HIV 的研究中, 有一种 HIV 抗体检查的 sensitivity 是 99.7%, specificity 是 98.5%. (看起来这个抗体检查应该很准, 对吧？)  如果一个人, 从 0.1% prevalence HIV 的群体中抽出来, 他做了这个抗体检查后, 结果是阳性也就是检查结果显示他应该有 HIV.  那么, 你觉得他确实患病的概率有多高呢？</p>
<p>那我们来看看 positive predictive value 也就是 <code>P(D | +)</code> 概率是多少.  用 Bayes’ rule 公式代入去算一下可得 0.062.  不是很高吧？这么低的数值是由于低 prevalence 造成的。但是如果说你知道那个人是有用毒品习惯, 并且和 HIV 人士有接触。你会不会觉得他患病的概率更高？  其实影响的因素 prevalence 一点没变, 可是我们对所谓证据的诠释不同了.</p>
<p><strong>Likelihood ratios</strong></p>
<p><strong>DLR+</strong>, diagnostic likeihood ratio of a positive test, is <code>P(+ | D) / P(+ | D𝑐)</code></p>
<pre><code><span class="code">`sensitivity / (1 - specificity)`</span>
</code></pre><p><strong>DLR-</strong>, diagnostic likeihood ratio of a negative test, is <code>P(- | D) / P(- | D𝑐)</code></p>
<pre><code><span class="code">`(1 - sensitivity) / specificity`</span>
</code></pre><p>根据 Bayes’ rule 可以推导出：</p>
<p><code>P(D | +) / P(D𝑐 | +) = DLR+ * P(D) / P(D𝑐)</code></p>
<p>post-test odds of D = DLR+ * pre-test odds of D  (odds: 一个概率除以 1 减去它)</p>
<p>相同道理： <code>P(D | -) / P(D𝑐 | -) = DLR- * P(D) / P(D𝑐)</code></p>
<p><strong>IID</strong></p>
<ul>
<li><em>Independent</em>: statistically unrelated from one and another</li>
<li><em>Identically distributed</em>: all having been drawn from the same population distribution</li>
</ul>
<h2 id="期望值_(Expected_Value)">期望值 (Expected Value)</h2>
<p><strong>Mean</strong>: 分布的中值特征<br><strong>Variance</strong> 和 <strong>Standard Deviation</strong>: 分布性的特征 (How spread out)</p>
<p>Sample expected values 是用来推测 population 的特征的。</p>
<p><code>E[X] = ∑ xp(x)</code> 表示了数据分布的位置和权重的中值。比如, 丟硬币:</p>
<p><code>E[X] = 0 * 0.5 + 1 * 0.5 = 0.5</code></p>
<p>如果说硬币正反不是概率均等, 而是正面的概率为 <code>p</code>, 那 <code>E[X] = 0 * (1 - p) + 1 * p = p</code></p>
<p>同理掷骰子, 数字面值的中值, 那就是 <code>E[X] = 1 * 1/6 + 2 * 1/6 + ... + 6 * 1/6 = 3.5</code></p>
<h3 id="Mean">Mean</h3>
<p>通过取样, 来获取中值, 这个中值本身, 其实也是随机变量, 它的分布也是有个中值的。这个中值, 如果和它原来要推导的中值本身是一致的, 我们就会说这个推导是公正的 (unbiased)。</p>
<p>这个说法有点拗口, 其实是这样的是. 比如说, 丟硬币本身的中值是 0.5.  那么, 我们有两种做法：</p>
<ol>
<li>一种是丢一次硬币, 记录下一次 0 或者 1, 重复丢 n 次, 然后算它本身的中值就是 0.5.  无限下去的理论值就是 population mean.</li>
<li>另一种就是丢 m 次硬币, 先算一次中值 (sample mean), 记录下这个中值, 再重复丢 n 次, 最后再算一次中值. 其实也就是中值的中值.</li>
</ol>
<p><em>中值的中值</em> 如果说和 population mean 是一致的, 那这个推导就是公正的了. 而且, 如果算 sample mean 的数据 (上面的 m) 越多, 那么中值分布的质量函数 (density / mass function) 最越集中在 population mean.</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GetSampleMean &lt;- <span class="keyword">function</span>(count) {</div><div class="line">  data.frame(mean = replicate(<span class="number">5000</span>, mean(sample(c(<span class="number">0</span>, <span class="number">1</span>), count, replace = <span class="literal">T</span>))), cnt = count)</div><div class="line">}</div><div class="line"></div><div class="line">data.df &lt;- rbind(GetSampleMean(<span class="number">10</span>), GetSampleMean(<span class="number">20</span>), GetSampleMean(<span class="number">30</span>))</div><div class="line"></div><div class="line"><span class="keyword">library</span>(ggplot2)</div><div class="line">qplot(x = mean, data = data.df, facets = . ~ cnt, fill = cnt)</div></pre></td></tr></table></figure>

<p><img alt="Sample Mean" src="http://thinkingincrowd.u.qiniudn.com/sample_mean.png"></p>
<h3 id="方差_(Variance)">方差 (Variance)</h3>
<p>随机变量到中值的距离 <code>Var(X) = E[(X - μ)2] = E[X²] - E[X]²</code></p>
<p>假如一个硬币正面的概率是 p.  那它的 Variance 就是:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">E</span>[X] = <span class="number">0</span> * (<span class="number">1</span> - p) + <span class="number">1</span> * p = p</div><div class="line"><span class="keyword">E</span>[X²] = <span class="keyword">E</span>[X] = p</div><div class="line">Var(X) = <span class="keyword">E</span>[X²] - <span class="keyword">E</span>[X]² = p - p² = p(<span class="number">1</span> - p)</div></pre></td></tr></table></figure>

<p><strong>标准差 (Standard Deviation)</strong>: Variance 的平方根, S<br><strong>标准误 (Standard Error)</strong>: S/√n</p>
<p>同中值一样, 样本的 Variance, S², 也是随机变量, 它的分布也是集中在 population variance, σ².</p>
<h2 id="常见的概率分布模型">常见的概率分布模型</h2>
<h3 id="伯努利分布_(Bernoulli_distribution)">伯努利分布 (Bernoulli distribution)</h3>
<p>又名两点分布或者 0-1 分布.  通常定 1 值的概率为 p, 0 值的概率为 (1 - p).  它的中值为 p, 方差为 p(1 - p).</p>
<p><strong>伯努利試驗 (Binomial trial)</strong></p>
<p>这个试验的随机变量，其实是伯努利分布随机值的总和 <code>X = ∑ⁿXᵢ</code>, Xᵢ 为 Bernoulli(p).</p>
<p>它的质量函数 (mass function) 是: <code>P(X = x) = (n x) * pˣ * (1 - p)ⁿ⁻ˣ</code>. <code>(n x)</code> 是从 n 中取 x 的组合数.</p>
<p>举个例子说，如果一个家庭有 8 个孩子, 7 个是女的，没有孪生.  如果生男生女的概率为 0.5, 那么 8 个孩子中，生 7 个或以上的女孩概率是多大?</p>
<p><code>(8 7) * 0.5⁷ * (1 - 0.5)¹ + (8 8) * 0.5⁸ * (1 - 0.5)⁰ ≈ 0.04</code></p>
<p>对应的 R 代码为:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">choose(<span class="number">8</span>, <span class="number">7</span>) * <span class="number">0.5</span>^<span class="number">8</span> + choose(<span class="number">8</span>, <span class="number">8</span>) * <span class="number">0.5</span>^<span class="number">8</span></div><div class="line"></div><div class="line">pbinom(<span class="number">6</span>, size = <span class="number">8</span>, prob = <span class="number">0.5</span>, lower.tail = <span class="literal">FALSE</span>)</div></pre></td></tr></table></figure>

<h3 id="正态分布_(Normal_distribution)">正态分布 (Normal distribution)</h3>
<p>如果它的中值是 μ, 方差是 σ², 它的表达式可以写成 <code>X ~ N(μ, σ²)</code>.  如果 μ = 0, σ² = 1, 它就是标准正态分布, 通常用 Z 来表示.</p>
<p>如果一个随机分布是正态分布 <code>X ~ N(μ, σ²)</code>, 那么经过 <code>(X - μ) / σ</code> 转换后的随机变量就会是标准正态分布.<br>反过来，如果 Z 是标准正态分布, <code>X = μ + σZ ~ N(μ, σ²)</code>.</p>
<p><strong>正态分布的特性</strong></p>
<ol>
<li>68%, 95%, 99% 的正态质量在 1, 2, 3 的标准差内.</li>
<li>-1.28， -1.645， -1.96， -2.33 分别是标准正态分布的 10th, 5th, 2.5th, 1st 区域</li>
<li>由于对称性, 1.28， 1.645， 1.96， 2.33 分别是标准正态分布的 90th, 95th, 97.5th, 99th 区域</li>
</ol>
<p>比如说 N(μ, σ²) 分布的 95th percentile 是多少?</p>
<p><code>μ + σ * 1.645</code> 或者</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qnorm(<span class="number">.95</span>, mean = μ, sd = σ)`</div></pre></td></tr></table></figure>

<p>再举个例.  如果一个网面的点击数平均值在 1020, 标准差在 50, 那么点击数超过 1160 的概率是多少?</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pnorm(<span class="number">1160</span>, mean = <span class="number">1120</span>, sd = <span class="number">50</span>, lower.tail = <span class="literal">F</span>)</div></pre></td></tr></table></figure>

<h3 id="(Poisson_distribution)">(Poisson distribution)</h3>
<p>它的中值和方差都是 λ.  可用于对 counts, event-time or survival data, contingency table 进行建模.<br>当随机变量的 n 很大，概率 p 很小的时候，Poisson 的分布可以用于近似于 Binomial 分布.</p>
<p>当它用来对速率的随机变量建模时:</p>
<p><code>X ~ Poisson(λt)</code></p>
<ul>
<li>λ = E[X/t] 表示在单位时间内的数量</li>
<li>t 是总时间</li>
</ul>
<p>比如说人出现在公交站的数量是 Poisson 分布.  假如每小时 2.5 个人, 如果我们观察 4 个小时, 3 个或者少于 3 个人的概率是多大?</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ppois(<span class="number">3</span>, lambda = <span class="number">2.5</span> * <span class="number">4</span>)</div></pre></td></tr></table></figure>

<h2 id="渐近_(Asymptotics)">渐近 (Asymptotics)</h2>
<h3 id="大数定律_(Law_of_Large_Number)">大数定律 (Law of Large Number)</h3>
<p>对于 IID 的随机值来说, 只要取的样本足够多, 它的平均值, 最终会和理论的 population mean 是一致的.</p>
<h3 id="中心极限定理_(Central_Limit_Theorem)">中心极限定理 (Central Limit Theorem)</h3>
<p>对于 IID 的随机值来说, 只要取的样本足够多, 它的平均值的分布会呈现出正态分布.</p>
<p>样本 Xₙ 可以说是基本呈现出为 <code>N(μ, σ²/n)</code> 的正态分布.</p>
<h3 id="Confidence_Intervals">Confidence Intervals</h3>
<p>对于正态分布来说，随机值 X 大于 <code>μ + 2σ/√n</code> 或者小于 <code>μ - 2σ/√n</code> 的概率只有 5%.  那么 <code>X ± 2σ/√n</code> 就叫做 μ 的 95% 区间.</p>
<p><code>Est ± ZQ * SE</code></p>
<h3 id="T_Confidence_Intervals">T Confidence Intervals</h3>
<p><code>Est ± TQ * SE</code></p>
<p>一般如果要进行分组之间的数据比较，会把分级之间的数据差，做 t interval 分析.</p>
<p>比如 R 里面的 Sleep data, 分别比较两组不同的药物，对人的睡眠质量的影响.</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">data(sleep)</div><div class="line">head(sleep)</div><div class="line"></div><div class="line"><span class="comment">##   extra group ID</span></div><div class="line"><span class="comment">## 1   0.7     1  1</span></div><div class="line"><span class="comment">## 2  -1.6     1  2</span></div><div class="line"><span class="comment">## 3  -0.2     1  3</span></div><div class="line"><span class="comment">## 4  -1.2     1  4</span></div><div class="line"><span class="comment">## 5  -0.1     1  5</span></div><div class="line"><span class="comment">## 6   3.4     1  6</span></div><div class="line"></div><div class="line">g1 &lt;- sleep$extra[<span class="number">1</span> : <span class="number">10</span>]</div><div class="line">g2 &lt;- sleep$extra[<span class="number">11</span> : <span class="number">20</span>]</div><div class="line">difference &lt;- g2 - g1</div><div class="line">mn &lt;- mean(difference)</div><div class="line">s &lt;- sd(difference)</div><div class="line">n &lt;- <span class="number">10</span></div><div class="line"></div><div class="line">mn + c(-<span class="number">1</span>, <span class="number">1</span>) * qt(<span class="number">.975</span>, n-<span class="number">1</span>) * s / sqrt(n)</div><div class="line">t.test(difference)</div><div class="line">t.test(g2, g1, paired = <span class="literal">TRUE</span>)</div><div class="line"></div><div class="line"><span class="comment">##        [,1] [,2]</span></div><div class="line"><span class="comment">## [1,] 0.7001 2.46</span></div><div class="line"><span class="comment">## [2,] 0.7001 2.46</span></div></pre></td></tr></table></figure>

<p>上面的比较是把数据认为是 <code>paired = TRUE</code> 的.</p>
<p>那如果是<strong>独立</strong>分组的数据的 t interval (<strong>恒定标准差</strong>的情况下) 怎么计算呢?<br>假如我们要计算 μᵧ - μₓ 的 (1 - α) * 100% 信心区间,</p>
<p><code>Y - X ± tₙₓ₊ₙᵧ₋₂ * Sₚ * ( 1 / nₓ + 1 / nᵧ)^0.5</code></p>
<p><code>Sₚ² = {(nₓ - 1) * Sₓ² + (nᵧ - 1) * Sᵧ²} / (nₓ + nᵧ - 2)</code></p>
<p>下面的比较是把数据认为是 <code>paired = FALSE</code> 的.</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sp &lt;- sqrt( ((n1 - <span class="number">1</span>) * sd(x1)^<span class="number">2</span> + (n2-<span class="number">1</span>) * sd(x2)^<span class="number">2</span>) / (n1 + n2-<span class="number">2</span>))</div><div class="line">semd &lt;- sp*sqrt(<span class="number">1</span>/n1+<span class="number">1</span>/n2)</div><div class="line"></div><div class="line">md + c(-<span class="number">1</span>,<span class="number">1</span>) * qt(<span class="number">.975</span>,n1+n2-<span class="number">2</span>) * semd</div><div class="line">t.test(g2, g1, paired = <span class="literal">FALSE</span>, var.equal = <span class="literal">TRUE</span>)$conf</div><div class="line"></div><div class="line"><span class="comment">##         [,1]  [,2]</span></div><div class="line"><span class="comment">## [1,] -0.2039 3.364</span></div><div class="line"><span class="comment">## [2,] -0.2039 3.364</span></div></pre></td></tr></table></figure>

<p>可见两次的结果是非常不同的.  那到底怎么决定数据是否是 pair, 是否是独立的呢？</p>
<p>比如说, 如果我们要检测非吸烟者和吸烟者的 BMI 指数, 因为这两组人群是完全不同的, 所以就是独立的.<br>或者说如果测试完全分开的两组一员, 一组使用药物, 一组使用安慰剂来测试药物的效用, 这也是独立的.</p>
<p>但如果说测试是同一组人员, 使用药物前后的比较, 那就应该是 paired.</p>
<p>那如果是<strong>独立</strong>分组的数据的 t interval (<strong>非恒定标准差</strong>的情况下) 怎么计算呢?</p>
<p><code>Y - X ± tdf * ( Sₓ² / nₓ + Sᵧ² / nᵧ)^0.5</code></p>
<p>tdf 里面的 degree of freedom 的计算为:</p>
<p><code>df = ( Sₓ² / nₓ + Sᵧ² / nᵧ)² / {(Sₓ² / nₓ)² / (nₓ - 1) + (Sᵧ² / nᵧ)² / (nᵧ - 1)}</code></p>
<p>参考链接: <a href="http://sphweb.bumc.bu.edu/otlt/MPH-Modules/BS/BS704_Confidence_Intervals/BS704_Confidence_Intervals.html" target="_blank" rel="external">http://sphweb.bumc.bu.edu/otlt/MPH-Modules/BS/BS704_Confidence_Intervals/BS704_Confidence_Intervals.html</a></p>
<h2 id="Hypothesis_testing">Hypothesis testing</h2>
<h3 id="定义">定义</h3>
<p>H₀, H-nought, 通常代表 “没有关联”, “没有影响” 的观点，又称为零假设.  它是目前要测试和证明的假设, 通常先被假定为正确的, 然后希望用统计数据来证明为错误或者需要慎重考虑的假设.</p>
<p>Hₐ, (alternative hypothesis) 就是对应的希望被证明为正确的假设.</p>
<p>比如说, Centers for Disease Control (CDC) 报道了从 1960 到 2002 年的身高体重质量指数趋势.  报告认为美国人在 2002 年比 1960 年重了很多, 而只是高了一点; 无论男女平均大约增加 24 磅.  在 2002 年, 男性平均体重为 191 磅.  假定有调查者认为到 2006 年, 也就是说男性平均体重将多于 191 磅.  那我们就可以把体重没有变化的推测定义为 H₀.</p>
<pre><code><span class="constant">Null</span> <span class="constant">Hypothesis</span>      <span class="constant">H</span>₀<span class="symbol">:</span> μ = <span class="number">191</span>         (没变化)
<span class="input"><span class="prompt">Research Hypothesis  Hₐ: μ &gt;</span> <span class="number">191</span>         (调查人员的假定推测)</span>
</code></pre><p>为了验证这个假定, 我们在 2006 年随机选定了一组美国男性来测量体重.  如果我们抽取的样本为 n = 100 人, 测量结果为: <code>X = 197.1, s = 25.6</code>:</p>
<p><code>P(X &gt; 197.1) = P(Z &gt; (197.1 - 191) / (25.6 / √100)) = P(Z &gt; 2.38) = 1 - 0.9913 = 0.0087</code></p>
<p>也就是说, 如果说体重没有变化, 取样得到平均値为 197.1 的可能性还不到 1%.  那我们说 H₀ 是否成立呢?</p>
<p>样例取自: <a href="http://sphweb.bumc.bu.edu/otlt/MPH-Modules/BS/BS704_HypothesisTest-Means-Proportions/" target="_blank" rel="external">http://sphweb.bumc.bu.edu/otlt/MPH-Modules/BS/BS704_HypothesisTest-Means-Proportions/</a></p>
<h3 id="错误类型">错误类型</h3>
<p><strong>Type I Error</strong>:  当事实为 H₀ 时，我们推测出的结果为 Hₐ<br><strong>Type II Error</strong>:  当事实为 Hₐ 时，我们推测出的结果为 H₀</p>
<p>现在我们尝试把场景应用到法律当中, H₀ 为被控方是无罪的.  那么我们就需要找到一个标准来断定他是有罪的 (Reject H₀).  假如标准太高, 把无罪的人错误定罪的可能性就变高了 (Type I Error).  相反标准低了, Type II Error 就高了.</p>
<p>所以, 其中一种做法就是选出一个常量 C (Critical Value), 使得样本的平均值 X 比它大时, 我们可以 Reject H₀.  要得到这个 C, 我们先要定出 α (level of significance), 来表示说如果在 H₀ 为真的时候, 我们却 Reject 了它的可能性, 也就是 Type I Error <code>P(X &gt; C; H₀) = 5%</code>.</p>
<h3 id="Upper,_Lower,_and_Two_Failed_Test">Upper, Lower, and Two Failed Test</h3>
<p>一般来说, 对应 H₀, Hₐ 有下面三种形式:</p>
<pre><code><span class="input"><span class="prompt">H₁ : μ &lt; μ₀
H₂ : μ ≠ μ₀
H₃ : μ &gt;</span> μ₀</span>
</code></pre><p>所以, 如果说 <code>TS (Test Statistic) = (X - μ) / (s/√n)</code> 的话, 以下的情况就分别可以 Reject H₀:</p>
<pre><code> TS  ≤ Zₐ
<span class="string">|TS| ≥ Z₁₋ₐ∕₂</span>
 TS  ≥ Z₁₋ₐ
</code></pre><h3 id="和_Confidence_Interval_的关系">和 Confidence Interval 的关系</h3>
<p>对于 μ 来说, (1 - α) * 100% 的 confidence interval 范围内的所有的值, 都无法 (Failed to) Reject H₀.</p>
<h2 id="P-values">P-values</h2>
<p>P-value 就是在 H₀ 的前提下, 观测到的样本值出现的可能性.  如果这个可能性很少, 要么 H₀ 为真, 并且我们观测到的值很极端, 要么 H₀ 为假.</p>
<p>P-value 和 α (level of significance) 是不同的.  P-value 只是简单描述了在 H₀ 情况下, 某值出现的可能性. α 则是我们选定的用来判定是否 Reject H₀ 的标准.  当 P-value 小于 α 的时候，我们就可以 Reject H₀.</p>
<p>two sided hypothesis test, double the smaller of the two “one sided hypothesis test P-values”.</p>
<p>比如下面一个例子:</p>
<p>有 18 位肥胖人士, 随机抽取 9 位服用新的减肥药, 9 位服用安慰剂.  4 星期后测量的 BMI 指数的平均变化为, 服用减肥药的为 -3kg/m2, 服用安慰剂的为 1kg/m2.  两组人员的标准差为 1.5kg/m2 和 1.8kg/m2.  那么现在的 BMI 变化对使不使用减肥药有区别吗?  假定数据是正态的, 并且 population variance 是相同的, 尝试给出 two sided t test 的 P-value.</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">n1 &lt;- n2 &lt;- <span class="number">9</span></div><div class="line">x1 &lt;- -<span class="number">3</span>  <span class="comment">## treated</span></div><div class="line">x2 &lt;- <span class="number">1</span>  <span class="comment">## placebo</span></div><div class="line">s1 &lt;- <span class="number">1.5</span>  <span class="comment">## treated</span></div><div class="line">s2 &lt;- <span class="number">1.8</span>  <span class="comment">## placebo</span></div><div class="line">s &lt;- sqrt(((n1 - <span class="number">1</span>) * s1^<span class="number">2</span> + (n2 - <span class="number">1</span>) * s2^<span class="number">2</span>)/(n1 + n2 - <span class="number">2</span>))  <span class="comment"># 恒定标准差, 独立分组的数据</span></div><div class="line">ts &lt;- (x1 - x2) / (s * sqrt(<span class="number">1</span>/n1 + <span class="number">1</span>/n2))  <span class="comment"># Test statistic</span></div><div class="line"><span class="number">2</span> * pt(ts, n1 + n2 - <span class="number">2</span>)</div></pre></td></tr></table></figure>

<h2 id="Power">Power</h2>
<p>当事实为 Hₐ 时, 我们推测出的结果为 Hₐ 的可能性 (sensitivity).</p>
<p>Power = 1 - β (Type II error rate)</p>
<p>假如我们要推测的 Hₐ 为 μ &gt; μ₀:</p>
<p>Power = P((X - μ₀) / (σ/√n) &gt; z₁₋ₐ | μ = μₐ)  # 当 μₐ 趋近 μ₀ 时, Power 趋近 α<br>      = P((X - μₐ + μₐ - μ₀) / (σ/√n) &gt; z₁₋ₐ | μ = μₐ)<br>      = P((X - μₐ) / (σ/√n) &gt; z₁₋ₐ - (μₐ - μ₀) / (σ/√n) | μ = μₐ)<br>      = P(Z &gt; z₁₋ₐ - (μₐ - μ₀) / (σ/√n) | μ = μₐ)<br>      = P(Z &gt; zβ)</p>
<p><em>z₁₋ₐ 为标准正态分布在 α 的区域值如 1.645 (5%)</em></p>
<p>假定在 H₀:μ = μ₀ 的情况下, 统计数据为 N(0, 1) 的正态分布, 那么在 Hₐ:μ = μₐ 的情况下, 统计数据就为 N((μₐ - μ₀) / (σ/√n), 1) 的正态分布.  所以，也可以通过 <code>pnorm(1.645, mean = (μₐ - μ₀) / (σ/√n), sd = 1, lower.tail = F)</code> 来计算出 Power.</p>
<p>根据上面的推理, 我们还可以得出一个等式: <code>z₁₋ₐ - (μₐ - μ₀) / (σ/√n) = zβ</code>.<br>也就是说 Power 和 <code>(μₐ - μ₀) / (σ/√n)</code> 的比值相关.  <code>(μₐ - μ₀) / σ</code> 为 effect size.</p>
<h2 id="Multiple_testing">Multiple testing</h2>
<h3 id="Types_of_Error">Types of Error</h3>
<pre><code><span class="attribute">              β </span>=<span class="string"> 0   β ≠ 0   Hypotheses
Claim β = 0   U       T       m - R
Claim β ≠ 0   V       S       R
Claims        m₀      m - m₀  m</span>
</code></pre><p><strong>m</strong> - total number of hypotheses tested<br><strong>m₀</strong> - number of true H₀<br><strong>m - m₀</strong> - number of true Hₐ<br><strong>V</strong> - number of false positive (Type I error / false discoveries)<br><strong>S</strong> - number of true positive (true discoveries)<br><strong>T</strong> - number of false negative (Type II error)<br><strong>U</strong> - number of true negative<br><strong>R</strong> - number of rejected H₀</p>
<h3 id="Error_Rates">Error Rates</h3>
<p><strong>False positive rate</strong> - The rate at which false results (β = 0) are called significant: E[V/m₀]<br><strong>Family wise error rate (FWER)</strong> - The probability of at least one false positive Pr(V ≥ 1)<br><strong>False discovery rate (FDR)</strong> - The rate at which claims of significance are false E[V/R]</p>
<h3 id="Correction">Correction</h3>
<p><strong>Controlling FWER</strong> - Bonferroni correction</p>
<p>假定做 m 次测试, 要把 FWER 控制在 α, 也就是 Pr(V ≥ 1) &lt; α.<br>然后把新的 α 设置为 α / m, 所有小于这个新的 α 的 P-value 就是 significant 的.<br>这种方法的优点就是容易计算, 缺点就是得出的值会非常保守.</p>
<p><strong>Controlling FDR</strong></p>
<p>假定做 m 次测试, 要把 FDR 控制在 α, 也就是 E[V/R].<br>把 P-value 从小到大排好序 P(1), …, P(m), 任何 P(i) ≤ α * i/m 都是 significant 的.<br>这种方法的优点就是相对容易计算, 没那么保守, 缺点就是 false positive 可能性增加, 而且关联数据可能表现诡异.</p>
<p><strong>Adjusted P-values</strong></p>
<p>注意, 修正过的就已经不能算是 P-values 了.<br>假定我们有 P(1), …, P(m), 我们可以把每一个 P-values * m, 最大值为 1. 如果得出来的值小于 α, 那就是在 Control FWER 上是 significant 的.</p>
<h2 id="Resampled_inference">Resampled inference</h2>
<p>不断的从已有数据集中取数据出来创造新的数据集.  R 里面有两个很有用的工具:</p>
<h3 id="jackknife">jackknife</h3>
<p>原理是从一组数据中每次删除一个值, 然后用剩下的 (n - 1) 个数据来计算推测要推导的结论.  所以也就是说会有 n 种数据组合和 n 次推导值.  这种做法通常会用在推算偏差和标准误上面.  像中值 (mean) 这种 unbiased 的数据是不用 jackknife 来做的.</p>
<p>计算过程是这样的:</p>
<ul>
<li>X₁, …, Xₙ 是一组测量数据值</li>
<li>假定 θ 是用以上数据全集推导出来的值 (比如 median)</li>
<li>θᵢ 是把 Xᵢ 删除后推导出来的值</li>
<li>假定 θbar = 1/n * ∑ⁿθᵢ</li>
</ul>
<p>jackknife 算出来的偏差就是 <code>(n - 1) * (θbar - θ)</code>, 标准误就是 <code>[(n - 1)/n * ∑ⁿ(θᵢ - θbar)²] ^ 0.5</code></p>
<h3 id="bootstrap">bootstrap</h3>
<p>bootstrap 是 non-parametric 的.  通常用于 confidence internal 和标准误上面.  bootstrap 原则是指 using the distribution defined by the data to approximate its sampling distribution.</p>
<p>实际操作上来说, bootstrap 原则都是通过模拟来的执行的.  一般都是不断的从观测的数据中取样计算分布状况, 来模拟完整的数据集的分布.<br>从多次的模拟计算中得到的统计概率去计算 confidence interval 或者标准误.</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(UsingR)</div><div class="line"><span class="keyword">library</span>(bootstrap)</div><div class="line">data(father.son)</div><div class="line"></div><div class="line">x &lt;- father.son$sheight</div><div class="line">n &lt;- length(x)</div><div class="line">B &lt;- <span class="number">1000</span></div><div class="line"></div><div class="line">resamples &lt;- matrix(sample(x, n * B, replace = <span class="literal">TRUE</span>), B, n)</div><div class="line">medians &lt;- apply(resamples, <span class="number">1</span>, median)</div><div class="line">sd(medians)</div><div class="line"><span class="comment">## [1] 0.08452927</span></div><div class="line"></div><div class="line">quantile(medians, c(<span class="number">0.025</span>, <span class="number">0.975</span>))</div><div class="line"><span class="comment">##     2.5%    97.5%</span></div><div class="line"><span class="comment">## 68.44474 68.81588</span></div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="Statistics" scheme="http://www.thinkingincrowd.me/tags/Statistics/"/>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2014 半年小结]]></title>
    <link href="http://www.thinkingincrowd.me/2014/07/31/half-year-summary/"/>
    <id>http://www.thinkingincrowd.me/2014/07/31/half-year-summary/</id>
    <published>2014-07-31T12:35:17.000Z</published>
    <updated>2015-05-20T15:09:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Coursera">Coursera</h2>
<p>本来今年是要把 <em>Algorithms 4th Edition</em> 这本书看了的。后来机缘巧合的发现在 <a href="https://www.coursera.org/" target="_blank" rel="external">Coursera</a> 上就有作者本人的教学课程，<br>所以就直接在上面上课去了。第一部分有6周课程，讲的是基本的算法概念和排序。课程，作业和考试都很有趣。<br>里面各种可视化来教学的东西让我觉得非常有趣。</p>
<p>上完课后，决定温习一下和用 AngularJS 做点好玩的东西，就把之前看 @左耳朵耗子 哥介绍的可视化排序网站自己做了一下。<br>放到 <a href="https://github.com/kenspirit/visual-alg" target="_blank" rel="external">Github</a> 和自己的<a href="http://www.thinkingincrowd.me/algorithm" target="_blank" rel="external">博客</a>上。 没想到这个东西经一些微博上的大牛转发，粉丝涨不少，博客也瞬时增加 2K 多的访问量。<br>更好玩的是 ZoomQuiet 大妈叫我到珠海 GDG 上面去讲一下做这东西的历程。虽然说最后来听讲的人，因为天气原因，只有 4 个。<br>但是中间和大妈讨论怎么把演讲<a href="http://www.slideshare.net/chengusky/ss-35096187" target="_blank" rel="external">幻灯片</a> (要翻墙，在 Slideshare 上) 做好，怎么向小白讲清楚一些细节，可是花了不少心思。</p>
<h2 id="Data_Science">Data Science</h2>
<p>自从在 Coursera 上看到各种可视化的东西后，觉得很有意思，所以想往这方面上去玩一下。因为我觉得如何可视的，简单明了的说明一些问题，很有意思。<br>在可视化方面，最流行的，莫属于大数据了。虽然我并不热衷于它的流行，但是觉得这确实是应用可视化的一个不错的领域。<br>无论是个人，还是企业，可视化分析数据都非常有用。所以，就又在 Coursera 上开始了 <a href="https://www.coursera.org/specialization/jhudatascience/1" target="_blank" rel="external">Data Science</a> 的 Specialization 的学习。</p>
<p>目前还在学习当中，教学用的是 <strong>R</strong> 语言。虽说它是数理统计方面很重要的一门语言，但是可能只是上面支持的数据结构，语法特点很适合做统计用和已经有大量的 API 包的原因。<br>但我觉得如果作为一门语言，它的语法，包的命名和参数使用相当不统一和协调。<strong>Python</strong> 可能比它更好，而且听说 <strong>Python</strong> 的数理统计能力也很强。<br>不过可能因为我接触的还是很表面，也没有跳出我的舒适区，所以还没有适应它而已。</p>
<p>话说回来，无论是 <strong>R</strong> 还是 <strong>Python</strong>，它们都只是工具。虽说欲善其事，必利其器，但我觉得重要的是数理统计的思想和提问题的能力。<br>之后重点学习的应该是基础的统计学和如何对数据思考和提问。这才是要锻炼自己的地方。</p>
<h2 id="为公司做的小玩意">为公司做的小玩意</h2>
<p>其实一直以来就苦恼自己喜欢的玩意没法在公司里派上用场。但是还是一有机会就做一些东西。<br>这些东西都搞完后，打算和同事们往 JS Unit Test 上面去实践了。<br>之前是在 Maven 下和项目结合来搞，但是申请加 jar 包去公司的 maven repository 里就麻烦的要死。所以，我们后来用 Node.js 搭起来了，反正在本地想怎么弄都行。目前正在进行中。</p>
<p><strong><a href="https://github.com/kenspirit/ExtPromise" target="_blank" rel="external">ExtPromise</a></strong></p>
<p>这个去年就做出来的了，虽然还没怎么用，之后在项目 Code Review 时，一定要用上去。因为已知有地方需要。</p>
<p><strong><a href="https://github.com/kenspirit/ws-monitor" target="_blank" rel="external">ws-monitor</a></strong></p>
<p>之前老板想解决 QA 和 PP 测试效率的问题，希望可以在这个环节节省时间，让我在其中一个 Release 的后面阶段去留意一下问题在哪，看有什么办法解决。<br>说实在，问题多得很，这就不细说了，但是在我能力范围内能掌控的，非流程上的东西，可改进地方没多少。<br>所以我觉得短时间内，就是有个东西检测 WebService 服务是否可用，能在小范围内验证 WebService 结果的正确性上。<br>花了几天时间，做了这个出来，实测已经达到目的，但是似乎没得到多少人认同，之后自己再往上面加各种测试监控用例，最后再证明给其它人看它的效率。</p>
<p><strong><a href="https://github.com/kenspirit/kanban-cfd" target="_blank" rel="external">kanban-cfd</a></strong></p>
<p>做为在公司内用 Kanban 的少数人之一，目前在 Rally 上是没法做出 Kanban CFD (Cumulative Flow Diagram) 图的。所以，我必须手动每天记录各个状态的 WIP 数量。<br>这个实在是太烦了，也容易出错。除了催别人更新 Rally 的状态，如果还要做这个事情的话，实在太没有效率了。目前 Kanban 实践得很差。<br>所以，用 Node.js 和 Rally 提供的 WS 来做一个小应用。另一个需求就是老婆那边也希望有类似的东西。等我把这个做出来之后，<br>就可以看到整个团队的 CFD 图，每个人的 CFD 图和每一个 WIP 的 Kanban cycle 了，还可以作为团队每个成员的效率的比较。想想就觉得不错。</p>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2014 杭JS 杂谈]]></title>
    <link href="http://www.thinkingincrowd.me/2014/06/25/hangjs-2014/"/>
    <id>http://www.thinkingincrowd.me/2014/06/25/hangjs-2014/</id>
    <published>2014-06-25T14:21:00.000Z</published>
    <updated>2015-05-20T15:09:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="杂谈">杂谈</h2>
<p><img alt="HangJS Badge" src="http://thinkingincrowd.u.qiniudn.com/HangJS%20Badge.jpg?imageView/2/w/100" style="position: relative; float: left; margin-right: 5px; border: 0px;"></p>
<p>在6.21号这个特殊的一天，我的生日，献给了今年的<a href="http://2014.jsconf.cn/" target="_blank" rel="external">杭JS</a>而不是家人。</p>
<p>路程还是挺周折的。周五下午 3:15 的飞机晚点到 3:45 后，6 点就到了杭州了。然后再花了两小时坐机场大巴，再转地铁到了酒店附近。不知道搞什么，每次找 JSConf 所在的地方，都要花我不少时间，但其实它已经在我面前。回来的时候飞机从晚上 8 点多推到 10:45，到珠海家里已经 1:30 了，直接 verify production cutover 后才睡，累死了。</p>
<p>话说回来，21号到了酒店已经在附近找不到东西吃了，见到上海小朋友<a href="http://weibo.com/liyinkan" target="_blank" rel="external">@Yinkan_Li</a>后，从他那贪污过一瓶八宝粥干掉，再吃了些从珠海带给他尝尝的桂味荔枝，澳门猪肉干和杏仁饼，也总算饱了。他竟然还送了本 <a href="http://weibo.com/jslouvre" target="_blank" rel="external">@司徒正美</a> 的书给我。虽然觉得可能是他看完了不想要了，但是还是很感动的，特别为我这老人家写上那些肉麻的祝福语。</p>
<p>好了，不说废话了，流水记录一下会议两天的情况和感受。</p>
<h2 id="第一天">第一天</h2>
<p>一开始是<a href="http://weibo.com/zensh" target="_blank" rel="external">@严清</a>讲<strong>JS异步处理</strong>的几种做法。<a href="http://2014.jsconf.cn/slides/%E4%B8%A5%E6%B8%85-JavaScript%E5%BC%82%E6%AD%A5%E5%BA%93%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AF%B9%E6%AF%94.key.zip" target="_blank" rel="external">幻灯片</a>内容很丰富，callback, promise, co的比较都有。然后介绍了他的 <a href="https://github.com/teambition/then.js" target="_blank" rel="external">Then.js</a> 和比较了一下其它的 Promise 库。一开始就黑了我选用的 <a href="https://github.com/petkaantonov/bluebird" target="_blank" rel="external">bluebird</a>，体积过大。 Yinkan 马上拍了一下我的肩膀，嘲笑了我一下。当时我选库的时候，是被 bluebird 的API, Error handling 吸引，再加上当时它是最快的。<br>杭JS前在微博上其实看到严清说 Then.js 已经比 bluebird 快时和他聊了几句，说目前我粗浅上看，觉得它比不上 bluebird 的就是文档和 Error handling 方面，然后就没有然后了，呵呵。后面严清说了一下他新写的 <a href="https://github.com/teambition/thunk" target="_blank" rel="external">Thunk</a>，也说这比 promise 和 <a href="https://github.com/visionmedia/co" target="_blank" rel="external">co</a> 要好。我没看过 co，之前瞄了一下 Thunk，被那些 () 吓坏了。虽然我之前一开始看 Scheme 的时候，也很不习惯，但是那边的括号风格还算是比较统一的。但是 Thunk 里面用的方式，我觉得在 JS 里面把同步的和异步的写成那样，还是不容易接受。可能我的功力还是差太多吧。个人觉得 Promise 的方式和语法，看起来还是比较符合一般写同步代码的风格，还好些。顺便广告一下去年翻译的一篇我觉得<a href="http://www.thinkingincrowd.me/2013/11/13/callbacks-are-imperative/" target="_blank" rel="external">讲 Promise 挺好的文章</a>。</p>
<p>然后是 Atom 编辑器的作者赵成讲 <a href="http://2014.jsconf.cn/slides/Practice%20on%20embedding%20Node.js%20into%20Atom%20Editor.pdf" target="_blank" rel="external">Atom-Shell 的实践</a> 和 Node-webkit 的不同之处和在 Atom-Shell 里面怎么处理多个 Environment 的问题，比较高深。但还是基本可以理解。中间还穿插 Github 里围绕这个的各种八卦。</p>
<p>第三讲是赫门的<a href="http://2014.jsconf.cn/slides/herman-taobaoweb/index.html" target="_blank" rel="external">淘宝前后端分离实践</a>，他的辫子，胡子，和演讲风格还是很拉风和活跃全场气氛的。前后端的分离实践，他讲的多数可以说是工程问题。但整个下来，里面要处理的问题，其实我并没有感受到多少是一定要用 Node.js 来做的，他们的分离是为了什么。作为一名长时间的后端混搭前端的企业开发者，我觉得开发中最大的问题是业务逻辑共享，所以我才觉得用 Node.js 是优势，为一套代码两用提供可能性。Slide 69 页说的用 Node.js 可以做的一些事情，我觉得后端 JAVA 做也没什么不可以，只是因为很多前端不会 JAVA，然后想把浏览器上的页面一些优化搬到 server 上来提高性能，没有熟悉的 JS 的话，就不好动手了。如果交给一些纯后端来做又增加沟通成本，或因为没前端概念而做不好。所以现在有了 Node.js，可以把以前浏览器上的 JS 逻辑，拆一些到 server，就爽多了。其实前后端分离，有一部分是前端逻辑后移，不知道我是不是没有 get 到重点。我知道说到这里肯定拉不少仇恨，其实我目前是喜欢 JS 多于 Java，而且什么都用 Node.js 先写写，但我也不想让语言绑住自己。</p>
<p>下午是苏培欣的<a href="http://2014.jsconf.cn/slides/JSConf%20-%20Google%20BigQuery%20API%20Node.js%E5%AF%A6%E4%BD%9C%E8%A8%98%E9%8C%84.pdf" target="_blank" rel="external">Google BigQuery API Node.js实践</a>，其实主要是讲怎么用 OAuth 和 Google API 打交道，他写了个库来方便使用。</p>
<p>然后就到了顶顶大名的 <a href="https://github.com/substack" target="_blank" rel="external">@substack</a> 神了。其实他还是和上次<a href="http://weibo.com/jingjs2013" target="_blank" rel="external">京JS</a>一样，在<a href="https://github.com/substack/hangjs-2014" target="_blank" rel="external">布道</a>模块化的好处和如何同其它人用无数小的模块来拼成一个系统。个人对这些观点还是认同的，再看到大神飘忽的打字速度，反正就是叹为观止了。但是宣讲的内容价值并不高。</p>
<p>后面到了 Belleve Invis 讲他的 <strong>Patrisika</strong>，说实在话，虽然之前看过了一些 CPS 和 Scheme，但是他里面讲的一些推导和原理，和飞快的语速，实在有不少地方还是 lost 了。级别差太多。</p>
<p>再后面到了芋头的<a href="http://2014.jsconf.cn/slides/Rabbit.js-MVC.pdf" target="_blank" rel="external">如何快速构建MVC应用</a>，按他的意思就是一个遵循他的编程风格和习惯包装了一下 Express 和一些常用框架的框架(有点拗口了)。当然每个程序员都有自己喜爱的风格，所以就看多不多人买账了。</p>
<p>最后是 Berg 的 <a href="http://2014.jsconf.cn/slides/BlendUI.pdf" target="_blank" rel="external">BlendUI</a>，一个轻应用框架。按照我的理解就是一套统一了上层接口，让里面可以轻松调用 Webview 或者 Native 的代码。在一个页面里，有性能问题的时候，通过组合多个 Webview 和 Native 组件的方式，实现组件最小化，性能可控。<br>像 Yinkan 说的，这种方式其实就是在机器性能跟不上的时候，做的一种补尝。其实我们也在想，如果这样一有性能问题就混搭，那最后会不会整个东西就变成 Native App 了呢？呵呵。没做过移动开发，所以不好评论。</p>
<p>第一天就这样结束了，因为下雨，<strong>After Party</strong> 所在的小酒吧几乎挤满了，吃的东西和去年一样，一上就差不多被抢光。我们的策略就是站在门边附近，吃饱了再找人聊天。个人认为今年的 After Party 找的地方格调不对。虽然中间什么唱歌表演的很 High，但是完全无法在酒吧里和其它人好好聊天。所以我们之后都拉了 substack 出去了。我觉得去年京JS的地方就很不错，聊天可以很尽兴。</p>
<p>不过今年没聊的太尽兴，也是因为自己没准备好什么话题找大神。自己去年总结的经验都没用上，唉，打脸。去年的 H 神原来就是 EF 的架构师 Michael，不过我们没和他聊上。晚上我和 Yinkan 的主要目的都是找 substack 闲聊。今年好像他在做 P2P 相关的东西，聊天的很多内容都是这样。中间调侃性的问了他对使用了 Stream 的 Gulp 怎么看，因为去年问过 Grunt 了。他还是说用 bash 就好了。但是个人认为 Gulp 对组织大型项目还是很有帮助的，不是每个人都是神和那么熟悉 bash。对于工程管理来说，我认为 bash 太乱了。最后我认为自己问了他一个对我来说最有价值的问题，就是“一般来说，普通人都是做一个可以看到有具体功能的一个 App 或者应用。为什么你可以或者会想到做那么多底层的模块呢？” 神是这样答复我的：“<strong>当你要做一个大的应用出来的时候，需要花的时间比较长，如果进展不顺利，可能会灰心。或者说本来想分享一下，但久久不能实现，就心累了。而我想东西是从底层开始构建起来的，做好了一个小模块就可以分享了。</strong>” 其实这就体现大神和我的差别，别人一看东西，都到底层的，把整个系统分解的很好。这个答案确实让我展开了思路，日后努力实践。</p>
<p>晚上在雨中走回酒店，洗澡后就累趴了，一觉睡到 6:30。本打算像去年那样当早鸟和抢书，7 点就到了会场，但是发现因为前一天主持已经泄漏天机，会场已经有 10 个人左右了。就不想像傻 B 那样守在书摊前了。又不是买不起，也不想增加自己行李负担，还要回去叫醒那个 Yinkan。所以还是溜了。</p>
<h2 id="第二天">第二天</h2>
<p>一开场是 <a href="http://weibo.com/isofish" target="_blank" rel="external">@Sofish</a> 的<a href="http://sofi.sh/2412" target="_blank" rel="external">优化你的Angular Web App</a>。内容基本之前都知道，网上其实说 AngularJS 优化的也是差不多了。但是 Sofish 的语速，难易程度和幻灯片内容的组织，觉得在这种大型会议上做得很好。不太深，也能引起一定的思考。</p>
<p>然后就郭宇的<a href="https://github.com/jsconfcn/hangjs/blob/gh-pages/slides/GuoYu-%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%AE%A1%E7%90%86%E4%B8%8E%E7%BB%B4%E6%8A%A4-%E6%88%91%E7%9A%84%E5%BC%80%E6%BA%90%E4%B8%80%E5%B9%B4.md" target="_blank" rel="external">开源项目的管理与维护</a>，其实是他的开源心路历程，中间穿插一个很冷的 callback 笑话。他中间对选什么开源来做提的几点建议，我觉得还是挺有用的：有趣的，成长中的 (Node.js)，爆发的(像近期的 Bitcoin， Swift 教程翻译)等。</p>
<p>接着就是 <a href="https://github.com/mikaelkaron" target="_blank" rel="external">@Michael</a> 的 <a href="http://2014.jsconf.cn/slides/mikaelkaron-massivejs/massive-js.html" target="_blank" rel="external">Massive Javascript Development</a>，一开始幻灯没准备好的时候，主持人叫他讲讲笑话，他说他只会 dirty joke。果然是 H 神，去年和他聊天的时候就知道他擅长这个。这个演讲个人认为是最有价值，可能也是深有感触吧。Yinkan 和我想问他的问题不谋而合。其实他在里面说到这样的大型系统，每个组件都要足够小。组件间的通信，可以用类似 Event 通知机制来做，再有一个 Root App 从中做管理。这个我们都认同。只是在实际操作中，怎么能做到 Event Subscriber 和 Publisher 之间的关系能管理好，并不是那么容易。就像 SOA WS 架构里面的 WS Registration 一样，做的不好的话，很容易导致 Event 有多少 Consumer 并不清楚。上下游关系不清的话，上游有改动，下游容易出问题。下游不再监听了，上游也不知道是否可以移除。所以，会上我们提了这个问题，他初步也以下建议：<strong>1.</strong> Event 一但发布，不再改动。或者加新的，或者加版本号。 <strong>2.</strong> 通过监控手段，了解各个监听情况。这个就要在 Root App 上做的比较好了。<strong>3.</strong> 文档。因为文档容易过时，他说他们用 JsDoc/JsDuck 来生成。</p>
<p>紧接着 Garry Yao 的 <a href="http://2014.jsconf.cn/slides/garryyao-troopjs/scalable-web-application-with-troopjs.html" target="_blank" rel="external">Scalable Web Application with TroopJS</a> 其实就是 Michael 他们做出来的，就是说他们用这个框架来解决他说的问题。具体细节没有听到多少，因为一边听，我们一边直接去官方网站研究了。初步印象不是太震撼，就是他们自己也说了有和 AngularJS 很像的 data-binding，但是其实他们在知道 AngularJS 之前已经做了。他们的还可以移除绑定来着，有点意思。有时间再看看。</p>
<p>后面到了 <a href="http://weibo.com/lifesinger" target="_blank" rel="external">@玉伯也叫射雕</a> 的<a href="http://2014.jsconf.cn/slides/how-to-continue-to-grow-up.pdf" target="_blank" rel="external">如何持续技术学习</a>。其实我和 Yinkan 的想法基本一致是不打算听的。这里没有看不起的意思。主要是因为我们两个也算是可以持续学习的人吧，另一方面是想抽时间去找 Michael 继续探讨那个 Massive Javascript Development 的问题。后来发现 Michael 不见了，只好听了。印象中有些槽点，现在不记得了。但是玉伯说的有一点是挺赞同的。就是学习时，生怕什么都漏了，什么都订阅或者 Mark 再看等等，其实对自己的进步并不大。最主要是要 Output。</p>
<p>然后特意去找 <a href="http://weibo.com/sharpmaster" target="_blank" rel="external">@民工精髓V</a> 聊了一下，中途很傻B的找错了人。问了他一个 AngularJS View 改了值，Model 迟了半拍才改过来，要改用 $watch 才行。他说没碰过这情况，可以试着绑定一个 Promise。后来 Yinkan 来了我们又向他了解了一下他目前在苏宁的状况。</p>
<p>突然看到有个样子好，身材突出的国外女讲师说的什么 Edge.js 是可以在 Node.js 里面用 .Net，然后还可以在 Linux 上玩。我都不知道这有什么用，真是不忍吐槽，为了结合而结合。我之前想要在 Node.js 调用 Java 也只是觉得 Node.js 缺乏成熟的库才有这样跨语言的需求。后来想想调用的方法不如用 Web Service 做成 SOA 好了。</p>
<p>再之后就是 Twitter 美女的讲的 Storm，也听懂了，大概了解到它的工作原理。陈本峰 的 Web Components 也是基本概念。</p>
<h2 id="建议和总结">建议和总结</h2>
<p>对于这种宣讲会，其实很同意<a href="http://weibo.com/youxiachai" target="_blank" rel="external">@游戏阿柴</a> <a href="http://www.html-js.com/article/2112" target="_blank" rel="external">流水帐</a>的一些观点的。宣讲会里，我觉得最重要的是说一些能引起别人思考的东西。这说起来简单，但我觉得做起来很难，而且还要照顾听众的水平。</p>
<p>宣讲会里的主题，基本上是自己做了个什么东西出来，发明了一个轮子。其实这很值得讲，但是我觉得重点要讲这个东西和同类的有什么不同。我为什么要做个新的轮子，好在哪。其实点不用太多，能有一两个方面吸引人去了解你的轮子就够了，因为时间不够，而且也没有提问和思考时间。具体一些代码怎么写，大概有个样子看看就知道了，不用每个功能都讲。就像阿柴讲的 @严清 老师的分享那样。</p>
<p>另一类就是纯粹理论的东西，像赫门的<strong>《淘宝前后端分离实践》</strong>，没有具体例子，很难脑补具体场景。虽然一些大概念知道，但是不同公司和系统，实现和出现的问题都不同。如果可以抽样例出来说，就知道分和不分的差别。</p>
<p>其实像这样的大会，高手一般不需要从中再获得什么，而是要带领新人了解什么。当然如果高手有什么新技术出来，同理也是带领不了解的人，对它感兴趣。我觉得这种宣讲，就是要带人入门，提起兴趣和思考。然后 After Party 的任务，就可以分开各个阵营或者会场，人们再去和嘉宾深入聊那些感兴趣的话题了。</p>
<p>最后，希望明年有机会能站在上面和大家分享，而不只是听，不知道可否像上次 珠海 GDG 那样说着就成真了。呵呵。</p>
<p>没去过 京JS 的同学，有兴趣的话，也可以看看去年我总结的<a href="http://www.thinkingincrowd.me/2013/11/14/jingjs-2013-fun/" target="_blank" rel="external">帖子</a>。</p>
]]></content>
    
    
      <category term="Javascript" scheme="http://www.thinkingincrowd.me/tags/Javascript/"/>
    
      <category term="HangJS" scheme="http://www.thinkingincrowd.me/tags/HangJS/"/>
    
      <category term="JSConf" scheme="http://www.thinkingincrowd.me/tags/JSConf/"/>
    
      <category term="NodeJS" scheme="http://www.thinkingincrowd.me/tags/NodeJS/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2013 Retrospect and 2014 Goal Setting]]></title>
    <link href="http://www.thinkingincrowd.me/2014/01/04/2013-retrospect-and-2014-goal-setting/"/>
    <id>http://www.thinkingincrowd.me/2014/01/04/2013-retrospect-and-2014-goal-setting/</id>
    <published>2014-01-04T00:00:00.000Z</published>
    <updated>2015-05-20T15:09:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="工作">工作</h2>
<p>工作上没有什么太大的变动，可以说趋于平淡。对于项目基本框架的使用已经没有什么问题，所以主要已经是在忙于实现项目业务功能模块上。但是还是痛苦挣扎于一些框架的限制，跨部门的约束，低效率的流程上，感觉效能无法有效提升。</p>
<p>组内的新人，经历了一两年的成长，基本上能够独立做事情。不像以前那样，还没想清楚就乱写代码，有问题又不问，最后又推倒重来。技术水平有些提升，代码也好看了些，所以我的介入相对少了很多。但是还有待提高，特别是那些低级错误，类似变量命名上打错字的问题经常让我发现，这让我非常恼火。因为这足以侧面知道做事认真仔细程度到哪。</p>
<p>去年我主要的侧重是集中精力帮他们提升思考能力和业务理解上，最重要的是怎么去思考业务需求带来系统设计的要求。在组内尽量推动的 Peer Code Review，对成员间的沟通，业务的理解，技术的提高上确实有很大的帮助，今年要再加强。希望今年组内每个成员都达到一定水平后，整体效率可以有效提升。</p>
<p>从团队管理上来说，我并不是做得太好。由于我还要参于很多开发工作，能留给我做些流程或其它方面的改进的时间并不多。计划和进度上也并不是控制的很好，我也始终在看，究竟何时及如何引入 Kanban。看是否能够引入责任人机制，透明化流程，让每个人责任感更强和对计划进度上控制更好。</p>
<h2 id="自我提升">自我提升</h2>
<h3 id="读书">读书</h3>
<p>有些书去年积累到现在都还没有看，主要是技术类的。因为水平有限，技术类的书，用零散时间看的话，真的不容易吸收，特别是没有实践配合的话。所以一直用 Kindle 在零散时间还是看非技术类的多。</p>
<p>不过近期 Kindle 被我基本抛弃在一边了。不是不读书了，而是我已经抱着 MBA 随处边看书，边写代码了。这真是太爽了，虽然对我的颈椎好像有点伤害，不过，这确实可以让我边看书，边实践，榨取更多的时间来 Coding。所以今后将会多看技术类书和实践。</p>
<p><strong>技术类</strong></p>
<ul>
<li>Functional Programming for the Object-Oriented Programmer by Brian Marick</li>
<li><em>NOSQL Distilled by Pramod J. Sadalage, Martin Fowler</em></li>
<li><em>Patterns of Enterprise Application Development by Martin Fowler</em></li>
<li>Domain-Driven Design by Eric Evans</li>
<li><em>The Art of UNIX Programming by Eric S. Raymond</em></li>
</ul>
<p><strong>非技术类</strong></p>
<ul>
<li><em>The Lean Startup by Eric Ries</em></li>
<li>The Pragmatic Programmer by Andrew Hunt, David Thomas</li>
<li><em>Mythical Man-Month by Frederick P. Brooks</em></li>
<li><em>YouTube 创始人陈士俊自传</em></li>
<li><em>打造 Facebook by 王淮</em></li>
<li><em>至关重要的关系 by 李开复</em></li>
<li><em>MackTalk: 人生元编程 by 池建强</em></li>
</ul>
<p><em>注：斜体的已阅</em></p>
<p>今年在看和计划要看完的主要为以下三本最基础的技术书，尽量年内搞定。</p>
<ul>
<li>Structure and Interpretation of Computer Programs by Harold Abelson and Gerald Jay</li>
<li>Introduction to Algorithms by Thomas H Cormen</li>
<li>Algorithms 4th Edition by Robert Sedgewick and Kevin Wayne</li>
<li>Computer Systems - A Programmer’s Perspective (2nd) by Bryant and O’Hallaron</li>
</ul>
<h3 id="打造关系网">打造关系网</h3>
<p>在看完《至关重要的关系》后，深有<a href="http://www.thinkingincrowd.me/blog/2013/06/29/startup-review-network/" target="_blank" rel="external">感触</a>, 觉得之前并没有打造一个优质的职业和学习关系网，迫切渴望找到一些志同道合之人，可以一起学习进步。所以去年做了好几样事情：</p>
<ol>
<li>加入珠海 GDG，时不时去当一下志愿者和参加聚会</li>
<li>花血本从珠海飞北京参加了两次会议，一次是 AgileChina2013，一次是京JS。</li>
<li>约几个旧同事和好友，组织起来一起学习和交流</li>
</ol>
<p>几件事情下来，还是有点体会的。</p>
<p>首先，珠海 GDG 的参于还是挺让人兴奋的。参加者因为多为学生，演讲主题都主要是入门级的。真要按照营养上来说的话，对我受益不大。但是有机会认识大妈，刘鑫老师和其他一些组员还是挺高兴的，还让自己增添不少活力。不过以后要参加，就要尽量看能否上去做分享，而不是去听。</p>
<p>至于参加一些行业会议，我的目的本来就很坦然，就是看什么会议是值得去的，什么不值得。所以，目标完全实现。AgileChina2013 那次主要是要去听 David 亲自授课，所以感觉很好。后面的大会，因为讲的是方法论什么的多，这些不亲自实践是没办法了解的，而我近期主要攻技术，所以，敏捷这类大会就不会再去了。京JS 给我的感觉也还可以，虽然会议上难免各种对自己作品的广告，但是还是能和一些大神交流，了解他们的看法，新动向等，还是不错的，明年的 JS 大会应该还会去。经过这些行业会议，体会就是，你如果想和牛人有更多话题，让他们关注和看得起你，自己得先变成牛人。今看还是会留预算去参加一到两个这些会议，看几时能让别人看得起。</p>
<p>最后一个自我组织朋友来一起交流学习的事情，好坏参半。目前情况基本可以说告一段落。虽然大家有聚在一些玩了一些东西，但是感觉每个人的兴趣偏好和对聚会的期望都不尽相同，最后这个聚会基本可以说是失败的。但是中间也学习到不少，和知道自己想要什么。有些事情强求不来，步子迈大了就扯着蛋了。</p>
<h3 id="开源和项目">开源和项目</h3>
<p>本来是计划做一个 Pet Project，但是做一半后，像上面说的，想约三五朋友一起去做一个更大的东西，一个像 Salesforce 那样的一个 Multi-tenant 的企业系统。可惜没人搭理我，后面自己在考虑怎么在 MongoDB 动态分配空间，和实现了一下后，感觉这东西太大了，先放了下来，后面再找机会继续。</p>
<p>在学习和实践期间，做了两个小玩意出来，一个是用于在 Node.js 和浏览器共享代码的 <a href="https://github.com/kenspirit/webassemble" target="_blank" rel="external">webassemble</a>, 还有一个是在 ExtJS 里面用 Promise 的 <a href="https://github.com/kenspirit/ExtPromise" target="_blank" rel="external">ExtPromise</a>。前一个今年如果自己不做什么项目的话，估计使用就会比较少了。希望后一个能什么时候在公司项目里用上。</p>
<p>自己还算是开源的踊跃支持者的，并有幸被 AngularJS 接纳了一个 enhancemnt patch，非常高兴。今年看书以外如果有时间看源码，还会挑一些开源的 JS 项目来参于一下，目前考虑 AngularJS 和 React。</p>
<h2 id="时间安排">时间安排</h2>
<p>学习时间：<br>基本上是按照去年的时间安排走。上下班车里的30分钟，还有其它一切可能的坐车时间，现在都在用 MBA 看书和写代码。早上5:30左右起来，一直到7点，大概1小时多点而已，周末时间长点。周末午休时间也大概有2小时。基本上就这么多了。</p>
<p>家庭时间：<br>和去年差不多，占个人时间大头。但是还是一个不懂怎么培养孩子的父亲，因为时间花在考虑怎么培养自己上面了。只希望给他带个好头，别学坏了就好。每每看到 Michelle 带她女儿体验什么，学习什么，各种惭愧。</p>
<p>锻炼时间：<br>中间有段时间断了一下，因为身体受伤，杂七杂八事情，没能很好坚持每天早上固定15分钟左右的锻炼时间。最近恢复，跳绳为主。今年还是得加强一下，身体是本钱。好玩的事情是人生第一次参加公司篮球比赛，虽然偶尔有上场，但主要是抱同组里年轻小伙的大腿，拿到人生的第一个第一名。</p>
<h2 id="善事">善事</h2>
<p>这方面去年贡献不多，主要是个人精力不足，所以违背了去年美好的想法，每月固定给壹基金和联合国儿间基金会捐助一点。事后证明我行的确实是伪善。</p>
<h2 id="总结">总结</h2>
<p>工作还凑合，仍需努力和把自己的爱好用在公司项目上。自己喜爱的东西，很难在公司派上用场，感觉真不太爽，看今后怎么操作吧。虽然已经在不断努力学习，也做了一些东西，但是离10000小时原则的强度和积累还是差太远了，今年必须更加努力。正如前面安排，把自己基础巩固好，希望后面能有效提升效能，不断参于开源，写 Blog 和分享总结。还有一件事就是希望可以做个有趣的人，从生活中找找灵感，看能做些什么好玩意没有，反正是随心写代码。</p>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Goal" scheme="http://www.thinkingincrowd.me/tags/Goal/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to use Ext Ajax in Promise style and test it]]></title>
    <link href="http://www.thinkingincrowd.me/2013/11/25/how-to-use-ext-ajax-in-promise-style-and-test-it/"/>
    <id>http://www.thinkingincrowd.me/2013/11/25/how-to-use-ext-ajax-in-promise-style-and-test-it/</id>
    <published>2013-11-25T00:50:00.000Z</published>
    <updated>2015-05-20T15:09:56.000Z</updated>
    <content type="html"><![CDATA[<p>After translated a <a href="http://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/" target="_blank" rel="external">blog</a> about how Promise works in a more functional programming way, I tried to build something to make Ext Ajax call to work in Promise style as a practice.  </p>
<p><a href="https://github.com/kenspirit/ExtPromise" target="_blank" rel="external">ExtPromise</a> is a simple wrapper to Ext.Ajax and Ext.data.Connection to help you do an Ajax call in Promise style instead of passing success/failure callback to it.  The Promise library I used is the <a href="https://github.com/petkaantonov/bluebird" target="_blank" rel="external">bluebird</a>.  I chose it not only because its speed is faster than most of the Promise library, but also its error handling philosophy looks cleaner and more attractive.  </p>
<p>It didn’t took long to implement the ExtPromise wrapper but it took me some time to test it.  </p>
<p>Originally, I thought I could use the <a href="http://www.thinkingincrowd.me/blog/2012/08/30/extjs-jasmine-unit-test-part-2-ajax-behavior-2/" target="_blank" rel="external">jasmine-ajax</a> I enhanced and shared before about how to test Ajax call in ExtJs.  However, it doesn’t work as expected.  Testing Async method in <a href="http://pivotal.github.com/jasmine/" target="_blank" rel="external">Jasmine</a> seems very awkward because the API in version 1.4 and 2.0 are dramaticlly different.  Even worst, many strange issues messed around all the way.  </p>
<p>I finally gave up and search other alternative approaches.  <a href="http://github.com/cjohansen/Sinon.JS" target="_blank" rel="external">Sinon.js</a> and <a href="http://github.com/visionmedia/mocha/" target="_blank" rel="external">Mocha</a> come to rescure.  It is pretty easy to test the Ajax call using the <code>useFakeXMLHttpRequest</code> provided by Sinon and the Async testing in Mocha looks more intuitive (Jasmine 2.0 use the same way).  Let’s see how the testing (BDD style) is setup.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">"Ajax should be now working in promise style"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> xhr, ajax;</div><div class="line"></div><div class="line">    before(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        xhr = sinon.useFakeXMLHttpRequest();</div><div class="line">        xhr.onCreate = <span class="function"><span class="keyword">function</span><span class="params">(xhr)</span> </span>{</div><div class="line">            ajax = xhr;</div><div class="line">        }</div><div class="line">    })</div><div class="line"></div><div class="line">    after(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        xhr.restore();</div><div class="line">    });</div><div class="line"></div><div class="line">    describe(<span class="string">'ExtPromise.Ajax'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        it(<span class="string">"#success case"</span>, <span class="function"><span class="keyword">function</span><span class="params">(done)</span> </span>{</div><div class="line">            ExtPromise.Ajax().request({url: <span class="string">'foo'</span>})</div><div class="line">            .then(<span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>{</div><div class="line">                expect(result.responseText).to.equal(<span class="string">'Bar'</span>);</div><div class="line">                done();</div><div class="line">            })</div><div class="line">            .catch(done);</div><div class="line"></div><div class="line">            ajax.respond(<span class="number">200</span>, { <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> }, <span class="string">'Bar'</span>);</div><div class="line">        });</div><div class="line">    });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>It’s quite straightforward.  Before test spec runs, it’s required to stub the XMLHttpRequest using Sinon’s <code>useFakeXMLHttpRequest</code> API and obtain a reference in the <code>onCreate</code> method so that later it can be used to stub a response.  </p>
<p>Passing a <code>done</code> parameter in the test spec function tells Mocha that this spec is for Async testing and callinig <code>done()</code> will end it.  One thing to notice here is this part.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.catch(done);</div></pre></td></tr></table></figure>

<p>If you don’t do this, and the assertion in the test spec failed, the error it shows will be a timeout error instead of telling the true assertion error.  </p>
<p>When testing failure case, the style written like below doesn’t look good and error-prone because <code>done()</code> is called twice although you might think the success resolver doesnot require as it should not be called.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ExtPromise.Ajax().request({url: <span class="string">'foo'</span>, scope: scopeObj})</div><div class="line">    .then(scopeObj.getName)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>{</div><div class="line">        expect(result).to.equal(<span class="string">'Bar In scope'</span>);</div><div class="line">        done();</div><div class="line">    }, <span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>{</div><div class="line">        expect(result.status).to.equal(<span class="number">500</span>);</div><div class="line">        done();</div><div class="line">    })</div><div class="line">    .catch(done);</div><div class="line"></div><div class="line">ajax.respond(<span class="number">500</span>, { <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> }, <span class="string">'Error'</span>);</div></pre></td></tr></table></figure>

<p>You may rewrite the call to <code>done</code> in a then call.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ExtPromise.Ajax().request({url: <span class="string">'foo'</span>, scope: scopeObj})</div><div class="line">    .then(scopeObj.getName)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>{</div><div class="line">        expect(result).to.equal(<span class="string">'Bar In scope'</span>);</div><div class="line">    }, <span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>{</div><div class="line">        expect(result.status).to.equal(<span class="number">500</span>);</div><div class="line">    })</div><div class="line">    .then(done)</div><div class="line">    .catch(done);</div><div class="line"></div><div class="line">ajax.respond(<span class="number">500</span>, { <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> }, <span class="string">'Error'</span>);</div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="Javascript" scheme="http://www.thinkingincrowd.me/tags/Javascript/"/>
    
      <category term="Promise" scheme="http://www.thinkingincrowd.me/tags/Promise/"/>
    
      <category term="ExtJs" scheme="http://www.thinkingincrowd.me/tags/ExtJs/"/>
    
      <category term="Functional Programming" scheme="http://www.thinkingincrowd.me/tags/Functional-Programming/"/>
    
      <category term="Ajax" scheme="http://www.thinkingincrowd.me/tags/Ajax/"/>
    
      <category term="Jasmine" scheme="http://www.thinkingincrowd.me/tags/Jasmine/"/>
    
      <category term="Mocha" scheme="http://www.thinkingincrowd.me/tags/Mocha/"/>
    
      <category term="Sinon.js" scheme="http://www.thinkingincrowd.me/tags/Sinon-js/"/>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[京JS 2013 之挖坑自埋与神打击]]></title>
    <link href="http://www.thinkingincrowd.me/2013/11/14/jingjs-2013-fun/"/>
    <id>http://www.thinkingincrowd.me/2013/11/14/jingjs-2013-fun/</id>
    <published>2013-11-14T12:21:00.000Z</published>
    <updated>2015-05-20T15:09:56.000Z</updated>
    <content type="html"><![CDATA[<p><img alt="JingJS Badge" src="http://thinkingincrowd.u.qiniudn.com/JingJS_Badge.jpg?imageView/2/w/100" style="position: relative; float: left; margin-right: 5px; border: 0px;">首先要吐槽一下 <a href="http://weibo.com/jingjs2013" target="_blank" rel="external">@京JS</a>。指示牌不清楚，从酒店另一个门进去根本看不到，最悲剧的是酒店的服务员都不知道这个会议。还有就是硬件上相当不给力，没有 WIFI，这不是新10大酷刑之一吗？没午饭，还要我等外地屌丝奔波找吃的。加之第一天的讲座广告水份有点多，个人感觉有趣的和比较好的是 <a href="https://github.com/substack" target="_blank" rel="external">@substack</a>，<a href="http://isaacmao.com/" target="_blank" rel="external">Issac</a> 和讲 Data Visualization 的 Nick。第二天早上的主题还是相当给力的，下午 Kim, Jakob 也还不错。</p>
<p>晚上的活动还是要狠狠表扬一下 @京JS。第一晚包了车库咖啡，晚饭虽然是 Pizza 等，但是量也算足，只是地方有点小，不过也是逼着和别人站着交流的好机会。星期天的晚上还有去 Bar 的 after-party，可惜我要赶飞机回珠海，就没法去了，但估计也会很棒。</p>
<p>第一天晚上，看到 @substack 来了后，我坚定不移地过去和他搭话，接着各种好玩，技术黑和大神间（当然这不包我）的对话就来了。首先声明，可以肯定我的智商是完全没法跟上大神的，加上没法肯定听力上能跟上多少。所以下面的一些神吐糟不保证 100％ 正确，有错误的话也是我这译者的错误，并且这里的技术黑都不是拉仇恨啊。 Please forgive my poor English for any potential misleading.</p>
<p>我和他搭话是因为我最近看的一篇<a href="http://www.thinkingincrowd.me/blog/2013/11/13/callbacks-are-imperative/" target="_blank" rel="external">关于 Promise 的文章</a>，个人感觉不错的，想问他对比 Callback 有什么看法。原来他并不太喜欢 Promise。（好了，整晚挖坑自埋的节奏开始了）。他指点我去看看 <a href="http://callbackhell.com" target="_blank" rel="external">callbackhell.com</a>，还有他的 <a href="https://github.com/substack/stream-handbook" target="_blank" rel="external">stream-handbook</a>。说如果我按照那样做了，也应该不会碰到什么 Hell 的问题。他说即使他以后遇到，也是首先偏向于用 <a href="https://github.com/caolan/async" target="_blank" rel="external">Async</a> 的。</p>
<p><img alt="Substack Signature" src="http://thinkingincrowd.u.qiniudn.com/Substack_Signature.jpg?imageView/2/w/500" style="border: 0px;"></p>
<p>接着一个同学拿着 Douglas Crockford 的书给他签名，他说虽然和他有点过节还是观点不同什么来着（他用的词忘了），但还是签了（他的签名很有趣，就是上面这幅机器人漫画，幸亏我也拿到一个）。我就八卦了一下问是他说的是什么情况，他举例说那个什么 <a href="http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html" target="_blank" rel="external">Hoisting</a> 就是胡扯。我当然也很赞同的说是的，应该定义在离它最近使用的地方。好像记得 <a href="http://weibo.com/lifesinger" target="_blank" rel="external">@玉伯也叫射雕</a> 也是持同样观点的。</p>
<p>然后 <a href="http://weibo.com/fool2fish" target="_blank" rel="external">@fool2fish</a> 出现了，问他关于一些测试方面怎么区分浏览器 Tab 独立线程，监测 CPU，等什么的（好像是说这些吧，中间没太跟上）。然后他不断解说和演示他的 <a href="https://github.com/substack/testling" target="_blank" rel="external">testling</a> 可以拿来怎么用。</p>
<p>之后 @fool2fish 就问可以在 testling 里用什么测试框架，@substack 又把自己的 <a href="https://github.com/substack/tape" target="_blank" rel="external">tape</a> 搬出来耍了。@fool2fish 再问能否集成 <a href="https://github.com/visionmedia/mocha" target="_blank" rel="external">Mocha</a> 之类的框架时，@substack 说可以的。但是他不喜欢用那些框架，一堆的全局变量，evil，不是 Node 可以直接运行的程序。还有 <a href="https://github.com/pivotal/jasmine" target="_blank" rel="external">Jasmine</a> 什么的更烂。估计喜欢这两个的，听到这都晕了。</p>
<p>然后转到问是否支持 <a href="http://en.wikipedia.org/wiki/Asynchronous_module_definition" target="_blank" rel="external">AMD</a>，<a href="http://wiki.commonjs.org/wiki/CommonJS" target="_blank" rel="external">CommonJS</a> 的主题上。@fool2fish 就给他瞄了一眼 <a href="https://github.com/seajs/seajs" target="_blank" rel="external">SeaJS</a> define 的用法，可能本想把它推出国门。没想到他说他知道 SeaJS，但这不是 CommonJS，是 fake 的写法。@fool2fish 脸都绿了，都想拉 @玉伯也叫射雕 来抵抗一下了，没等反应过来。@substack 又搬出了他的 <a href="https://github.com/substack/node-browserify" target="_blank" rel="external">browserify</a> 来说明怎么把 Node 的代码和浏览器分享（这个观点我一直是比较赞同的，所以之前也基于 <a href="https://github.com/medikoo/modules-webmake" target="_blank" rel="external">webmake</a> 搞了个 <a href="https://github.com/kenspirit/webassemble" target="_blank" rel="external">webassemble</a>。因为我觉的生产环境基本都是打包好再用的，哪有什么异步再去拿文件，异步也是拿另一个大 bundle。require 在 Node 的写法，如果在浏览器能通用确实挺好的。回头细想是不是偏后端程序员没看到前端看到的另一些东西，我再想想）。旁边的另一个鬼佬（抱歉不认识是哪位神），看到我们被打击的样子，几乎笑的不行了，都和 @substack 说你别再打击他们了，可是神才不鸟你，继续打击。</p>
<p>后面，他们都走了，我犯贱又去问 @substack 怎么看那些前端的 MVC 或者 MVVM 的框架，比如 <a href="http://angularjs.org" target="_blank" rel="external">AngularJS</a>。他说他还没看懂到底它最终要解决什么问题，一堆的东西，什么 DI，Databinding 等。我说 Databinding 很好啊，可以免得我们写一堆代码拿值赋值等，declarative 语法也不错啊。他说他只是写纯粹的 JS，那些拿值赋值的可以什么把原生操作抽象和模块化，举例说把复杂的 Form 抽象成模块，只在里头处理赋值拿值之类的。我说那不是 JS 和 HTML 混一起了吗？他好像说只要模块化的好就没有问题了。晕。（这里不敢苟同，可能我还没到那种境界）</p>
<p>最后，又再一次嘴贱的问他那个 tape 能不能集成到 <a href="http://gruntjs.com/‎" target="_blank" rel="external">Grunt</a>。没想到他说他也没看明白 Grunt 有什么用，我就知道我又挖坑埋自己了。他啪啪啪敲键盘和让我看他怎么用 NPM 的 test 命令，自定义命令和直接结合 Script 来做到一系列的集成操作的。</p>
<p>@substack 真是 geek 到不行啊。他追求纯粹，简洁，和模块化可以说到极致的境地，不喜欢那些大而全的框架，真的是和我最近看的 “Art of Unit Programming” 那本书说到 “Only do one thing and do it really well”，然后通过组合把一些小工具结合成更强大的工具的思想非常吻合。</p>
<p>后面 H神 来了之后，被打击对象转到他头上了。是的，神喷神了，哈哈。以下可能和原话有偏差，因为大神间的对话，我有时实在很难跟上。</p>
<p>H神 在做的是 <a href="http://vertx.io/" target="_blank" rel="external">Vert.x</a>。他一开始说它们直接支持在 npm 跑还是改了加了什么新功能来着。（一开始我在纠结那个 Vertx 发音是什么东西，迷失了一下）。@substack 就说你们那么改的原因是什么？带来什么好处？没好处改来干什么？（另一个神被打击的样子很有趣 :D ）。后来说 Vert.x 特性是 Polyglot，说到支持 Java，Python 等，@substack 意思好像是说为什么要那么做？那些垃圾语言支持来干嘛？（Python 差点被拖累了，他后来改口说 Python 不烂）我永远都不要写 JAVA。H神 也脸绿了，我也帮口说在商业大项目里，因为系统和团队的多和杂，Polyglot 和 JAVA 都是需要的，虽然我现在也不喜欢 JAVA。其实无论我们怎么说，神的观点都不会变，他就说我不会遇到这样的情况，哈哈。H神 后来问 @substack Vert.x 怎么才能被他们 buyin (接受)，@substack 就不断 blablabla 说什么你们的 api 要保持和 npm 一致，要在 npm 上容易安装，可以通过 -g 参数那样装了后，命令运行等，不然你看现在没人鸟你们，然后各种建议给他。</p>
<p>两大神后来开始缅怀小时候几岁的时候玩什么技术之类的，我的智商和听力就彻底跟不上了。后来 H神 说他用 SQL 去考他妈妈，他妈妈竟然只需要问它那个语句是干什么的，然后她妈妈竟然可以从汇编，指令和寄存器的角度指出它哪里有问题了。靠，开挂了吧。H神 还想请 @substack 去他们上海公司给员工感受一下什么叫做 live for code，而不是 code for live 的精神。说费用他包，问有没有兴趣。@substack 好像说会在中国待 3 星期，没什么问题，之后可能还要到深圳来骑车什么的。深圳的同学们有关系的话，就看能不能请到他去玩了。后面我们扯着扯着就讲到为什么国内那么难找到这样的人，什么独生政策，教育，压力的都来了。中间我还讥讽 H神 也还不是 code for live。他说不是，他是因为写 code 是让他可以赚最多钱的工作。其实他还可以搞建筑什么的，还说他的床上功夫也不错，笑死我。 我们就这样一直聊到 10 点散场了才走了。</p>
<p>整个晚上和 @substack 及其他大神的一些直接对话真比在会场听一天感悟还多。所以意见是大家以后听会议，一定要准备问题，尽量和各种大神聊天。只是听讲座和拍几张PPT或大神照片就没什么用了。</p>
<p><img alt="Group" src="http://thinkingincrowd.u.qiniudn.com/JingJS_AfterParty.JPG?imageView/2/w/500" style="border: 0px;"></p>
]]></content>
    
    
      <category term="Javascript" scheme="http://www.thinkingincrowd.me/tags/Javascript/"/>
    
      <category term="JingJS" scheme="http://www.thinkingincrowd.me/tags/JingJS/"/>
    
      <category term="JSConf" scheme="http://www.thinkingincrowd.me/tags/JSConf/"/>
    
      <category term="NodeJS" scheme="http://www.thinkingincrowd.me/tags/NodeJS/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[回调函数是指令式的，Promise 是函数式的：Node 错失的最大机会]]></title>
    <link href="http://www.thinkingincrowd.me/2013/11/13/callbacks-are-imperative/"/>
    <id>http://www.thinkingincrowd.me/2013/11/13/callbacks-are-imperative/</id>
    <published>2013-11-13T13:43:00.000Z</published>
    <updated>2015-05-20T15:09:56.000Z</updated>
    <content type="html"><![CDATA[<p>我之前都有接触过关于 <a href="http://en.wikipedia.org/wiki/Promise_(programming)" target="_blank" rel="external">Promise</a> 的一些文章，但是对它的感觉并不大。因为觉得虽然<a href="http://en.wikipedia.org/wiki/Callback_(computer_programming)" target="_blank" rel="external">回调</a>风格确实有问题，但我写的代码还没有复杂到那种程度，所以，要去使用的感觉并不强烈。</p>
<p>但是，后面碰到一个问题真的好像用回调的风格来写的话，会比较糟糕。加上看到了这一篇从另一侧面来看 Promise 对函数式编程的思维方面的转变，觉得很不错。值得一看，所以在有其它大神也翻译过的情况下，自己也译一次，顺便深入学习。</p>
<p>原文链接： <a href="http://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/" target="_blank" rel="external">Callbacks are imperative, promises are functional: Node’s biggest missed opportunity</a></p>
<blockquote>
<p>Promise的本质就是他们不随着环境的变化而变化。</p>
<p>  —— Frank Underwood，‘纸牌屋’</p>
</blockquote>
<p>你经常会听到说 JavaScript 是一门 “函数式” 编程语言。通常我们这样描述它的时候是因为函数在它里面是作为 “一等公民” 而存在的。但是其它 “函数式” 编程语言里面的特性，比如：数据不可改变，代数类型系统，使用迭代优于循环，避免副作用都统统忽略了。虽然函数作为 “一等公民” 是非常有用的，并且决定用户能够在需要的时候使用函数式风格来编写代码。但是 JS 是函数式的观点却常常忽略了函数式编程的核心思想：面向值编程。</p>
<p>“函数式编程” 的命名其实会产生误导，以至于人们认为它的意义在于，相对于 “面向对象编程” 来说，它是 “面向函数编程”。但是如果面向对象编程是把所有东西都从对象角度考虑，那函数式编程就是把所有东西都作为值来处理，而不仅仅是把函数考虑为值。很明显，数值当然包含那些数字，字符，列表和其它数据值，但其实它也包含其它面向对象编程的粉丝通常没有考虑过的一些东西：IO 操作和其它副作用，GUI 事件流，空值检查，甚至函数调用的顺序。如果你曾经听说过 “<a href="http://en.wikipedia.org/wiki/Monad_(functional_programming)" target="_blank" rel="external">可编程分号</a>” 的话，你应该知道我想说的是什么了.</p>
<p>函数式编程最大的好处是它是声明式的。在命令式编程里面，我们需要写一系列的指令来告诉计算机是怎么去实现我们想要做的事情的。在函数式编程里面，我们只是需要描述值之间的计算关系，计算机就会自己想办法得出需要的计算指令顺序。</p>
<p>如果你使用过 Excel 的话，你其实已经用过函数式编程了：你只需要描述一个图表里面的值，是怎么相互计算出来的。当有新数据插入的时候，Excel 就会自己得出图表里有什么地方的值和效果要更新，而你并不需要再为它写出任何指令，它也可以帮你计算出来。</p>
<p>在阐述了这些基本概念的基础上，我想说明一下我觉得 Node.js 在设计上最大的失误是什么: 这就是在它的设计早期，决定了倾向于使用回调风格的 API 而不是 promise 风格.</p>
<blockquote>
<p>所有人都使用回调。如果你发布了一个返回 promise 的模块，根本没有人会关注和使用你那个模块。</p>
<p>如果我写了一个小模块，它需要和 Redis 交互，我所需要做的唯一一件事情就是传递一个回调函数给 Redis。当我们遇到<a href="http://callbackhell.com/" target="_blank" rel="external">回调无底洞</a>的时候，其实这根本不是什么问题: 因为同样有<a href="http://en.wikipedia.org/wiki/Coroutine" target="_blank" rel="external">协程</a>和 <a href="http://en.wikipedia.org/wiki/Monad_(functional_programming)" target="_blank" rel="external">monad</a> 无底洞。因为如果你把任何一个抽象使用地足够频繁的话，都同样会创造一个无底洞。</p>
<p>在 90% 的情况下，你只需要做一件事情，回调如此简单的接口使得你只是需要简单的缩进一下就可以了。如果你遇到了非常复杂的用例，你和其它在 npm 里面的 827 个模块一样，使用 async 就好了.</p>
<p>—— Mikeal Rogers，LXJS 2012</p>
</blockquote>
<p>这段话是从 Mikeal Rogers 最近的一次涵盖了好些 Node 设计哲学的演讲里摘取出来的:</p>
<blockquote>
<p>在 Node 的初期设计目标里面，我希望可以让更多的非专家级别的程序员可以很容易编写出快速，支持并行的网络程序，虽然我知道这个想法有点违背生产效率。Promises 其实可以使得程序在运行时自动控制数据流动，而不是靠程序员通过显式指令控制，所以能更加容易组织正确清晰和最大化并行操作的程序.</p>
</blockquote>
<p>要写出正确的并行程序基本上需要你实现尽可能多的并行工作的同时，保证操作指令还是以正确的顺序执行。虽然 JavaScript 是单线程的，但我们依然有可能因为在异步操作的情况下触发了竞争机制: 任何涉及 IO 的操作都会在它等待回调的时候把 CPU 时间腾到其它操作上面。多个并发操作就有可能同时访问同一段内存数据，或者产生一系列重叠的操作数据库或者 DOM 的指令。所以，我希望在这篇文章里可以告诉大家，promies 能够像 Excel 一样，提供一种只需要描述值之间的关系模型，你的工具就能够自动寻求最佳解决方案给你。而不是需要你自己控制程序流.</p>
<p>我希望可以清除掉一个误区就是 promises 的使用就是为了让语法结构看起来比基于回调的异步操作更清晰。其实它们可以帮助你用一个完全不同的方式来建模。它们的作用比简化语法来得更深层次。事实上，它们完全从语意角度改变你解决问题的方式。</p>
<p>首先，我想先重温一下几年前写的一篇文章。它是关于 promises 是怎么在异步编程上作为一个 monad 的角色而存在的。这里的核心思想就是 monad 其实是帮助你组织函数的工具，比如说，当一个函数的返回值要做为下一个函数的输入的时候，建立数据管道。数据关系的结构化是实现的关键。</p>
<p>在这里的，我还是需要用到 Haskell 的类型注解来帮助说明一下。在 Haskell 里，注解 foo :: bar 表示 “foo 是 bar 的类型“。注解 foo :: Bar -&gt; Qux 表示 “foo 是一个接受输入值为 Bar 类型和返回值为 Qux 类型的函数“。如果输入输出的类别并不重要的话，我们会用单一小写字母，foo :: a -&gt; b。如果函数 foo 可以接受多个参数的化，我们会添加多个箭头，比如：“ foo :: a -&gt; b -&gt; c ” 表示 foo 接收两个分别为类型 a 和 b 的参数并返回类型 c 的值.</p>
<p>我们来看一个 Node 函数吧，比如，fs.readFile()。这个函数接收一个 String 类型的路径参数，还有一个回调函数，并且没有任何返回值。回调函数会接收一个可能为空的 Error 类型和一个包含了文件内容的 Buffer 类型的参数，并且也没有返回值。那我们就可以把 readFile 的类型用注解表示为:</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">readFile</span> :: <span class="type">String</span> -&gt; <span class="type">Callback</span> -&gt; ()</div></pre></td></tr></table></figure>

<p>() 在 Haskell 注解中表示空值类型。这里的 callback 是另一个函数，它的注解可以表示为:</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">Callback</span> :: <span class="type">Error</span> -&gt; <span class="type">Buffer</span> -&gt; ()</div></pre></td></tr></table></figure>

<p>把它们放在一起的话，我们可以说 readFile 接收两个参数，一个 String 类型，一个是接收 Buffer 参数的函数:</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">readFile</span> :: <span class="type">String</span> -&gt; (<span class="type">Error</span> -&gt; <span class="type">Buffer</span> -&gt; ()) -&gt; ()</div></pre></td></tr></table></figure>

<p>现在，我们来想象一下假如 Node 使用 promises 会是怎么样的。这样的情况下，readFile 可以简单的接收一个 String 类型参数然后返回一个 Buffer 的 promise:</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">readFile</span> :: <span class="type">String</span> -&gt; <span class="type">Promise</span> <span class="type">Buffer</span></div></pre></td></tr></table></figure>

<p>一般来说，我们可以认为回调风格的函数接收一些参数和一个函数，这个函数将会被最终调用并传递返回值作为它的输入；promises 风格的函数就是接收一些参数，和返回一个带结果的 promise:</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">callback</span> :: a -&gt; (<span class="type">Error</span> -&gt; b -&gt; ()) -&gt; ()</div><div class="line"><span class="title">promise</span> :: a -&gt; <span class="type">Promise</span> b</div></pre></td></tr></table></figure>

<p>那些回调风格返回的空值其实就是为什么使用回调风格来编程会很困难的根本原因: 回调风格不返回任何值，所以难以组合。一个没有返回值的函数执行的效果其实是利用它的副作用 – 一个没有返回值和利用副作用的函数其实就是一个黑洞。所以，使用回调风格来编程无法避免会是指令式的，它实际上是通过把一系列严重依赖于副作用的操作安排好执行顺序，而不是通过函数的调用来把输入输出值对应好。它是通过人手组织程序执行流程而不是靠理顺值的关系来解决问题的。这正是编写正确的并行程序困难的原因.</p>
<p>相反，基于 promise 的函数总是让你把函数返回值作为一个不依赖于时间的值来考虑的。当你调用一个回调风格的函数时，在你的函数调用和它的回调函数被调用之间，在程序里面我们没办法找到一个最终结果的表现形式.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fs.readFile(<span class="string">'file1.txt'</span>,</div><div class="line">  <span class="comment">// some time passes...</span></div><div class="line">  <span class="function"><span class="keyword">function</span><span class="params">(error，buffer)</span> </span>{</div><div class="line">    <span class="comment">// the result now pops into existence</span></div><div class="line">  }</div><div class="line">);</div></pre></td></tr></table></figure>

<p>从基于回调和事件的函数里面取得结果基本上意味着 “你必须在恰当的时间和地点”。如果你在事件被触发之后才绑定你的事件监听器，或者你没有在恰当的地方回调你的函数，那么恭喜你，你将无法得到你要的结果了。这些事情使得人们在 Node 里写 HTTP 服务器相当困难。如果你的控制流不对，你的程序就无法按期望运行.</p>
<p>相反，Promises 并不关心执行的顺序。你可以在 promise 兑现前或后注册监听器，但你总能拿到它的返回值。因此，那些马上返回的 promises 其实是给了你一个代表结果的值，让你可以把它当作一等公民，然后传递给其它函数。中间不需要等待一个回调或任何丢失事件的可能性。只要你手中拿着一个 promise 的引用，你就能从它得到你想要的值.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Promise();</div><div class="line">p1.then(<span class="built_in">console</span>.log);</div><div class="line">p1.resolve(<span class="number">42</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Promise();</div><div class="line">p2.resolve(<span class="number">2013</span>);</div><div class="line">p2.then(<span class="built_in">console</span>.log);</div><div class="line"></div><div class="line"><span class="comment">// prints:</span></div><div class="line"><span class="comment">// 42</span></div><div class="line"><span class="comment">// 2013</span></div></pre></td></tr></table></figure>

<p>即便 then() 这个方法似乎隐含一些关于操作顺序 – 事实上这只是它的副作用 – 你可以把它想象成叫做 unwrap。Promise 是一个未知值的容器，那么 then 的工作就是从 promise 中把值取出来并交给另一个函数: 它其实是 monad 的 bind 函数。其实上面的代码里没有任何地方提及什么时候这个值是存在的，或事情是按照什么顺序发生的，它只是表达了一些依赖关系在里面: 你必须首先知道那个值是什么，然后才能够把它打印出来。程序的顺序是从值的依赖关系中衍生出来的。这里其实只有很小的区别，我们在后面讨论到延迟 promise 的时候会看得更清楚.</p>
<p>到目前为止，这些区别都很微小；很少函数单单和其它函数交互。我们现在来处理一些复杂一点的问题，以便看到 promises 更加强大之处。假设我们现在有一些代码，通过使用 fs.stat() 来取得一些文件的 mtimes。如果是同步的操作，我们只是需要调用 paths.map(fs.stat) 就可以了，但是因为用 mapping 来处理异步的问题是很困难的，我们看看用上 async 模块是什么样子.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> async = <span class="built_in">require</span>(<span class="string">'async'</span>),</div><div class="line">    fs    = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> paths = [<span class="string">'file1.txt'</span>，<span class="string">'file2.txt'</span>，<span class="string">'file3.txt'</span>];</div><div class="line"></div><div class="line">async.map(paths，fs.stat，<span class="function"><span class="keyword">function</span><span class="params">(error，results)</span> </span>{</div><div class="line">  <span class="comment">// use the results</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>(是的，我知道 fs 的函数有同步版本，但大多数涉及 I/O 的操作都没法这么做，就陪我玩一玩吧。)</p>
<p>这样看起来都还不错，直到我们决定要拿到 file1 的大小来做其它不相关的任务的时候。当然，我们可以再拿一次那个文件的状态:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> paths = [<span class="string">'file1.txt'</span>，<span class="string">'file2.txt'</span>，<span class="string">'file3.txt'</span>];</div><div class="line"></div><div class="line">async.map(paths，fs.stat，<span class="function"><span class="keyword">function</span><span class="params">(error，results)</span> </span>{</div><div class="line">  <span class="comment">// use the results</span></div><div class="line">});</div><div class="line"></div><div class="line">fs.stat(paths[<span class="number">0</span>]，<span class="function"><span class="keyword">function</span><span class="params">(error，stat)</span> </span>{</div><div class="line">  <span class="comment">// use stat.size</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>这样显然没有问题，但是我们现在取了那个文件的状态两次。当然，本地的文件操作是没有问题的，但如果我们正在通过 https 来获取大文件的时候，那麻烦就大了。所以，我们只能访问文件一次。这样，我们就要修改一下前面的代码来特殊处理一下第一个文件:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> paths = [<span class="string">'file1.txt'</span>，<span class="string">'file2.txt'</span>，<span class="string">'file3.txt'</span>];</div><div class="line"></div><div class="line">async.map(paths，fs.stat，<span class="function"><span class="keyword">function</span><span class="params">(error，results)</span> </span>{</div><div class="line">  <span class="keyword">var</span> size = results[<span class="number">0</span>].size;</div><div class="line">  <span class="comment">// use size</span></div><div class="line">  <span class="comment">// use the results</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>这初看也没有问题，但是获取文件大小的任务就必须等到整个列表都处理完了才能够开始。如果其中任何一个文件处理出错，我们就无法得到第一个文件的结果了。这种方案并不好，那我们来试一试另一种方式: 我们把第一个文件分开单独处理.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> paths = [<span class="string">'file1.txt'</span>，<span class="string">'file2.txt'</span>，<span class="string">'file3.txt'</span>],</div><div class="line">    file1 = paths.shift();</div><div class="line"></div><div class="line">fs.stat(file1，<span class="function"><span class="keyword">function</span><span class="params">(error，stat)</span> </span>{</div><div class="line">  <span class="comment">// use stat.size</span></div><div class="line">  async.map(paths，fs.stat，<span class="function"><span class="keyword">function</span><span class="params">(error，results)</span> </span>{</div><div class="line">    results.unshift(stat);</div><div class="line">    <span class="comment">// use the results</span></div><div class="line">  });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>这样当然可行，但是现在我们的程序并不是并行的了: 它将需要更长的时间去运行，因为我们必须等到第一个文件处理完才能开始处理那个列表里的文件。之前，它们都是同步进行的。还有，我们现在还必须对第一个文件特殊处理而引入一些数组的操作.</p>
<p>好吧，最后一击。我们现在要做的是得到所有文件的详情，每个文件只读取一次，如果第一个文件读取成功了我们要做些特殊处理，并且如果整个列表里的文件都处理成功，我们要对整个列表再进行一些操作。让我们用 async 来在代码里表达出这个需求的依赖关系看看.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> paths = [<span class="string">'file1.txt'</span>，<span class="string">'file2.txt'</span>，<span class="string">'file3.txt'</span>],</div><div class="line">    file1 = paths.shift();</div><div class="line"></div><div class="line">async.parallel([</div><div class="line">  <span class="function"><span class="keyword">function</span><span class="params">(callback)</span> </span>{</div><div class="line">    fs.stat(file1，<span class="function"><span class="keyword">function</span><span class="params">(error，stat)</span> </span>{</div><div class="line">      <span class="comment">// use stat.size</span></div><div class="line">      callback(error，stat);</div><div class="line">    });</div><div class="line">  },</div><div class="line">  <span class="function"><span class="keyword">function</span><span class="params">(callback)</span> </span>{</div><div class="line">    async.map(paths，fs.stat，callback);</div><div class="line">  }</div><div class="line">]，<span class="function"><span class="keyword">function</span><span class="params">(error，results)</span> </span>{</div><div class="line">  <span class="keyword">var</span> stats = [results[<span class="number">0</span>]].concat(results[<span class="number">1</span>]);</div><div class="line">  <span class="comment">// use the stats</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>好了，这样就达到要求了: 每个文件只读取一次，所有的工作都是并行处理的，我们也可以独立的访问第一个文件的结果，并且相互依赖的任务都是尽早执行完毕的。搞定!</p>
<p>其实，并不能说完全搞定了。我认为这样的代码真的很丑陋，并且当问题变的复杂的时候，这样的代码很难扩展。为了让它正常工作，我们需要考虑大量的代码执行顺序问题。 而且设计意图并不明显以至于后面的维护很可能会不经意把它破坏掉。当我们引入了一个特殊需求后，原本问题的解决策略被迫同一些后续的跟进操作混杂在一起，并且我们还要对数组作出那么恶心的操作。</p>
<p>所有的问题其实都来自于我们尝试通过控制程序流来作为主要的解决问题的手段，而不是依赖于数据之间的关系。不是说 “为了能够运行这个任务，我需要这个数据”，并让运行环境去寻找优化手段，而是显式声明运行时什么应该并行，什么应该串行，所以导致我们的解决方案是如此脆弱.</p>
<p>那么，promises 如何改善这种情况呢? 我们需要一些操作文件系统的函数是可以返回 promises 而不是接收一个回调函数的。但是与其手写一个这样的函数，我们可以用元编程的方式写一个函数，使得它可以转换任何其它函数返回 promises。比如说，它可以接收如下一个函数定义为</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">String</span> -&gt; (<span class="type">Error</span> -&gt; <span class="type">Stat</span> -&gt; ()) -&gt; ()</div></pre></td></tr></table></figure>

<p>并且返回以下类型</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">String</span> -&gt; <span class="type">Promise</span> <span class="type">Stat</span></div></pre></td></tr></table></figure>

<p>下面就是这个元编程的函数:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// promisify :: (a -&gt; (Error -&gt; b -&gt; ()) -&gt; ()) -&gt; (a -&gt; Promise b)</span></div><div class="line"><span class="keyword">var</span> promisify = <span class="function"><span class="keyword">function</span><span class="params">(fn，receiver)</span> </span>{</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> slice   = <span class="built_in">Array</span>.prototype.slice,</div><div class="line">        args    = slice.call(<span class="built_in">arguments</span>，<span class="number">0</span>，fn.length - <span class="number">1</span>),</div><div class="line">        promise = <span class="keyword">new</span> Promise();</div><div class="line"></div><div class="line">    args.push(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">var</span> results = slice.call(<span class="built_in">arguments</span>),</div><div class="line">          error   = results.shift();</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (error) promise.reject(error);</div><div class="line">      <span class="keyword">else</span> promise.resolve.apply(promise，results);</div><div class="line">    });</div><div class="line"></div><div class="line">    fn.apply(receiver，args);</div><div class="line">    <span class="keyword">return</span> promise;</div><div class="line">  };</div><div class="line">};</div></pre></td></tr></table></figure>

<p>(这还不是一个通用方案，但是足够在我们的场景里使用了.)</p>
<p>我们现在可以重新对我们的业务问题建模。我们基本上要做的就把一个列表的文件路径，转换为一个列表的文件状态 promises:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs_stat = promisify(fs.stat);</div><div class="line"></div><div class="line"><span class="keyword">var</span> paths = [<span class="string">'file1.txt'</span>，<span class="string">'file2.txt'</span>，<span class="string">'file3.txt'</span>];</div><div class="line"></div><div class="line"><span class="comment">// [String] -&gt; [Promise Stat]</span></div><div class="line"><span class="keyword">var</span> statsPromises = paths.map(fs_stat);</div></pre></td></tr></table></figure>

<p>从这里就可以看出分别了: 通过使用 async.map() ， 你必须等到整个列表处理完了，你才能拿到数据进行处理。但是如果你有了一个列表的 promises，你可以直接拿第一个 promise 来操作:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">statsPromises[<span class="number">0</span>].then(<span class="function"><span class="keyword">function</span><span class="params">(stat)</span> </span>{ <span class="comment">/* use stat.size */</span> });</div></pre></td></tr></table></figure>

<p>所以，通过使用 promise，我们把大部分问题都解决了: 我们并行得到所有文件的状态，并且可以独立访问并不止第一个文件，可以是任何一个文件，而这只需要指定某个数组位就可以了。通过前一种方法，我们需要显式写逻辑特殊处理第一个文件，而且考虑怎么拿到那个文件还非常费事。但是，通过一个列表的 promises 就很容易了.</p>
<p>当然，这里缺少的部分是当所有的文件状态信息都拿到后，我们应该怎么处理。通过前面，我们得到了一个列表的 文件状态值对象，但这是一个列表的 promises。我们需要等到所有的 promises 都处理完后，拿到一个列表的文件状态。也就是说，我们要把一个列表的 promises 转化成一个 promise 对应于整个列表.</p>
<p>让我们看看一个简单的 list 方法是怎么做到可以把一个包含了 promises 的列表转化成一个 promise，而且当它里面所有的 promises 都处理完后，它自己也处理了.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// list :: [Promise a] -&gt; Promise [a]</span></div><div class="line"><span class="keyword">var</span> list = <span class="function"><span class="keyword">function</span><span class="params">(promises)</span> </span>{</div><div class="line">  <span class="keyword">var</span> listPromise = <span class="keyword">new</span> Promise();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> listPromise) promises[k] = listPromise[k];</div><div class="line"></div><div class="line">  <span class="keyword">var</span> results = []，done = <span class="number">0</span>;</div><div class="line"></div><div class="line">  promises.forEach(<span class="function"><span class="keyword">function</span><span class="params">(promise，i)</span> </span>{</div><div class="line">    promise.then(<span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>{</div><div class="line">      results[i] = result;</div><div class="line">      done += <span class="number">1</span>;</div><div class="line">      <span class="keyword">if</span> (done === promises.length) promises.resolve(results);</div><div class="line">    }，<span class="function"><span class="keyword">function</span><span class="params">(error)</span> </span>{</div><div class="line">      promises.reject(error);</div><div class="line">    });</div><div class="line">  });</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (promises.length === <span class="number">0</span>) promises.resolve(results);</div><div class="line">  <span class="keyword">return</span> promises;</div><div class="line">};</div></pre></td></tr></table></figure>

<p><em>(译者注：这里感觉好像 promises 和 listPromise 几个地方反了。作者没开评论，无法确认，不过有时间试一下代码就知道了。)</em></p>
<p>(这个方法其实和 jQuery.when() 函数类似，它同样接收一个列表的 promises 并返回一个新的 promise。当这个 promise 所有的输入都处理完后，它自己也处理了.)</p>
<p>我们现在就可以通过把数组包装成一个 promise，然后等所有的处理结果出来就可以了:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list(statsPromises).then(<span class="function"><span class="keyword">function</span><span class="params">(stats)</span> </span>{ <span class="comment">/* use the stats */</span> });</div></pre></td></tr></table></figure>

<p>那么我们完整的解决方案就会是这样:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs_stat = promisify(fs.stat);</div><div class="line"></div><div class="line"><span class="keyword">var</span> paths = [<span class="string">'file1.txt'</span>，<span class="string">'file2.txt'</span>，<span class="string">'file3.txt'</span>],</div><div class="line">    statsPromises = list(paths.map(fs_stat));</div><div class="line"></div><div class="line">statsPromises[<span class="number">0</span>].then(<span class="function"><span class="keyword">function</span><span class="params">(stat)</span> </span>{</div><div class="line">  <span class="comment">// use stat.size</span></div><div class="line">});</div><div class="line"></div><div class="line">statsPromises.then(<span class="function"><span class="keyword">function</span><span class="params">(stats)</span> </span>{</div><div class="line">  <span class="comment">// use the stats</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>这个解决方案的表达就相当的简洁清晰了。通过一些通用的辅助函数和既有的数组操作函数，我们用一种正确的，有效并且容易调整的方法来实现了。我们也不需要 async 模块的特殊集合类函数，我们只需要让 promises和数组两者的思想相互独立，并通过一种强大的方式把它们组合使用就可以了.</p>
<p>特别要注意的是，我们的程序在这里并没有说任何部分是应该是并行还是串行处理的。我们只是描述了我们想要什么，任务之间的关系是怎么样的，剩下的都是 promise 组件帮我们优化的.</p>
<p>事实上，很多在 async 的集合类模块可以很容易用一个列表的 promises 来替代。我们已经看到过 map 是怎么工作的了; 下面的代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">async.map(inputs，fn，<span class="function"><span class="keyword">function</span><span class="params">(error，results)</span> </span>{});</div></pre></td></tr></table></figure>

<p>和下面的是一样的:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">list(inputs.map(promisify(fn))).then(</div><div class="line">    <span class="function"><span class="keyword">function</span><span class="params">(results)</span> </span>{},</div><div class="line">    <span class="function"><span class="keyword">function</span><span class="params">(error)</span> </span>{}</div><div class="line">);</div></pre></td></tr></table></figure>

<p>async.each() 其实就是用 async.map()，然后利用那些被执行的函数的副作用，而把它们的返回值舍弃掉; 你用 map() 就可以了.</p>
<p>async.mapSeries() (如前所述，async.eachSeries()) 其实就是对一个列表的 promises 上调用 reduce()。那就是，它你的输入列表，使用 reduce 来得到一个依赖于前面 promise 的操作成功后再执行的 promise。我们来举个例子: 实现一个基于 fs.rmdir() 的程序来实现和 rm -rf 相同的功能。下面的代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dirs = [<span class="string">'a/b/c'</span>，<span class="string">'a/b'</span>，<span class="string">'a'</span>];</div><div class="line">async.mapSeries(dirs，fs.rmdir，<span class="function"><span class="keyword">function</span><span class="params">(error)</span> </span>{});</div></pre></td></tr></table></figure>

<p>和下面的是一样的:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dirs     = [<span class="string">'a/b/c'</span>，<span class="string">'a/b'</span>，<span class="string">'a'</span>],</div><div class="line">    fs_rmdir = promisify(fs.rmdir);</div><div class="line"></div><div class="line"><span class="keyword">var</span> rm_rf = dirs.reduce(<span class="function"><span class="keyword">function</span><span class="params">(promise，path)</span> </span>{</div><div class="line">  <span class="keyword">return</span> promise.then(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="keyword">return</span> fs_rmdir(path) });</div><div class="line">}，unit());</div><div class="line"></div><div class="line">rm_rf.then(</div><div class="line">    <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{},</div><div class="line">    <span class="function"><span class="keyword">function</span><span class="params">(error)</span> </span>{}</div><div class="line">);</div></pre></td></tr></table></figure>

<p>这里的 unit() 只是一个简单的返回一个已经处理的 promise 来开始整个操作链 (如果你知道什么是 monads，这个就是 promises 的返回函数):</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// unit :: a -&gt; Promise a</span></div><div class="line"><span class="keyword">var</span> unit = <span class="function"><span class="keyword">function</span><span class="params">(a)</span> </span>{</div><div class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> Promise();</div><div class="line">  promise.resolve(a);</div><div class="line">  <span class="keyword">return</span> promise;</div><div class="line">};</div></pre></td></tr></table></figure>

<p>这个使用 reduce() 的方案简单的使用接收列表中的两个路径值，并使用 promise.then() 来确保前面的文件夹删除成功之后，再删除后面的文件夹。这其实还帮你处理了非空文件夹的情况: 如果前面的 promise 因为任何错误而无法处理，那么整个处理流程就停止了。使用值的依赖关系来强制某种执行顺序是函数式编程使用 monads 来处理副作用的核心思想.</p>
<p>最后的代码似乎比同样功能的 async 代码更啰嗦，但别因为这样蒙骗了你。最重要的思想是我们通过使用 promise 数值和列表操作来组合程序，而不是依赖于特别的库来控制程序流。正如我们前面看到的，前一种方式可以写出更容易理解的程序.</p>
<p>前一种程序更容易理解是因为我们把我们思考流程的一部分交给机器去做了。当使用 async 模块的时候，我们的思考流程是这样的:</p>
<p>A. 在程序里，我们的任务应该是这样相互依赖的,<br>B. 因此，应该要这样把操作组织好,<br>C. 那么，我们现在用代码来表现 B 所描述的流程.  </p>
<p>利用相互依赖的 promises 可以让你完全把 B 那步抛弃掉。你的代码只需要表达出任务的相互关系就可以了，然后让电脑来决定处理流程。换另一个说法就是，回调风格是显式的控制处理流程来把很多值组织在一起，而 promises 是显式表达出值的关系来把控制流的各个组件连接在一起。回调是指令式的，promises 是函数式的.</p>
<p>这个主题的讨论只有当我们谈到 promises 的最后一个使用场景，也就是函数式编程的核心思想，延时性，才算完整。Haskell 是一种惰性语言。它和那些从上往下执行的脚本程序不一样，它是从定义了程序最终输出的表达式开始的 – 有什么需要写到标准输出，数据库等，然后反回来向前执行。它首先看最终的表达式是依赖哪些表达式来取得它们的输入值的，然后一直往前遍历整棵树图，直到整个程序为了它的输出结果反过来计算出所需的所有数据为止。只有需要用到的数据才会在程序里计算出来.</p>
<p>很多时候，计算机领域的问题，最后找到的最佳解决方案都是需要找到最佳的数据结构来建模而得出来的。JavaScript 里有一个跟我刚才描述的情况非常相似的问题: 模块加载。你只想加载那些你的程序需要用到的模块，并且希望越快越好.</p>
<p>在我们有 CommonJS 和 AMD 这类有了依赖关系意识的规范前，我们有好一些脚本加载库。它们基本的工作原理都是像我们上面的例子一样，通过显式向加载器声明你要加载的脚本哪些是可以并行下载的，哪些是一定要按某种顺序下载。你基本上都要说清楚下载的策略，要正确并有效的做好的是相当困难的。相反，通过描述脚本之间的依赖关系来让加载器优化下载策略就会容易很多.</p>
<p>现在让我们来看看怎么实现 LazyPromise 的。这是一个 Promise，包含了一个可能会做异步操作的函数。这个函数只有在被调用 then() 这个方法的时候会被执行一次: 我们只有在有需要得到返回结果的时候才会开始执行。我们通过重写 then() 来判断一下如果还没有开始过的话就执行操作.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Promise = <span class="built_in">require</span>(<span class="string">'rsvp'</span>).Promise,</div><div class="line">    util    = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> LazyPromise = <span class="function"><span class="keyword">function</span><span class="params">(factory)</span> </span>{</div><div class="line">  <span class="keyword">this</span>._factory = factory;</div><div class="line">  <span class="keyword">this</span>._started = <span class="literal">false</span>;</div><div class="line">};</div><div class="line">util.inherits(LazyPromise，Promise);</div><div class="line"></div><div class="line">LazyPromise.prototype.then = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>._started) {</div><div class="line">    <span class="keyword">this</span>._started = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>._factory(<span class="function"><span class="keyword">function</span><span class="params">(error，result)</span> </span>{</div><div class="line">      <span class="keyword">if</span> (error) self.reject(error);</div><div class="line">      <span class="keyword">else</span> self.resolve(result);</div><div class="line">    });</div><div class="line">  }</div><div class="line">  <span class="keyword">return</span> Promise.prototype.then.apply(<span class="keyword">this</span>，<span class="built_in">arguments</span>);</div><div class="line">};</div></pre></td></tr></table></figure>

<p>比如说，下面这个程序什么也不会做: 因为我们没有向 promise 取值，没有需要执行任何操作:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> delayed = <span class="keyword">new</span> LazyPromise(<span class="function"><span class="keyword">function</span><span class="params">(callback)</span> </span>{</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Started'</span>);</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Done'</span>);</div><div class="line">    callback(<span class="literal">null</span>，<span class="number">42</span>);</div><div class="line">  }，<span class="number">1000</span>);</div><div class="line">});</div></pre></td></tr></table></figure>

<p>但是如果我们添加了下面这一行代码，那么程序就会打印出 Started，然后一秒后再打印出Done，最后打印出42:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delayed.then(<span class="built_in">console</span>.log);</div></pre></td></tr></table></figure>

<p>因为中间的异步操作是只处理一次的，所以调用 then() 多次会打印最终结果多次，但不会每次再执行异步操作:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">delayed.then(<span class="built_in">console</span>.log);</div><div class="line">delayed.then(<span class="built_in">console</span>.log);</div><div class="line">delayed.then(<span class="built_in">console</span>.log);</div><div class="line"></div><div class="line"><span class="comment">// prints:</span></div><div class="line"><span class="comment">// Started</span></div><div class="line"><span class="comment">// -- 1 second delay --</span></div><div class="line"><span class="comment">// Done</span></div><div class="line"><span class="comment">// 42</span></div><div class="line"><span class="comment">// 42</span></div><div class="line"><span class="comment">// 42</span></div></pre></td></tr></table></figure>

<p>通过把以上简单的通用操作抽象出来，我们很容易就可以打造一个模块优化系统。想象一下我们要把一系列的模块这样处理一下: 每一个模块创建时都绑定了一个名字，一个它依赖的模块列表，和一个构造函数。这个构造函数会在执行时被传入所依赖的模块作为参数，然后返回本身这个模块的 API。这其实和 AMD 工作模式类似.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> A = <span class="keyword">new</span> Module(<span class="string">'A'</span>，[]，<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    logBase: <span class="function"><span class="keyword">function</span><span class="params">(x，y)</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.log(x) / <span class="built_in">Math</span>.log(y);</div><div class="line">    }</div><div class="line">  };</div><div class="line">});</div><div class="line"></div><div class="line"><span class="keyword">var</span> B = <span class="keyword">new</span> Module(<span class="string">'B'</span>，[A]，<span class="function"><span class="keyword">function</span><span class="params">(a)</span> </span>{</div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    doMath: <span class="function"><span class="keyword">function</span><span class="params">(x，y)</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'B result is: '</span> + a.logBase(x，y);</div><div class="line">    }</div><div class="line">  };</div><div class="line">});</div><div class="line"></div><div class="line"><span class="keyword">var</span> C = <span class="keyword">new</span> Module(<span class="string">'C'</span>，[A]，<span class="function"><span class="keyword">function</span><span class="params">(a)</span> </span>{</div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    doMath: <span class="function"><span class="keyword">function</span><span class="params">(x，y)</span> </span>{</div><div class="line">      <span class="keyword">return</span> <span class="string">'C result is: '</span> + a.logBase(y，x);</div><div class="line">    }</div><div class="line">  };</div><div class="line">});</div><div class="line"></div><div class="line"><span class="keyword">var</span> D = <span class="keyword">new</span> Module(<span class="string">'D'</span>，[B，C]，<span class="function"><span class="keyword">function</span><span class="params">(b，c)</span> </span>{</div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    run: <span class="function"><span class="keyword">function</span><span class="params">(x，y)</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log(b.doMath(x，y));</div><div class="line">      <span class="built_in">console</span>.log(c.doMath(x，y));</div><div class="line">    }</div><div class="line">  };</div><div class="line">});</div></pre></td></tr></table></figure>

<p>现在我们有了一个钻石模型图: D 依赖于 B 和 C，而它们两个又依赖于 A。这就意味着我们可以加载 A，然后并行加载 B 和 C，当 B 和 C 都加载完后，我们就可以加载 D 了。但是，我们希望我们的工具可以帮我们计算出来，而不是我们自己来实现这个策略.</p>
<p>我们可以通过把模块建模为 LazyPromise 的子类后很容易的实现。它的构造函数可以通过使用前面的列表 promise 辅助函数来取得它的依赖模块，然后在某一个延时后创建这些依赖模块来模拟异步加载的延时效果.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> DELAY = <span class="number">1000</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Module = <span class="function"><span class="keyword">function</span><span class="params">(name，deps，factory)</span> </span>{</div><div class="line">  <span class="keyword">this</span>._factory = <span class="function"><span class="keyword">function</span><span class="params">(callback)</span> </span>{</div><div class="line">    list(deps).then(<span class="function"><span class="keyword">function</span><span class="params">(apis)</span> </span>{</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'-- module LOAD: '</span> + name);</div><div class="line">      setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'-- module done: '</span> + name);</div><div class="line">        <span class="keyword">var</span> api = factory.apply(<span class="keyword">this</span>，apis);</div><div class="line">        callback(<span class="literal">null</span>，api);</div><div class="line">      }，DELAY);</div><div class="line">    });</div><div class="line">  };</div><div class="line">};</div><div class="line">util.inherits(Module，LazyPromise);</div></pre></td></tr></table></figure>

<p>因为 Module 是一个 LazyPromise，单纯定义模块并不会加载任何东西回来。只有当我们需要开始使用的时候，加载才会执行:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">D.then(<span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>{ d.run(<span class="number">1000</span>，<span class="number">2</span>) });</div><div class="line"></div><div class="line"><span class="comment">// prints:</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// -- module LOAD: A</span></div><div class="line"><span class="comment">// -- module done: A</span></div><div class="line"><span class="comment">// -- module LOAD: B</span></div><div class="line"><span class="comment">// -- module LOAD: C</span></div><div class="line"><span class="comment">// -- module done: B</span></div><div class="line"><span class="comment">// -- module done: C</span></div><div class="line"><span class="comment">// -- module LOAD: D</span></div><div class="line"><span class="comment">// -- module done: D</span></div><div class="line"><span class="comment">// B result is: 9.965784284662087</span></div><div class="line"><span class="comment">// C result is: 0.10034333188799373</span></div></pre></td></tr></table></figure>

<p>正如你所见到的，A 首先加载，当它完成后 B 和 C 开始同时下载，然后当它们都加载完后  D 开始加载，正如我们想要的那样。如果你只是执行 C.then(function() {})，你可以看到只有 A 和 C 加载; 关系图里没需要用到的是没有加载的.</p>
<p>所以，基本上不需要太多代码，只需要定义好懒 promises 的关系图，我们就实现了一个正确的模块加载器。我们使用的是函数式编程里面的定义值的依赖关系这种方式，而不是显式控制程序执行顺序的方式来解决问题，并且这种方式比起自己控制执行流程更加容易。你可以给出任何非循环依赖关系图来让这个模块加载库帮你优化执行顺序.</p>
<p>这才是 promises 的真正强大之处。它们并不仅仅从语法层面减少代码嵌套。它们让你再更高的层面来为你的问题抽象建模，和让你的工具帮你做更多的工作。事实上，那应该是我们必须向我们的软件提出的要求。如果 Node 真的希望把并行编程更容易的话，它们应该重新考虑一下 promises.</p>
]]></content>
    
    
      <category term="Javascript" scheme="http://www.thinkingincrowd.me/tags/Javascript/"/>
    
      <category term="Promise" scheme="http://www.thinkingincrowd.me/tags/Promise/"/>
    
      <category term="Callback" scheme="http://www.thinkingincrowd.me/tags/Callback/"/>
    
      <category term="Functional Programming" scheme="http://www.thinkingincrowd.me/tags/Functional-Programming/"/>
    
      <category term="NodeJS" scheme="http://www.thinkingincrowd.me/tags/NodeJS/"/>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Thanks to everyone, Zach Lendon, Github, AngularJS]]></title>
    <link href="http://www.thinkingincrowd.me/2013/09/24/thanks-to-everyone-zach-lendon-github-angularjs/"/>
    <id>http://www.thinkingincrowd.me/2013/09/24/thanks-to-everyone-zach-lendon-github-angularjs/</id>
    <published>2013-09-23T22:24:00.000Z</published>
    <updated>2015-05-20T15:09:56.000Z</updated>
    <content type="html"><![CDATA[<p>Today I just wander around Google Analytics to check my blog’s visits count.  I am so pleased to find that the visit counts keeps increasing.  Below are some figures:  </p>
<ol>
<li>Total Visits <strong>616</strong>  </li>
<li>Unique Visitors: <strong>555</strong>  </li>
<li>Pageviews: <strong>793</strong>  </li>
<li>Pages / visit: <strong>1.29</strong>  </li>
<li>% New Visits: <strong>88.31%</strong>  </li>
</ol>
<p>Thanks to everyone who visited my blogs and made all those suggestive comments, such as Da.  I will strive to write more valuable articles to keep my knowledge and help others.  Hopefully, the return visits can grow more.  </p>
<p>I happened to found that This particular <a href="http://www.thinkingincrowd.me/blog/2013/06/08/how-to-verify-json-data-with-angularjs-httpbackend/" target="_blank" rel="external">article</a> about <a href="http://angularjs.org" target="_blank" rel="external">AngularJS</a> <a href="http://docs.angularjs.org/api/ngMock.$httpBackend" target="_blank" rel="external">$httpBackend</a> brought me <strong>215</strong> visits.  I think that should be due to a patch I submitted to AngularJS in <a href="https://github.com" target="_blank" rel="external">Github</a>.  How valuable for that patch!!  I will try to contribute more to the opensource.  </p>
<p>Personally, I need to thank Zach Lendon who has referred my blog in his article about <a href="http://zachlendon.github.io/blog/2013/04/02/updated-extjs4-mock-ajax-library-for-jasmine/" target="_blank" rel="external">ExtJS4 Ajax testing</a>.  His referral brought me <strong>8</strong> visits.  I originally want to thank him in his blog but there is no comments enabled there.  So here gives my sincere thanks too.  </p>
<p>Do not ask but give.  You will earn more.  Thanks guys.</p>
]]></content>
    
    
      <category term="ExtJs" scheme="http://www.thinkingincrowd.me/tags/ExtJs/"/>
    
      <category term="Jasmine" scheme="http://www.thinkingincrowd.me/tags/Jasmine/"/>
    
      <category term="Javascript" scheme="http://www.thinkingincrowd.me/tags/Javascript/"/>
    
      <category term="UnitTest" scheme="http://www.thinkingincrowd.me/tags/UnitTest/"/>
    
      <category term="Ajax" scheme="http://www.thinkingincrowd.me/tags/Ajax/"/>
    
      <category term="Mock" scheme="http://www.thinkingincrowd.me/tags/Mock/"/>
    
      <category term="AngularJS" scheme="http://www.thinkingincrowd.me/tags/AngularJS/"/>
    
      <category term="HttpBackend" scheme="http://www.thinkingincrowd.me/tags/HttpBackend/"/>
    
      <category term="JSON" scheme="http://www.thinkingincrowd.me/tags/JSON/"/>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
  </entry>
  
</feed>
