<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Thinking in Crowd / 鹄思乱想]]></title>
  <subtitle><![CDATA[Swan flying in the immense sky]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.thinkingincrowd.me/"/>
  <updated>2016-07-09T23:53:37.682Z</updated>
  <id>http://www.thinkingincrowd.me/</id>
  
  <author>
    <name><![CDATA[鹄思乱想]]></name>
    <email><![CDATA[chengusky@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[人生中哪一个阶段才是最重要的？]]></title>
    <link href="http://www.thinkingincrowd.me/2016/07/10/Milestones-in-Life/"/>
    <id>http://www.thinkingincrowd.me/2016/07/10/Milestones-in-Life/</id>
    <published>2016-07-10T00:00:00.000Z</published>
    <updated>2016-07-09T23:52:59.000Z</updated>
    <content type="html"><![CDATA[<p>我们的人生其实分了很多个阶段：幼儿园，小学，中学，大学，工作，结婚，升级打小怪物等。  </p>
<p>这些阶段，很多都是世俗的约定，到了某个年龄，就自然要踏入另一个阶段了。在你成为“成年人”以前，大学前的几个阶段，基本都是由父母决定的，自己选择和决定空间不大。不少人在前面的阶段感觉被迫接受父母的安排，大学就报一些离家远远的学校，打算充分享受自由。大学后面的阶段，即便也会有人对你做各种干涉，但毕竟你已经是“成年人”，自主决定权就大很多了。</p>
<p>那哪个阶段是最重要的呢？已为人父的我，当然也想知道。但是，你们真的相信会有统一的答案吗？其实谁都没法说清楚，最重要的，起决定性作用的是哪个阶段。我承认我标题党了。不少人，大学前是学霸，但是上了大学就歇菜了。相反，也有不少人读书时期经常打游戏，考前报佛脚，分数也是及格线多点，甚至要重修。但是，工作后如鱼得水，成了人生赢家。还有一些小时候坏事做尽，甚至曾经承受牢狱之灾，但是后来却能突然大彻大悟，痛改前非，出人头地。</p>
<p>人的一生，前面的每一个阶段都是后面的积累。后面的主要是延续，但也有可能蜕变。至于怎么延续怎么变，起决定作用的，还是自己的心。心之所向，路之所往。只有自己主动地把握人生，自己把的舵，才知道下一阶段走的有没有意义。<strong>每一个阶段，尤其是你主动把握的阶段，都是重要的</strong>。正如 Steve Jobs 所说：</p>
<blockquote>
<p>You cann’t connect the dots looking forward; you can only connect them looking backwards.</p>
</blockquote>
<p>大学毕业 12 年了。前面的 7 年，因为感恩和战友情，我宁可收入少点，还是坚持在一家小公司拼搏，并收获了敏捷的做事方式和较为广阔的技术背景。后面因为技术方向调整和深入的需要，还是决定去大公司体会一下。5 年后的今天，我又决定要为了一个男人和事业理想，远飘北方，“抛妻弃子”，承受背井离乡之苦。</p>
<p>很多人觉得每次我选择的转变，都很突然，随性，而又坚决。其实，我的内心已经挣扎和拖沓了一段时间。很些人觉得我勇于挑战自己，跳出舒适区。其实，我觉得自己并没有很好地安排和规划人生。我觉得自己走的并不算好，可这就是人生。自己走的路，过去已经无法回头，最重要的是自己主动把握的下一个阶段。</p>
<p>我以前一直都期望能有一个好的导师，在迷茫的时候，稍微为我指明一下方向，引领我前行。人常说，去一个好的公司，不如找到一个好的领导。可是后来我才慢慢醒悟，导师只是在你人生道路上的某一段，在某个特定的时刻，出现并帮助你那么一下的人。伴随一生的导师，可遇而不可求。而且最重要是，只有你已经在路上探索了，才有可能碰到导师。甚至，你还必须主动去找那些能成为你导师的人。所以，自己永远是自己最好的导师，最终只有靠不断地读书思考和虚心求教，跟随自己的直觉和信念，不断尝试和碰壁，不断寻求真正属于自己的道路。</p>
<p>我很喜欢李笑来的<strong>七年就是一辈子</strong>的文章和书（后来改名叫<strong>新生</strong>了），以及他说的一句话：“<strong>我的一生只有一个职业 — 学生</strong>”。</p>
<p>新的旅程已经摆在我眼前，我知道我必须要选择经历这一次历练。在这里要特别感谢老婆和家人的支持。没有他们，我没法踏出这一步。虽然我也不知道能在这个阶段历练多久，但哪怕短短一两年，它也是我一生中很重要的一个点。</p>
]]></content>
    
    
      <category term="Milestone" scheme="http://www.thinkingincrowd.me/tags/Milestone/"/>
    
      <category term="Change" scheme="http://www.thinkingincrowd.me/tags/Change/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Prototype chain, and relationship among prototype, __proto__ and constructor in JavaScript]]></title>
    <link href="http://www.thinkingincrowd.me/2016/06/09/prototype-chain-and-relationship-among-prototype-proto-and-constructor-in-JavaScript/"/>
    <id>http://www.thinkingincrowd.me/2016/06/09/prototype-chain-and-relationship-among-prototype-proto-and-constructor-in-JavaScript/</id>
    <published>2016-06-09T02:16:25.000Z</published>
    <updated>2016-06-10T14:26:31.000Z</updated>
    <content type="html"><![CDATA[<p>As we know, JavaScript differs from other class based inheritance language.  Constructor (function) uses its <code>prototype</code> property to implement <strong>prototype-based inheritance</strong> and <strong>shared property</strong>.  </p>
<p>From ECMA Spec:</p>
<blockquote>
<p>In a class-based object-oriented language, in general, state is carried by instances, methods are carried by classes, and inheritance is only of structure and behaviour. In ECMAScript, the state and methods are carried by objects, while structure, behaviour, and state are all inherited.</p>
</blockquote>
<p>Let’s see below example.  Instances created by <code>new Mold()</code> inherits the property from its prototype.  You can see different behaviors if we change different property in different levels.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mold</span><span class="params">()</span> </span>{</div><div class="line">}  </div><div class="line"></div><div class="line">Mold.prototype.sizes = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</div><div class="line">Mold.prototype.brand = <span class="string">'KC'</span>;  </div><div class="line"></div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> Mold();</div><div class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> Mold();  </div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(instance.sizes)   <span class="comment">// =&gt; [10, 20, 30];</span></div><div class="line"><span class="built_in">console</span>.log(instance2.brand) <span class="comment">// =&gt; 'KC';  </span></div><div class="line"></div><div class="line"><span class="comment">// Adds property with same name shadows the one in prototype</span></div><div class="line">instance.brand = <span class="string">'K & W'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(instance.brand); <span class="comment">// =&gt; 'K & W'</span></div><div class="line"><span class="built_in">console</span>.log(Mold.prototype.brand); <span class="comment">// =&gt; 'KC'</span></div><div class="line"></div><div class="line"><span class="comment">// Changed on prototype affects instance that doesn't have property with same name</span></div><div class="line">Mold.prototype.brand = <span class="string">'K & W & L'</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(instance.brand); <span class="comment">// =&gt; 'K & W'</span></div><div class="line"><span class="built_in">console</span>.log(instance2.brand); <span class="comment">// =&gt; 'K & W & L'</span></div><div class="line"></div><div class="line"><span class="comment">// Changed on property which is Array or Object type in prototoype affects all</span></div><div class="line">instance.sizes[<span class="number">0</span>] = <span class="number">40</span>;</div><div class="line">Mold.prototype.sizes[<span class="number">2</span>] = <span class="number">60</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Mold.prototype.sizes); <span class="comment">// =&gt; [40, 20, 60]</span></div><div class="line"><span class="built_in">console</span>.log(instance2.sizes) <span class="comment">// =&gt; [40, 20, 60]</span></div></pre></td></tr></table></figure>

<p>I think most of the JSer know the concept &amp; behavior above.  However, do you know the relationship between <code>__proto__</code>, <code>prototype</code> and <code>constructor</code>?  </p>
<p>Here is what the ECMAScript Spec said.</p>
<p><strong>What is prototype chain</strong>:</p>
<blockquote>
<p>Every object created by a constructor has an implicit reference (called the object’s prototype) to the value of its constructor’s “prototype” property. Furthermore, a prototype may have a non-null implicit reference to its prototype, and so on; this is called the prototype chain. When a reference is made to a property in an object, that reference is to the property of that name in the first object in the prototype chain that contains a property of that name. In other words, first the object mentioned directly is examined for such a property; if that object contains the named property, that is the property to which the reference refers; if that object does not contain the named property, the prototype for that object is examined next; and so on.</p>
</blockquote>
<p><strong>Explanation on Object and Function prototype object</strong>:</p>
<blockquote>
<p>The Object prototype object is the intrinsic object %ObjectPrototype%. The Object prototype object is an ordinary object.</p>
<p>The value of the [[Prototype]] internal slot of the Object prototype object is null</p>
<p>…</p>
<p>The Function prototype object is the intrinsic object %FunctionPrototype%. The Function prototype object is itself a built-in function object. When invoked, it accepts any arguments and returns undefined. It does not have a [[Construct]] internal method so it is not a constructor.</p>
<p>NOTE The Function prototype object is specified to be a function object to ensure compatibility with ECMAScript code that was created prior to the ECMAScript 2015 specification.</p>
<p>The value of the [[Prototype]] internal slot of the Function prototype object is the intrinsic object %ObjectPrototype% (19.1.3).</p>
<p>The Function prototype object does not have a prototype property.<br>The value of the length property of the Function prototype object is 0.<br>The value of the name property of the Function prototype object is the empty String</p>
</blockquote>
<p>Honestly, for me, it took me a long long time to try to understand that.  I have extract some important concepts here and try to be brief:  </p>
<ol>
<li>Function instances that can be used as a constructor have a <code>prototype</code> property.  When we use <code>new</code> with this function to create instances, the object pointed by the <code>prototype</code> property will be assigned as the prototype of the instances.  </li>
<li><code>__proto__</code> is the actual object that is used in the property lookup chain.  All objects have this property.  </li>
<li><code>constructor</code> is a function object that creates and initializes objects.  It’s a property in the Prototype Object;</li>
</ol>
<p>Maybe the wording is still not as expressive as the graph as below.  </p>
<p><img alt="Firefox script not responsive warning" src="http://thinkingincrowd.u.qiniudn.com/JS_prototype_chain.png"></p>
<p>At first glance, this diagram might seems messy.  Let’s examine it piece by piece from the easiest part and pay attention to some important points.  </p>
<ol>
<li><code>prototype</code> property doesn’t exists in instances created by Mold.  Only function has.  </li>
<li>Each function’s prototype has a <code>constructor</code> property points to itself.  </li>
<li><code>__proto__</code> points to the <code>prototype</code> of its constructor.  The <code>Mold</code> instance points to <code>Mold</code> function, the <code>Mold</code> function points to <code>Function</code> function, the <code>Function</code> function points to itself and <code>Object</code> function points to <code>Function</code> function.  </li>
<li><code>prototype</code> property in Object doesn’t have <code>__proto__</code>.  </li>
<li><code>__proto__</code> of the Function prototype object is <code>Object.prototype</code>.</li>
</ol>
<p>Here is some script for you to understand it.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="keyword">typeof</span> instance instance.prototype <span class="comment">// =&gt; 'undefined'</span></div><div class="line"></div><div class="line"><span class="comment">// 2</span></div><div class="line">Mold.prototype.constructor === Mold</div><div class="line"><span class="built_in">Function</span>.prototype.constructor === <span class="built_in">Function</span></div><div class="line"><span class="built_in">Object</span>.prototype.constructor === <span class="built_in">Object</span></div><div class="line"></div><div class="line"><span class="comment">// 3</span></div><div class="line">instance.__proto__ === Mold.prototype</div><div class="line">Mold.__proto__ === <span class="built_in">Function</span>.prototype</div><div class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype</div><div class="line"><span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype</div><div class="line"></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span></div><div class="line"></div><div class="line"><span class="comment">// 5</span></div><div class="line"><span class="built_in">Function</span>.prototype.__proto__  === <span class="built_in">Object</span>.prototype</div><div class="line">Mold.prototype.__proto__  === <span class="built_in">Object</span>.prototype</div></pre></td></tr></table></figure>

<p>How about take some exams to test see if you understand what I and ECMA spec said above?  :)  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype === ?</div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Function</span>.prototype.prototype === ?</div><div class="line"><span class="built_in">Function</span>.prototype.length === ?</div><div class="line"></div><div class="line">instance.constructor === ?</div><div class="line">instance.__proto__.constructor === ?</div><div class="line"></div><div class="line">Mold.constructor === ?</div><div class="line">Mold.__proto__.constructor === ?</div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="Javascript" scheme="http://www.thinkingincrowd.me/tags/Javascript/"/>
    
      <category term="Functional Programming" scheme="http://www.thinkingincrowd.me/tags/Functional-Programming/"/>
    
      <category term="Prototype Chain" scheme="http://www.thinkingincrowd.me/tags/Prototype-Chain/"/>
    
      <category term="Prototype" scheme="http://www.thinkingincrowd.me/tags/Prototype/"/>
    
      <category term="Inheritance" scheme="http://www.thinkingincrowd.me/tags/Inheritance/"/>
    
      <category term="Constructor" scheme="http://www.thinkingincrowd.me/tags/Constructor/"/>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to avoid Stack overflow error on recursion]]></title>
    <link href="http://www.thinkingincrowd.me/2016/06/06/How-to-avoid-Stack-overflow-error-on-recursive/"/>
    <id>http://www.thinkingincrowd.me/2016/06/06/How-to-avoid-Stack-overflow-error-on-recursive/</id>
    <published>2016-06-05T16:05:00.000Z</published>
    <updated>2016-06-05T16:08:27.000Z</updated>
    <content type="html"><![CDATA[<h2 id="The_reason_behind">The reason behind</h2>
<p>Recursion is a powerful form of loop which repeats itself in similar form, but it should have terminal condition to prevent endless loop.  <a href="http://www.thinkingincrowd.me/2016/06/05/How-to-make-long-running-loop-breakable/" target="_blank" rel="external">Last time</a>, we even use it with the combination of <code>setTimeout</code> to prevent “Not responsive script” warning of long running loop.  </p>
<p>However, normal recursion can possibly generate “Stack overflow” error if it repeats itself too many times.  Let’s see a famous recursion example in math, <code>factorial</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span><span class="params">(n)</span> </span>{</div><div class="line">  <span class="keyword">return</span> n === <span class="number">0</span> ? <span class="number">1</span> : n * factorial(n - <span class="number">1</span>);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// factorial(10)</span></div><div class="line"><span class="comment">//  =&gt; 3628800</span></div><div class="line"><span class="comment">// factorial(32768)</span></div><div class="line"><span class="comment">//  =&gt; Uncaught RangeError: Maximum call stack size exceeded</span></div></pre></td></tr></table></figure>

<p>How does the stack looks like?  Why is its size exceeded?  </p>
<p><img alt="Firefox script not responsive warning" src="http://thinkingincrowd.u.qiniudn.com/factorial_stack_change_flow.png"></p>
<p>Here introduces a term called <a href="http://dmitrysoshnikov.com/ecmascript/chapter-1-execution-contexts/" target="_blank" rel="external">Execution Context</a> and you can read more following the link.  Simply say, every times a function is called, an execution context is created.  Hence, they are stacked together and increase as the recursion goes deeper.  You can imagine the stack size of <code>factorial(32768)</code> given this from <code>factorial(3)</code>.</p>
<h2 id="Tail_call_elimination_comes_to_rescue">Tail call elimination comes to rescue</h2>
<blockquote>
<p><strong>Tail calls can be implemented without adding a new stack frame to the call stack.</strong> Most of the frame of the current procedure is not needed any more, and it can be replaced by the frame of the tail call, modified as appropriate (similar to overlay for processes, but for function calls). The program can then jump to the called subroutine. Producing such code instead of a standard call sequence is called tail call elimination.</p>
</blockquote>
<p><a href="https://en.wikipedia.org/wiki/Tail_call" target="_blank" rel="external">Tail call elimination</a> can be applied if we rewritten <code>factorial</code> in <strong>tail recursion</strong> style as below.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span><span class="params">(n)</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cal</span><span class="params">(n, result)</span> </span>{</div><div class="line">    <span class="keyword">return</span> n === <span class="number">0</span> ? result : cal(n - <span class="number">1</span>, n * result);</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">return</span> cal(n, <span class="number">1</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>However, the tail call optimization can only be supported until ECMAScript 6, which is not yet available in many JS engines.  <em>(Notes: Looks like Firefox already supports and it’s gonna be <a href="https://github.com/v8/v8/commit/6131ab1edd6e78be01ac90b8f0b0f4f27f308071" target="_blank" rel="external">ready in Node.js V8</a> soon.)</em></p>
<h2 id="Trampoline">Trampoline</h2>
<p>What is <a href="https://en.wikipedia.org/wiki/Trampoline_(computing)" target="_blank" rel="external">Trampoline</a>?</p>
<blockquote>
<p>a trampoline is a <strong>loop</strong> that iteratively invokes <strong>thunk</strong>-returning functions (continuation-passing style).<br>  …<br>  Programmers can use trampolined functions to implement tail-recursive function calls in stack-oriented programming languages.</p>
</blockquote>
<p>The simpliest form of trampoline is like below.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trampoline</span><span class="params">(fn)</span> </span>{</div><div class="line">  <span class="keyword">var</span> op = fn;</div><div class="line">  <span class="keyword">while</span> (op != <span class="literal">null</span> && <span class="keyword">typeof</span> op === <span class="string">'function'</span>) {</div><div class="line">    op = op();</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>The <code>op</code> is a thunk-returning function.  If the execution result it returns is NOT a function anymore, then the loop stops.  It’s not so easy to understand the meaning of thunk from the definition in <a href="https://en.wikipedia.org/wiki/Thunk" target="_blank" rel="external">Wiki</a>.  But the explanation in <em>Functional programming</em> section is more clear.</p>
<blockquote>
<p>Functional programming languages have also allowed programmers to <strong>explicitly generate thunks</strong>. This is done in source code <strong>by wrapping an argument expression in an anonymous function that has no parameters of its own.</strong> This prevents the expression from being evaluated until a receiving function calls the anonymous function</p>
</blockquote>
<p>Hence, when we rewrite our <code>factorial</code> in below style, we can use the <code>trampoline</code> to replace the recursive call to even calculate factorial for 1000000.  <em>(Notes: As the simple version of trampoline detects function return for terminal condition, we have to rewrite the factorial to accept callback instead.)</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">thunkedFactorial</span><span class="params">(n, cb)</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cal</span><span class="params">(n, result, cb)</span> </span>{</div><div class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) {</div><div class="line">      cb(result);</div><div class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> cal.bind(<span class="keyword">this</span>, n - <span class="number">1</span>, n * result, cb);</div><div class="line">    };</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">return</span> cal.bind(<span class="keyword">this</span>, n, <span class="number">1</span>, cb);</div><div class="line">}</div><div class="line"></div><div class="line">trampoline(thunkedFactorial.bind(<span class="keyword">this</span>, <span class="number">1000000</span>, <span class="built_in">console</span>.log.bind(<span class="built_in">console</span>)));</div><div class="line"><span class="comment">// =&gt; Infinity</span></div></pre></td></tr></table></figure>

<h2 id="Other_thoughts?">Other thoughts?</h2>
<p>You may question that, since <code>trampoline</code> is actually a loop, it might cause the “Not responsive script” warning as well.  Yes, you are right.  That is why we can use the <code>setTimeout</code> trick again as well. :)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span><span class="params">(n, cb)</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cal</span><span class="params">(n, result)</span> </span>{</div><div class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) {</div><div class="line">      cb(result);</div><div class="line">    } <span class="keyword">else</span> {</div><div class="line">      setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{cal(n - <span class="number">1</span>, n * result)});</div><div class="line">    }</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">return</span> cal(n, <span class="number">1</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="Javascript" scheme="http://www.thinkingincrowd.me/tags/Javascript/"/>
    
      <category term="Functional Programming" scheme="http://www.thinkingincrowd.me/tags/Functional-Programming/"/>
    
      <category term="Loop" scheme="http://www.thinkingincrowd.me/tags/Loop/"/>
    
      <category term="Recursion" scheme="http://www.thinkingincrowd.me/tags/Recursion/"/>
    
      <category term="Tail Call Optimization" scheme="http://www.thinkingincrowd.me/tags/Tail-Call-Optimization/"/>
    
      <category term="Trampoline" scheme="http://www.thinkingincrowd.me/tags/Trampoline/"/>
    
      <category term="Thunk" scheme="http://www.thinkingincrowd.me/tags/Thunk/"/>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to make long running loop breakable?]]></title>
    <link href="http://www.thinkingincrowd.me/2016/06/05/How-to-make-long-running-loop-breakable/"/>
    <id>http://www.thinkingincrowd.me/2016/06/05/How-to-make-long-running-loop-breakable/</id>
    <published>2016-06-05T02:40:07.000Z</published>
    <updated>2016-06-05T07:16:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="The_reason_behind">The reason behind</h2>
<p>Loop is a very common concept in programming.  Normally we will not do below silly thing to loop a long long time like:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> j = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) {</div><div class="line">  j++;</div><div class="line">}</div><div class="line"><span class="built_in">console</span>.log(j);</div></pre></td></tr></table></figure>

<p>If it is run in browser, such as Firefox, it may prompt a warning box like below:  </p>
<p><img alt="Firefox script not responsive warning" src="http://thinkingincrowd.u.qiniudn.com/firefox_script_not_responsive_warning.png"></p>
<p>However, <strong>sometimes we might not know how many times the operation will be executed and how long each operation takes</strong>.  The loop count might depend on how many records retrieved by RESTful web serivce from our own or other external applications.  The operation speed might be affected by what browser user’s is using, IE or Chrome, current workload of user’s machine.  Hence, <strong>if your logic potentially deal with large volume of data or need to be compatible with old-fashion browser, it maybe worthy to think ahead to prevent</strong>.</p>
<p>A real case happened in our company’s internal system is that tons of unread notification received when an supervisor logined after he has a long vacation. The browser crashed every time the supervisor logined.  The developer haven’t considered this extreme case and so he pull everything out at one shot and looping to show them on screen.</p>
<h2 id="How_to_prevent?">How to prevent?</h2>
<p>Not to mention that we should do some lazy-loading or data paging in above case first, how can we make the potentially long running loop breakable if something unusual happened?</p>
<p>In Firefox, the unresponsive script warning is shown normally when the executing scripts takes longer than <code>10 second</code>.  It can be configured if you typed <code>about:config</code> in address bar and update <code>dom.max_script_run_time</code> parameter.  However, this should not be the way because you cannot ask user to change the config themselves.</p>
<p>Hence, if we want to prevent the warning, we should try to break the long running script from executing once to executing each portion consecutively.  <code>setTimeout</code> is a handy tool to step in.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> j = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">operation</span><span class="params">()</span> </span>{</div><div class="line">  j++;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span><span class="params">(operation, num)</span> </span>{</div><div class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">0</span>) {</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'end: '</span> + j);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(j);</div><div class="line">  operation();</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">async</span><span class="params">()</span> </span>{</div><div class="line">    repeat(operation, --num);</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="comment">// The batch size and timeout interval can be adjusted for your case.</span></div><div class="line">  <span class="keyword">if</span> (num % <span class="number">10</span> === <span class="number">0</span>) {</div><div class="line">    setTimeout(async);</div><div class="line">  } <span class="keyword">else</span> {</div><div class="line">    async();</div><div class="line">  }</div><div class="line">}</div><div class="line"></div><div class="line">repeat(operation, <span class="number">100000000</span>);</div></pre></td></tr></table></figure>

<p>Here, we combine the usage of recursion and <code>setTimeout</code>, the value of <code>j</code> can be printed out consecutively and without causing Firefox to complaint again.  Actually, now you can take a step further and inject some logic to check other condition, like total executing time, to decide whether to break out this loop or not.</p>
]]></content>
    
    
      <category term="Javascript" scheme="http://www.thinkingincrowd.me/tags/Javascript/"/>
    
      <category term="Functional Programming" scheme="http://www.thinkingincrowd.me/tags/Functional-Programming/"/>
    
      <category term="Loop" scheme="http://www.thinkingincrowd.me/tags/Loop/"/>
    
      <category term="Async" scheme="http://www.thinkingincrowd.me/tags/Async/"/>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to use Sinon.js and ExtPromise to test Ajax in ExtJS]]></title>
    <link href="http://www.thinkingincrowd.me/2016/05/16/How-to-use-Sinon-js-to-test-Ajax-in-ExtJS/"/>
    <id>http://www.thinkingincrowd.me/2016/05/16/How-to-use-Sinon-js-to-test-Ajax-in-ExtJS/</id>
    <published>2016-05-16T14:09:01.000Z</published>
    <updated>2016-06-05T07:16:30.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Ajax_Usage_Sample_in_ExtJS">Ajax Usage Sample in ExtJS</h2>
<p>Imagine we have a simple scenario that we have to validate user login ID when <code>onblur</code> event occurs in a user registration page.  The <code>validateLoginID</code> method below is a simple implementation of the event listener.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">validateLoginID: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> loginIDCmp = Ext.getCmp(<span class="string">'loginID'</span>)，</div><div class="line">        loginID = loginIDCmp.getValue();</div><div class="line"></div><div class="line">    Ext.Ajax.request({</div><div class="line">        url : <span class="string">'/loginId/validate'</span>,</div><div class="line">        method : <span class="string">'GET'</span>,</div><div class="line">        params : {</div><div class="line">            loginID : loginID</div><div class="line">        },</div><div class="line">        success : <span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>{</div><div class="line">            <span class="keyword">if</span> (data.responseText != <span class="string">''</span>) {</div><div class="line">                loginIDCmp.markInvalid(<span class="string">'Login ID is taken already.'</span>);</div><div class="line">            }</div><div class="line">        },</div><div class="line">        failure : <span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>{</div><div class="line">            alert(<span class="string">'Server Error.'</span>);</div><div class="line">        }</div><div class="line">    });</div><div class="line">}</div></pre></td></tr></table></figure>

<p>If we would like to test this piece of code, how should we do that?  This event listener encapsulates the <code>Ext.Ajax.request</code> completely with two anonymous functions as the <code>success</code> and <code>failure</code> callbacks.  </p>
<p>Is that we must change the anonymous callbacks into named functions to test individually?  In real ExtJS application code, many callbacks are short and not-reusable.  They acts as private functions that belongs to implementation detail and we seldom split them out to test individually.  <strong>When we write testing script, we test against the interface, the contracted behavior provided.  It’s just that this contract is not a simple return value but UI behaviors.</strong>  I think this is also why UI testing is more unfamiliar and difficult to test for most of the developers.</p>
<p><strong>Does that mean we can only use Selenium or Robot Framework to simulate user operation in browser and test?  Not Really.  We can manually fire event on ExtJS Component, fake XMLHttpRequest and response by Unit Test.</strong>  This would be more flexible and lightweighted.</p>
<h2 id="Sinon-js">Sinon.js</h2>
<p><a href="http://sinonjs.org/" target="_blank" rel="external">Sinon.js</a> can be used to fake XMLHttpRequest and response.  Below test spec tests from two angles:  </p>
<ol>
<li><code>onblur</code> event can trigger the validation for LoginID  </li>
<li>Based on the mock Ajax response，Login ID component can display desired error message.  </li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">'Login ID Unique Validation - Duplicate'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> xhr, ajax;</div><div class="line"></div><div class="line">    before(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        xhr = sinon.useFakeXMLHttpRequest();</div><div class="line">        xhr.onCreate = <span class="function"><span class="keyword">function</span><span class="params">(xhr)</span> </span>{</div><div class="line">            ajax = xhr;</div><div class="line">        };</div><div class="line">    });</div><div class="line"></div><div class="line">    after(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        xhr.restore();</div><div class="line">    });</div><div class="line"></div><div class="line">    it(<span class="string">'Focus leaving name field should trigger unique validation.'</span>, <span class="function"><span class="keyword">function</span><span class="params">(done)</span> </span>{</div><div class="line">        <span class="keyword">var</span> loginCmp = <span class="keyword">new</span> com.foo.loginComponent({}),</div><div class="line">            loginIDCmp = Ext.getCmp(<span class="string">'loginID'</span>);</div><div class="line"></div><div class="line">        loginIDCmp.setValue(<span class="string">'Ken'</span>);</div><div class="line">        loginIDCmp.fireEvent(<span class="string">'blur'</span>);</div><div class="line"></div><div class="line">        ajax.respond(<span class="number">200</span>,</div><div class="line">            { <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> },</div><div class="line">            <span class="string">'Login ID is taken already.'</span>);</div><div class="line"></div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">           expect(loginIDCmp.getActiveError())</div><div class="line">               .to.equal(<span class="string">'Login ID is taken already.'</span>);</div><div class="line">           done();</div><div class="line">        }, <span class="number">100</span>);</div><div class="line">    });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Not sure if you have spotted any special handling in above test spec.  At the very end, we must use <code>setTimeout</code> and <code>done</code> to write it in async style.  Why?  </p>
<p>Actually, the Ajax implementation in ExtJS use <code>setInterval</code> to keep polling the <code>readystate</code> of the XMLHttpRequest.  When it detects that the ready state is changed and indicated that the Ajax call is completed, it calls the callback correspondingly.</p>
<p>Hence, if we don’t use our <code>setTimeout</code> to postpone the <code>expect</code> assertion, it runs immediately without a chance to wait the execution of the callbacks.  This test spec will never pass.</p>
<p>However, this kind of hack is quite ugly if you agree.  And how can I know how much time it needs before Ajax request starts?  How can I know whether the timer to check Ajax ready state in ExtJS will be changed in the future?  If we don’t want to write our test code like this, how can we test any ExtJS application code involves Ajax request?  </p>
<h2 id="ExtPromise">ExtPromise</h2>
<p>What we want is that our assertion will be executed only when Ajax request completes.  Hence, it would be a charm if <code>Ext.Ajax.request</code> returns a Promise in ExtJS 3/4.  Before, I wrote the <a href="https://github.com/kenspirit/ExtPromise" target="_blank" rel="external">ExtPromise</a> when I first learned Promise and intended to use it to replace some flag cross-checking logic in my team.  Now, I can have one more reason to persuade them to use it instead of plain <code>Ext.Ajax.request</code>.  As you can see below, it takes little effort to change original application code.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Source</span></div><div class="line">validateLoginID: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> loginIDCmp = Ext.getCmp(<span class="string">'loginID'</span>)，</div><div class="line">        loginID = loginIDCmp.getValue();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ExtPromise.Ajax().request({</div><div class="line">            url : <span class="string">'/loginId/validate'</span>,</div><div class="line">            method : <span class="string">'GET'</span>,</div><div class="line">            params : {</div><div class="line">                loginID : loginID</div><div class="line">            }</div><div class="line">        })</div><div class="line">        .then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>{</div><div class="line">            <span class="keyword">var</span> errMsg = <span class="string">''</span>;</div><div class="line">            <span class="keyword">if</span> (data.responseText != <span class="string">''</span>) {</div><div class="line">                errMsg = <span class="string">'Login ID is taken already.'</span>；</div><div class="line">                loginIDCmp.markInvalid(errMsg);</div><div class="line">            }</div><div class="line">            <span class="keyword">return</span> errMsg;</div><div class="line">        },</div><div class="line">        <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">            <span class="keyword">return</span> <span class="string">'Server Error.'</span>;</div><div class="line">        })</div><div class="line">        .then(<span class="function"><span class="keyword">function</span><span class="params">(errMsg)</span> </span>{</div><div class="line">            <span class="keyword">return</span> errMsg;</div><div class="line">        });</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Since the application code is changed to be in Promise style, we can consider how to change our test spec.  It’s said that this test contains two parts, one is the Ajax logic and the other one is the <code>onblur</code> event triggering.</p>
<p>If now we have to change to use direct function calls to take advantage of the Promise style for testing, how can we test the event triggering then?  Actually, we can still manually trigger the event, and use <code>sinon.stub</code> to detect how many times <code>validateLoginID</code> are called.  One thing to be careful is that, when registering the event listener, we cannot directly bind the <code>validateLoginID</code> to the event, and must encloses it in another function.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">loginIDCmp.on(<span class="string">'blur'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{loginCmp.validateName();}, loginCmp);</div></pre></td></tr></table></figure>

<p>Below I will mainly focus on explaining the Ajax testing part.  This time we have to use the <code>fakeServer</code> in Sinon and most importantly to configure the server to respond immediately so that we don’t have to manually write <code>server.respond</code>.  Actually, you cannot even find a suitable place to write that even if you want.  As you can see now, the code for test assertion follows naturally after changing the application code to Promise style.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Spec</span></div><div class="line">describe(<span class="string">'Login ID Unique Validation - Duplicate'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> server;</div><div class="line"></div><div class="line">    before(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        server = sinon.fakeServer.create(); </div><div class="line">        server.configure({respondImmediately: <span class="literal">true</span>});</div><div class="line">    });</div><div class="line"></div><div class="line">    after(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        server.restore();</div><div class="line">    });</div><div class="line"></div><div class="line">    it(<span class="string">'Focus leaving name field should trigger unique validation.'</span>, <span class="function"><span class="keyword">function</span><span class="params">(done)</span> </span>{</div><div class="line">        server.respondWith(<span class="string">'GET'</span>, <span class="string">'/foo'</span>,</div><div class="line">            [<span class="number">200</span>, { <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span> },</div><div class="line">             <span class="string">'Login ID is taken already.'</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> loginCmp = <span class="keyword">new</span> com.foo.loginComponent({}),</div><div class="line">            loginIDCmp = Ext.getCmp(<span class="string">'loginID'</span>);</div><div class="line"></div><div class="line">        loginIDCmp.setValue(<span class="string">'Ken'</span>);</div><div class="line"></div><div class="line">        <span class="comment">// If still want to test event trigger</span></div><div class="line">        <span class="comment">// </span></div><div class="line">        <span class="comment">// var stubbed = sinon.stub(loginCmp, 'validateLoginID');</span></div><div class="line">        <span class="comment">// loginIDCmp.fireEvent('blur');</span></div><div class="line">        <span class="comment">// expect(stubbed.calledOnce).to.be.true;</span></div><div class="line">        <span class="comment">// stubbed.restore();</span></div><div class="line"></div><div class="line">        loginCmp.validateLoginID()</div><div class="line">            .then(<span class="function"><span class="keyword">function</span><span class="params">(errMsg)</span> </span>{</div><div class="line">                expect(loginIDCmp.getActiveError()).to.equal(</div><div class="line">                  <span class="string">'Login ID is taken already.'</span>);</div><div class="line">             })</div><div class="line">            .then(done)</div><div class="line">            .catch(done);</div><div class="line">    });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>Please feel free to leave your comment or suggestion on how to test UI behavior and what should be tested.  </p>
]]></content>
    
    
      <category term="Javascript" scheme="http://www.thinkingincrowd.me/tags/Javascript/"/>
    
      <category term="ExtJS" scheme="http://www.thinkingincrowd.me/tags/ExtJS/"/>
    
      <category term="Unit Test" scheme="http://www.thinkingincrowd.me/tags/Unit-Test/"/>
    
      <category term="Sinon.js" scheme="http://www.thinkingincrowd.me/tags/Sinon-js/"/>
    
      <category term="Promise" scheme="http://www.thinkingincrowd.me/tags/Promise/"/>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[什么样的读书姿势才正确]]></title>
    <link href="http://www.thinkingincrowd.me/2016/04/21/How-to-Read-a-Book/"/>
    <id>http://www.thinkingincrowd.me/2016/04/21/How-to-Read-a-Book/</id>
    <published>2016-04-21T00:19:09.000Z</published>
    <updated>2016-04-21T00:11:16.000Z</updated>
    <content type="html"><![CDATA[<p>读了那么多年书了，还不会读吗？别说，可能你还真的不会。这里的“读”要看你怎么定义。</p>
<h2 id="读书的目标">读书的目标</h2>
<p>当我们决定要拿本书来读的时候，一般怀着下面三种不同的目标：</p>
<ul>
<li>娱乐</li>
<li>获取信息</li>
<li>增长知识</li>
</ul>
<p>书的分类，一般和我们的阅读目标挂钩。想娱乐休闲的，可能会找些小说来看看。国家地理杂志或者旅游攻略可以让你查询一些信息。为了不挂科，大学的学生估计要抱着高数死啃。很少人拿本相对论来看着娱乐，拿本漫画书来增长知识。不过，即便<strong>看同一本书，目标如果不同，“读”的方法就不同</strong>。就比如读《三国演义》，目标可以是寻求娱乐，学习名著的文学风格，或者想从中侧面了解历史信息。但这三种目标的读书方法就应该有很大的差别。</p>
<p>上面说的三种目标的前两种，基本不需要特别的学习方法。接受过初等教育，认识字，有基本的理解语句的能力就可以了。所以，我这里要说的“正确的读书姿势”主要是针对第三种目标的。</p>
<h2 id="怎样读才能增长知识">怎样读才能增长知识</h2>
<p>我们如果是想通过读书来增长知识，首先是假定书里面包含一些我们不知道的知识和作者在某些方面比我们有学识。那么，只有我们把作者那些从前不知道的学识都“完全理解”，我们才能够达到真正意义上的“增长知识”。单纯获取信息是“知其然”，<strong>增长知识则应该要达到“知其所以然”</strong>。</p>
<p>当我们确定需要深入阅读某一本书的时候，要通过<strong>分析式阅读</strong>的方法来帮助我们“完全理解”书中的观点，并“知其所以然”。它具体包含下面一些步骤。  </p>
<h3 id="分析式阅读的第一个阶段">分析式阅读的第一个阶段</h3>
<p>这个阶段的<strong>目的是了解整本书的主要内容和整体结构</strong>。</p>
<ol>
<li><p>判定书的类型  </p>
<p>能为我们增长知识的书，一般都解释或阐明一些事物或道理。这类书我们一般都能比较容易分辨出来。所以，这里说的判定类别是更详细的分类，比如是历史，社会科学，还是哲学或者物理学等。在精读一本书以前，应该用检阅式阅读的方式，通过看它的标题，前言，目录等来先为其分类，形成初步的了解。  </p>
</li>
<li><p>用一句或者简短的几句话来概括整本书的内容  </p>
<p>在完成前面的那一步分类后，我们已经大概知道一本书是关于什么的。但是这还不够，第二步要做的是简短地把内容<strong>完整清晰地表达</strong>出来，也就是提炼主题和中心思想。</p>
</li>
<li><p>陈述书的主要部分，并描述各部分是如何组织和安排的  </p>
<p>一个完整的整体或者复杂的事物，必然是由很多细小的部分组成。像一台完整的电脑，应当有显示部件，CPU，存储部件，主电路板和输入部件。只有当这些单元衔接和配合得当才能让电脑运作流畅。同理，一本阐述某种观点或者理论的书，一定包含论述和论证的依据。同样讲计算机原理的书，为什么有些书讲的深入浅出，有些不知所云？其中一种原因可能就是不同的作者，组织论述的顺序和论证的方法不同导致。所以找到书的主题后，我们要了解作者是如何展开说明的。  </p>
</li>
<li><p>找到作者面对的问题和困难是什么  </p>
<p>作者的问题是什么？怎么发生的？某种特殊情况才会出现？会有什么后果？和其它类似事情有什么关系？用什么方法才能解决这个问题？你或许觉得，这个要求和前面的其实是有一定的重叠的。没错，但是通过寻求问题和提问的方式来探寻书中的观点，或许能帮我们从另一个角度去理解，甚至有可能发现作者没有看到的问题。</p>
</li>
</ol>
<h3 id="分析式阅读的第二个阶段">分析式阅读的第二个阶段</h3>
<p>这个阶段的目的就不单单是描绘出书的整体结构和了解它的大体内容了，而是<strong>真正理解书的内容和作者的思想</strong>。  </p>
<ol>
<li><p>找到书中的关键词，并与作者达成一致的理解  </p>
<p>这其实包含两个部分。一是找出关键词，另一部分是<strong>精确地理解关键词</strong>用在文中的意思。这一步很重要，尤其是后面一部分。  </p>
<p>同一个词，用在不同地方可以表达不同的意思。另外一种情况是，意思还是一样，只是隐含了一定的前提假设或者特定的场景。这些情况，都有可能让我们对某一个词的理解，和作者想表达的意思有偏差。所以，尽量揣摩透作者的用意是非常重要的。也正因为这样，当我们不知道一些用词是什么意思的时候，不应该马上查字典，而是应该先通过这个字词周边那些我们可以理解的部分来推敲。  </p>
<p>《独立宣言》里面短短的一句“人皆生而平等”，每个字都可以说值得细细推敲。特别是“平等”一词，到底是什么平等，怎么样才算平等，它其实包含非常丰富的内容在里面并需要诠释。</p>
</li>
<li><p>找到关键的句子，并找出里面表达的观点和主张  </p>
<p>句子和字词差不多，也是构成文章和书籍的基本单元。如果说书中的观点和主张是支撑人的骨架，我们要找到的关键句子，就是这个骨架的组成部分。一个完整的人当然不只是骨架，还有皮肉。所以我们要分清楚哪些句子是骨架，哪些句子是修饰和辅助理解的例子，论证等。  </p>
<p>怎么样才知道自己是否“完全理解”了作者的观点和主张？<strong>用你自己的语言来表达复述</strong>可以说是最好的检验方法，然后还应当<strong>尝试联想现实的例子</strong>来说明。如果没有办法达到这两项要求，可能你还没有达到“完全理解”的程度。拿回上面的例子来说，如果“人皆生而平等”，是否可以说每个人都有自由言论的权利？怎么样的言论才能够自由发表？那什么情况下会被冠以“诽谤”罪名？  </p>
</li>
<li><p>用这些关键的句子来定位和构建书中表达的基本理据  </p>
<p>需要注意的是，除非有理据支持，不然作者的主张仅仅是观点的表达，不能当作正确的知识来接纳。我们不只是想知道他的观点，更要清楚为什么他觉得我们应当被他说服。不过在这一个阶段，我们只是需要先了解清楚作者的主张和论证，而不是批判。这样做的目的是为了“完全理解”，为后面第三个阶段做准备。不然可能很容易因为发现作者一点小问题，或者没有理解清楚作者隐含的前提假设，以偏概全的否定了作者的正确主张。  </p>
<p>所以，我们这一步的重点是寻求支撑他观点的理据，和安排这些理据来分析论证的顺序以及逻辑推论。首先我们要清楚他是先铺设推理过程再总结，还是先摆出结论再一步一步分析。然后看他是通过一些具体的事例，进一步归纳出普适的结论，还是通过一系列的理论来演绎出最后的结论。最后，就要分析中间用到的理据，哪些是前提假设，是否已经被验证，哪些是显而易见的事实等。  </p>
</li>
<li><p>找到作者面对问题的解决方案  </p>
<p>对应于前面第一个阶段的最后一点：找到作者面对的问题和困难是什么。第二个阶段的最后一点就是列出作者自己寻求到的解决方案是什么了。他是成功解决？还是证明那个问题无法解决？是否有新的问题提出来？</p>
</li>
</ol>
<h3 id="分析式阅读的第三个阶段">分析式阅读的第三个阶段</h3>
<p>前面两个阶段的完成，可以说是已经“完全理解”作者的观点，并“知其所以然”了。但是读书这件事，不是说前面两个阶段完成了就结束了。最后应该由读者作出评价和判断才算完结。所以，第三个阶段要做的事情，是<strong>公正地评价</strong>。  </p>
<p>大家都应该听说过<strong>批判性思维</strong>这个说法，它是从 <strong>critical thinking</strong> 翻译过来的。根据维基百科的<a href="https://zh.wikipedia.org/wiki/%E6%89%B9%E5%88%A4%E6%80%A7%E6%80%9D%E7%BB%B4" target="_blank" rel="external">定义</a>，它是一种求清晰、求理性的思考方式。但是，因为 critical，criticize，“批判”这几个词都有负面批评的意思，所以很多人都有一个误区，认为只有表达不同意才算是“批判性思维”。其实 critical 和 criticize 都有全面而仔细地评判事物优缺点的意思。所以，critical thinking 其实可以包含同意和不同意。</p>
<ol>
<li><p>只有在你能“完全理解”作者观点的基础上，你才有资格说“我同意”，“我不同意”。要么你只能说“我还不能作出判断”</p>
<p>那些说“虽然我不太理解你的说法，但是我不同意你的观点”的人，其实是很无耻，也没有必要理会的。我们自己也要谨记不要犯这样的错误。不加理解的同意是愚蠢的，不加理解的反对是粗鲁的。</p>
</li>
<li><p>当你反对的时候，请理性地讨论，而不是争论  </p>
<p>我们人类虽然懂得理性思考问题，但是我们也还是情感动物。所以，有些时候当我们和其他人就不同的观点而辩论的时候，一不小心就会变成是争论。怎样才能避免争论？我认为是辩论的时候，出发点一定要设立正确，就是辩论是为了寻求真理，而不是为了说服对方。所以，辩论过后，任何一方都应当是有可能转变了他们的立场，支持了手持真理的另一方。只有意识到，你的观点是有可能存在纰漏，对方的观点反而是正确的，带着同理心来讨论并向往真理，才能尽最大可能避免争论。</p>
</li>
<li><p>对你做的任何思辨性的评论，请通过理据来表达知识理论而不仅仅是阐述自己的观点</p>
<p>前面说过，除非有充分的理据支撑，任何人的主张都只是他个人的观点，而不能被算作是正确的知识。同理，辩论其实是在提出我们认为正确的知识，我们也应该通过理据来说服对方。  </p>
</li>
</ol>
<p>以上是我看完《<a href="http://www.amazon.com/How-Read-Book-Classic-Intelligent/dp/B0092GBLHY" target="_blank" rel="external">How to Read a Book: The Classic Guide to Intelligent Reading</a>》第二部分的小结。刚好和菜头的《<a href="http://mp.weixin.qq.com/s?__biz=MjM5MjAzODU2MA==&amp;mid=2652779640&amp;idx=1&amp;sn=7331869fc477fe9d730bd760baf49064&amp;scene=0#wechat_redirect" target="_blank" rel="external">书中之书，众妙之门</a>》也推荐了这本书，大家可以顺便看看他的评论。</p>
]]></content>
    
    
      <category term="Book" scheme="http://www.thinkingincrowd.me/tags/Book/"/>
    
      <category term="Analytical Reading" scheme="http://www.thinkingincrowd.me/tags/Analytical-Reading/"/>
    
      <category term="Critical Thinking" scheme="http://www.thinkingincrowd.me/tags/Critical-Thinking/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我相信我可以改变]]></title>
    <link href="http://www.thinkingincrowd.me/2016/03/18/I-believe-I-can-change/"/>
    <id>http://www.thinkingincrowd.me/2016/03/18/I-believe-I-can-change/</id>
    <published>2016-03-18T12:40:27.000Z</published>
    <updated>2016-03-18T12:54:11.000Z</updated>
    <content type="html"><![CDATA[<h2 id="从相信不行到相信可以">从相信不行到相信可以</h2>
<p>在软件开发领域，有不少用惯了某种语言的人，就不太想接触别的语言，或者认为学不来。在这方面，我可不会这么想。如果工作上需要用到，不论什么语言或者技术，只要我努力学习和实践，我相信我还是可以学会和用得很好。</p>
<p>奇怪的是，在另一些方面，我却一直“相信”自己做不好一些事情，而且基本从来没想过要改变。比如：  </p>
<ul>
<li>相信自己不能学好语文和不会写作  </li>
<li>相信自己不喜欢长跑，擅长于短跑  </li>
<li>相信自己是一个内向和不善于交往的人  </li>
<li>相信自己不能处理好大公司里的人员关系和“政治”  </li>
</ul>
<h3 id="写作">写作</h3>
<p>我以前的语文差的一塌糊涂。而我也一直“相信”自己的语文水平是不行的，还把责任推到以前的语文老师上面。以前写的博客《<a href="http://www.thinkingincrowd.me/2013/01/01/why-i-start-blogging-and-in-english/" target="_blank" rel="external">为什么开始写技术博客, 并且还是用英语?</a>》里面就提到。所以一直以来，我基本没有看专业技能以外的书，也不喜欢写作。</p>
<p>近两三年，我越来越觉得阅读和写作是一个人的一生中很重要的两项技能。这两项技能都可以极大的锻炼个人的观察，思考，总结和想像能力。可惜的是，这两项技能我以前都不太重视。虽说在启蒙阶段，老师和长辈的影响确实是比较大的，但是自己成年后那么久才有点想明白，怎么也说不过去，怪不了别人。  </p>
<p>老实说，我刚开始写博客的时候，除了想锻炼写作，分享自己的知识外，还是有那么一点心机，想打造自己的影响力的。新生大学公众号的《<a href="http://t.cn/RGdHphr" target="_blank" rel="external">文学创作已经成为普通人在学校里就能学会的最赚钱的技能</a>》里面也说到，文字是最具穿透性的，而且能创造影响力。虽然我现在的写作已经是单纯为了我自己的修炼和提高，但是如果能同时帮助到别人，那就更好了。</p>
<p>就我自己的写作能力而谈，这段时间陆陆续续写写博客，已经让我不畏惧写作，并且写得顺手多了。要提高自己的写作能力，无他，唯手熟尔。现在也我终于相信了。  </p>
<h3 id="长跑">长跑</h3>
<p>可能你们会觉得，跑步不是太小儿科了吗？但是，我还真是一直抵制 400 米以上的长跑。我还一直和儿子说，爸爸不喜欢长跑，以前高中也是短跑比较擅长，还拿了一次 100 米的铜牌，12 秒。看到了吗？我一直拿一个曾经的优点去试图掩盖另一个缺点，否定和麻痹自己。  </p>
<p>可是，当我决定改变和跑起来，我第一天在楼下跑 3 圈，第二天 4 圈，然后5 圈，很快就到了 10 圈。只用了两星期，跑了 6 次左右，我已经可以跑 5 公里了，平均一公里 6 分钟多一点。虽然 5 公里并不是一个很长的距离，但是我现在已经完全相信 10 公里也应该不会有问题。  </p>
<h2 id="信念的力量">信念的力量</h2>
<p>信念的力量真的很可怕。一些本来你是完全有能力做好的事情，很可能只是因为一些小失败，莫名的敬畏或恐惧，就让你“相信”自己无法做好它，给自己贴了标签，最后就真的无法改变了。我不否认，每个人都有自己擅长和不擅长的地方。但是，即使是不擅长的地方，只要相信自己和努力去做，怎么样都不会太差。最重要的是不能轻易放弃和给自己贴标签。大家可以看看李笑来的学习学习再学习公众号里面两篇类似的文章《<a href="http://t.cn/RGdHKeB" target="_blank" rel="external">比压力山大更可怕的是什么</a>》和《<a href="http://t.cn/RGSvBsT" target="_blank" rel="external">为什么你最终竟然无法改变自己</a>》，很有意思。</p>
<p>我已经从两件最基本的事情上做出了改变。虽然它们看起来是很小的事情，但是意义对我来说非常重大。既然能在这两方面做出改变，其它那些我“相信”自己做不好的事情，我也同样可以作出改变。</p>
<p>你想到有什么要改变了吗？</p>
]]></content>
    
    
      <category term="Believe" scheme="http://www.thinkingincrowd.me/tags/Believe/"/>
    
      <category term="Change" scheme="http://www.thinkingincrowd.me/tags/Change/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[转变到“管理他人”的路上最容易摔倒的地方]]></title>
    <link href="http://www.thinkingincrowd.me/2016/03/13/transition-to-managing-others/"/>
    <id>http://www.thinkingincrowd.me/2016/03/13/transition-to-managing-others/</id>
    <published>2016-03-13T06:10:16.000Z</published>
    <updated>2016-03-18T12:39:29.000Z</updated>
    <content type="html"><![CDATA[<p>一直以来，我都不太喜欢 Management，而倾向于喜欢 Leadership 这个词。我对那些单纯的命令或者军事性的管理也嗤之以鼻，认为那是对知识管理者的不恰当管理的方式。看过管理大师 Peter F. Drucker 的 <a href="http://www.amazon.com/Effective-Executive-Definitive-Harperbusiness-Essentials/dp/0060833459" target="_blank" rel="external">The Effective Executive: The Definitive Guide to Getting the Right Things Done</a> 那本书后，我对他说的的新时代下做事和管理方式的理念更是认同。</p>
<p>但是，仅仅因为不喜欢旧的管理方式，我却把另一些无论是 Leadership 还是 Management 都要做的东西给忽略掉了。最近看过李笑来老师介绍的 <a href="http://www.amazon.com/Leadership-Pipeline-Build-Powered-Company/dp/8126531223" target="_blank" rel="external">The Leadership Pipeline: How to Build the Leadership Powered Company</a>，更是清楚认识到自己缺失了什么。</p>
<p>在整个领导力升级通道里，最底层的是从管理自己到管理他人的转变。可以说我也正在经历这个阶段。那就在这里说说自己的感受吧。</p>
<h2 id="个人贡献者和管理者的差异">个人贡献者和管理者的差异</h2>
<p>书中有一个很好的表格详细阐述了从个人贡献者到一个一线管理者在各个方面所需要的转变。可以看到，两种不同的角色在各个方面的差异还是蛮大的，所以转变过程其实会碰到不少问题。</p>
<p><img alt="Contributor vs First Line Manager - Skills" src="http://77g8zm.com1.z0.glb.clouddn.com/contributor_vs_first_line_manager_skill.png"></p>
<p><img alt="Contributor vs First Line Manager - Time and Value" src="http://77g8zm.com1.z0.glb.clouddn.com/contributor_vs_first_line_manager_time_value.png"></p>
<h2 id="容易出现的问题">容易出现的问题</h2>
<h3 id="无法放下技术">无法放下技术</h3>
<p>余晟最近在公众号写了篇《<a href="http://mp.weixin.qq.com/s?__biz=MzA3MDMwOTcwMg==&amp;mid=402149740&amp;idx=1&amp;sn=d97eb29c3a115919f8c82564b58cd53b&amp;scene=0#wechat_redirect" target="_blank" rel="external">技术领导必须更懂技术吗？</a>》。我一直到现在也还是有他说的困惑。因为自己的技术底子并不深厚，所以觉得如果我放弃了技术，完全转型管理的话，感觉非常没有安全感。再说，虽然我并不是说怕下属比自己厉害而丢脸，但是也不想做一个瞎指挥的领导。只是，是否只要能抱着谦虚的心态，和像他介绍的肉饼铺子的 Robbin 说的那样就好了呢？</p>
<blockquote>
<p>我的做法比较狠，把下属研发团队变成我自己学习新技术的延伸大脑，鼓励他们不断学习和尝试，然后讲给我听，我再提出问题让他们给我解决。这样我就可以用最少的时间和精力，快速积累更多的知识。</p>
</blockquote>
<p>我还没有完全解决这个问题。等我试过并成功后再告诉大家。</p>
<h3 id="授权">授权</h3>
<p>一些优秀的个人贡献者，特别是无法放下技术的情况下，在这方面就适应不过来。因为个人的能力比下属优秀，所以在旁边看不下去或者等得干着急了，就把下属的事情抢过来自己做了。这种领导往往把自己累的半死，而下属也永远成长不起来。</p>
<p>另一种极端是我们平常厌恶的那些“只懂得指点别人干活”的管理者。其实他们做的并不是真正的授权。真正的授权要做的事情可不单单把任务交出去那么简单。它还包括懂得怎么平衡优先级，分配任务，教导，监控进度，保护下属不受干扰等。被视为“只懂得指点别人干活”，多半是因为这些事情没做好。</p>
<p>所以，当一个管理者对下属说：“细节我不看，只看最后的结果”的时候，下属其实会有两种截然不同的反应。好的反应是，他知道上司不插手自己怎么做一件事情，他可以有发挥的空间（这也是知识工作者喜欢的）。同时，上司的目标是清晰的，沟通也清楚。最重要的是，他知道真正遇到困难的时候，他可以向上司寻求帮助，共同解决问题。另一种不好的反应就是，“妈的，只知道要我干活，对我不管也不问。又要加班加点搞。”</p>
<p>在授权这点上，自问自己做得还算可以吧。之前也写了一篇关于《<a href="http://www.thinkingincrowd.me/2016/03/08/How-to-delegate/" target="_blank" rel="external">如何授权</a>》的文章，有兴趣的朋友可以看看，给些意见。</p>
<h3 id="建立关系，推动事情">建立关系，推动事情</h3>
<p>这一方面是我忽略和最不擅长的部分。虽然我对自己的团队做得还行，但是我并不善于对外和其它部门建立关系，以及推动事情。</p>
<p>一直以来在我心中，理想的状态是领导和公司都有比较清晰的目标和任务安排。大家都能向着这一个正确的目标在努力，互相配合。实际情况下，先不说目标不清，多头并进的情况。即便从根本上来说，公司的目标只有一个，各个部门为这个目标都会有自己的安排，都有各自的利益。对你来说很重要，但需要其它部门配合的事情，可能对他们来说优先级不高。如何能寻求共同利益，更主动得把事情推动下去，我一直没有什么好办法。我一直有点依赖，觉得这些涉及多部门的，都只能靠寻求更高层的职位权力来决定。</p>
<p>我感觉这可以说是最难习得，而且是技术转做管理和创业最需要培养的能力了。而且它不像技术，还很难单单靠看书和自己多练习就能学会。我还在摸索，谁有比较好的意见和想法，可以分享一下。</p>
]]></content>
    
    
      <category term="Delegation" scheme="http://www.thinkingincrowd.me/tags/Delegation/"/>
    
      <category term="Leadership" scheme="http://www.thinkingincrowd.me/tags/Leadership/"/>
    
      <category term="Management" scheme="http://www.thinkingincrowd.me/tags/Management/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[有经验和没有经验的程序员的区别]]></title>
    <link href="http://www.thinkingincrowd.me/2016/03/08/Novice-vs-Experienced/"/>
    <id>http://www.thinkingincrowd.me/2016/03/08/Novice-vs-Experienced/</id>
    <published>2016-03-08T14:40:45.000Z</published>
    <updated>2016-03-08T14:28:40.000Z</updated>
    <content type="html"><![CDATA[<p>近来我一直都需要带些毕业生（怎么我的队伍就那么多新人呢，呵呵），发现很多人在解决问题的方法上都存在一些问题。解决问题，其实是每个程序员每天都在干的事情。但是方法好还是不好，我觉得正是有经验和没有经验的程序员之间很重要的区别。刚好最近又看到了余晟公众号（yurii-says）的《砍伐大树 v.s. 收割庄稼》里面阐述的解决问题的四个步骤。所以，我想根据身边的案例详细一点解释一下这四个步骤。</p>
<h2 id="认识和定位问题">认识和定位问题</h2>
<p>一般来说，新手进入一个公司和团队之后，team lead 会分配一两个简单的任务让新人练练手。所以，首先要做的事情就是搭环境，和认识已有的系统和代码。</p>
<p>在搭环境和做任务的过程中，新人经常遇到问题或异常后就蒙了，不知道怎么继续下去。然后就求救说：“出错了，怎么办？”。我都会反问一句：“哪里出错了？你定位到问题在哪里了吗？”。可是一般收到的答案都是“不知道”。像我们公司的系统架构，把后端分了两层，一层专门服务于表现层，另一层专门访问数据库和提供 web service。系统的架构就简单如下图所示。如果在浏览器发起的一个 Ajax 请求有异常返回，那异常到底是在哪一层，或者是哪一个传输环节？如果在传输环节可能是因为对象类型，属性不一致导致。如果在 Domain 层可能是业务逻辑，数据库操作出现问题等。</p>
<p><img alt="Company System Architecture" src="http://77g8zm.com1.z0.glb.clouddn.com/company_system_architecture.png"></p>
<p>​认识和定位问题的能力应该是程序员技能宝典里面的 101，并且是要持续修炼的能力。<strong>看日志</strong>和<strong>看代码</strong>是获取这种能力的两种最基础的手段。</p>
<h3 id="看日志">看日志</h3>
<p>在没有源码的情况下，看日志可以说是唯一定位问题的方法了。再说，即便有源码，也不可能全都看一通，或者顺着源头一直 debug 下去，直到遇到问题为止。所以，定位问题的起点一般都是先看日志。</p>
<p>日志来源基本可以分为几大类：</p>
<ol>
<li>程序：项目代码  </li>
<li>框架：团队或者公司内部框架，因为不少公司还有专门制造内部轮子的部门  </li>
<li>中间件，外部组件：广义地指所有外部的组件，包括数据库，Web 服务器，Application 服务器，以及云平台等。  </li>
</ol>
<p>一般来说，我们都先从第一种着手。因为一个好的项目，第一大类的日志应该是要把内部框架和所有外部系统组件的异常都封装好。异常处理设计的好，从这里的日志出发就可以较容易地追溯至真正问题所在。可是如果看完第一大类的日志都没能确定问题的原因，很可能是自身项目没有做好异常的捕捉处理，把外部系统或组件的异常给吞吃和隐藏了；又或者是因为一些运行时异常没有被捕捉到，然后就被写到外层的框架或者容器的日志里，比如说 Weblogic/Tomcat。</p>
<p>所以，经验首先就在于懂得在什么地方找日志；先看什么，后看什么；以及在项目自身日志不健全情况下，如何寻求第二或者第三大类的日志，看出错时间点的前后到底有什么信息可以帮助推断真正问题所在。</p>
<h3 id="看代码">看代码</h3>
<p>当定位到要改动的源码的位置时，很多新人面对着一个从未接触过的庞大的项目代码库，在 IDE 里面跳转多几次就乱了。他们遇到每一个方法调用都想进去看个明白。但是，一开始就想看懂整个系统的代码是不现实的。除了代码量庞大，或者找不到源码作者咨询以外，我们可能还有时间的压力，必须尽快找到问题和解决方案。那么，我们就必须有<strong>猜代码</strong>的能力。如何忽略细节，不迷失在茫茫代码海洋里，迅速定位和看懂自己的任务需要涉及和修改的代码是哪一块，是非常重要的。就像浏览文章一样，找段落大意，猜不同的代码大概是完成什么功能，然后再决定是否应该深入去研究某一块，而不是一次搞懂所有的代码。</p>
<h2 id="认清问题">认清问题</h2>
<p>其实就是<strong>知其然，知其所以然</strong>。</p>
<h3 id="从技术上来看">从技术上来看</h3>
<p>准确定位到问题或者异常发生在什么地方了，并不代表要修改的代码就是且只是那一块。我们不能头痛医头，脚痛医脚。</p>
<p>比如说，我们对外提供的一个 Web Service，因为浏览器或者调用方传的参数不全，报了 NullPointerException，我们要怎么改？改调用方还是提供方？首先，根据健壮性原则，也就是 <strong>Postel’s law</strong>，看起来应该是改提供方这边：</p>
<blockquote>
<p>Be conservative in what you do, be liberal in what you accept from others</p>
</blockquote>
<p>但是，除了改提供方，我们还要考虑为什么调用方会提供少了一个参数，是所有的情况下都少了吗？还是某一些场景才会？尤其是当调用方是从一个具有复杂的业务操作逻辑的页面过来的时候，我们更需要全面分析。这才不至于说见一个洞，补一个洞，其实还漏了几个洞。</p>
<h3 id="从做产品或者功能设计来看">从做产品或者功能设计来看</h3>
<p>明白用户的功能使用场景和背后的动机，是产品功能的设计，如何取舍技术难点等的重要决策依据。</p>
<p>举个栗子，船运公司的单据录入部门其实有一份标准的操作指南。录入人员要根据托运人是谁，运什么货，从哪运到哪，要不要报关等一大堆的信息，决定应该怎么录入单据。那份操作指南其实就像一个问答系统，或者更像是一颗决策树一样。从成百上千种分门别类，如货物，航线，费用，报关等的问题找到那对应的决策路径来获知最后该怎么做。</p>
<p>那么，如果我们要做一个指南维护页面，怎么让用户容易找到他想要修改的条目，和清晰展现出来就要有一些考量了。对查找这个功能，开发人员一开始把那些门类和问题都做为下拉框展示出来以作为查询条件，并且还算聪明地实现了级联过滤，不至于用户因为门类和问题数目过多而不好找到他想要的东西。但是用户反映说那个问题的下拉框不能有级联。为什么？原因其实是有些问题是通用的。它们有可能出现在很多门类当中。所以，一种场景是他们已经知道要改的是某一个具体的问题，他想找出相关的所有门类。那么，我们把问题那个下拉框做成级联，他们就悲剧了。因为他们根本就不知道什么门类下有那个问题，怎么可能要求他们先选好门类，再选问题来查找呢？就问题这个下拉框，换另一种思路，做自动补全，让用户输入关键字就能过滤就好了。</p>
<h2 id="可行性分析">可行性分析</h2>
<p>在定位好问题和界定范围后，下一步就要看能采取什么方法来解决问题。</p>
<p>拿最近让新人做的一个开发任务来说吧。有一个页面，需要把数据库的数据，按照树的结构渲染出来和进行数据维护。这里，我们要考虑的东西有什么呢？</p>
<ol>
<li><p>页面生成树要用什么前端技术，它的特点是什么？它生成树形结构的表现形式时，需要的数据结构是什么样的，是不是就是对应的树状数据结构还是没有要求？对树的结点进行页面上的操作时，数据就会自动更新吗，还是说我们要另外再独立更新数据？</p>
</li>
<li><p>页面的数据结构和数据库的结构一样吗？中间要经过多少次的转换？转换放在前台还是后台做？页面到底有一些什么业务操作，以及这些业务操作其实最后反映到数据库层面的形态是什么样的？界面操作后如何把信息带回后台，要带回什么数据（比如 ID，操作类型标记等）?  </p>
</li>
<li><p>后台的数据更新逻辑是怎么样的？每次更新都需要整颗树的全部信息进行全量更新吗？</p>
</li>
</ol>
<p>动手编码之前，对这些问题有初步的认识是相当重要的。有初步的想法之后，怎么做才能用最少的时间和精力来验证是否可行？如果还没有搞清楚，一下子就上手编码是很危险的。这个开发任务，也正是因为上面说的某几个方面没有做好，中间一些实现推倒重来了几次，进度比预期长了很多。</p>
<p>另一种非常重要的情况就是，我们想到或者碰到的技术难点，可能在实际应用场景根本碰到的情况就不高。如果避开那种场景来考虑的话，系统设计和实现方式可能就大大不同了。对于怎么舍弃一些技术细节问题，曹政的公众号（caozsay）的《如何应对并发(3) - 需求裁剪》就针对一个案例说得很清楚，大家可以看看。</p>
<p>还有，可行路径的选择，当然也受计划的影响。一个月，还是三个月时间的实现方案当然会有所不同。</p>
<h2 id="估算">估算</h2>
<p>估算和可行性分析其实密切相关。只有经过充分的可行性分析，估算才相对有意义。我觉得不是说有经验的人，估算的时间就比较准。而是有经验的人大概知道什么地方有坑，把上面的可行性分析和任务拆分做得更细，考虑得更全面一些。</p>
<p>其实人对时间的估算是非常不准确的，也不应当仅仅依赖于时间估算来做计划或者确定项目期限。我个人对估算的想法在之前写的 Kanban 系列里面有一篇文章也讲了一下。有兴趣可以看看。</p>
<ul>
<li><a href="http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/" target="_blank" rel="external">Dive into Kanban (3) - How Kanban address the estimation headache</a></li>
</ul>
]]></content>
    
    
      <category term="Experience" scheme="http://www.thinkingincrowd.me/tags/Experience/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何授权和分配工作]]></title>
    <link href="http://www.thinkingincrowd.me/2016/03/08/How-to-delegate/"/>
    <id>http://www.thinkingincrowd.me/2016/03/08/How-to-delegate/</id>
    <published>2016-03-08T14:33:05.000Z</published>
    <updated>2016-03-08T14:26:51.000Z</updated>
    <content type="html"><![CDATA[<p>最近在看李笑来推荐的《领导梯队》。其中描述了从管理自己到管理他人的转变，其中一项不容易适应的事情是要懂得授权和分配工作。</p>
<p><strong>懂得授权和分配工作是成为管理者道路上要习得的首要技能</strong>。因为这点非常重要，并且是不少人第一次从个人贡献者转变成一线管理者时做得不好的地方。</p>
<h2 id="目的">目的</h2>
<p>授权和分配工作任务其实只是手段。这样做的最主要的<strong>目的是多人协作，达成目标并同时提高每个人的能力</strong>。</p>
<h2 id="心态">心态</h2>
<p><strong>人要适应变化，首要必须是心态上的调整和适应</strong>。很多人没法把一件事情做好，很多情况下是因为心态没有改变过来，而不是他没有那种能力。其实如果能把握好上面说的目的，心态已经是调整好一大半了。</p>
<p>在个人贡献阶段，每个人基本只要为自己做的事情负责，做得又快又好就行。这个阶段对个人硬技能的修炼提高是比较明显的。所以，个人也能比较容易得从中获取安全感和成就感。</p>
<p>一旦个人能力提高到一定程度，很多公司就很自然的让他领导或者管理他人一起做事情了。那么，他用自己的专业技能来做事的时间比例就会减少，有相当一部分，甚至可能是大部分的时间都要花在管理和协调上面。</p>
<p>这种转变其实对个人的心理变化会有很大影响。因为，这意味着他要舍弃熟悉和一直依赖的专业技能，去做一些虚而杂的管理，心理安全感上面会有很大的压力。特别是近年来全球都推崇组织扁平化，削减不必要的层级，还有一些管理人员失业后不好找工作的消息，让不少刚上升或准备上升一线管理的人都心有顾忌，放不下自己的专业技能。所以，很多人对这种转变是心有抵触的。</p>
<p>但是，软件开发领域，一旦涉及多人协作，少至两人，尤其当你是担当组织领导这样的角色的时候，必须懂得如何授权和分配工作。并不是说你一定是成为管理者后才要习得的技能。</p>
<p>再说，这样做对自己也有很大的好处。你可以把自己熟悉，但是对别人来说有挑战的工作交给别人尝试，然后自己腾出时间来做更有挑战的工作。但是，这并不意味着授权和分配工作就是把自己厌恶的工作交给别人做。下面会说到这个问题。</p>
<p>那么我们要如何授权和分配任务呢？<strong>授权，首要的是要能放心</strong>。如果你的下属，没有一个能让你放心的话，是没法授权的。放不下心是很多管理人员做不好这点的原因。但是，我们要搞清楚，放不下心是下属的能力，做事态度的问题，还是我们自己的心理问题而已。</p>
<p>一般来说，你带领的团队，可能能力会比你弱一点，你也才会担当或者被任免为领导角色。所以，如果只是下属的能力还暂时不胜任，你要做的是指导他，让他的能力慢慢提升，从而胜任工作并解决问题。而不是你觉得他做的不够你快和好，就自己下场抢了下属的工作来做。这样的话，他永远无法提升，你也无法放心。就软件开发而言，下属要下场写代码，你最好只是审查他的代码，分析他哪写的逻辑不清晰，需要重构等。</p>
<h2 id="方式">方式</h2>
<p>如果你能做到放心，并且愿意授权和分配工作了，那应该怎么分配呢？</p>
<h3 id="分配原则">分配原则</h3>
<h4 id="擅长什么做什么">擅长什么做什么</h4>
<p>软件行业一直有前端，后端，数据库管理，测试和运维等分工。所以，按擅长的领域来分工也是很明显和自然的一种方法，当然你的下属可能也会按这样的原则来揽任务。再说，项目期限紧的情况下，多是只能这样安排。</p>
<h4 id="不擅长什么做什么">不擅长什么做什么</h4>
<p>可能不是很多人会采取这种策略。而且，不少技术人员，尤其是比较资深的，有一些不恰当的歧视心态，并且不愿意走出舒适区，只想干自己喜欢的技术。比如，开发看不起测试，后端看不起前端，XX 语言看不起 YY 语言等。</p>
<p>但是，如果时间充裕，在培养新人或者有机会挑战自我的时候，我都会时不时专门挑下属不熟悉或者不擅长的领域，让他去死磕一下。一方面可能是我在的公司团队都比较小，要做的事情都比较杂。无论是前端后端，数据库等都要自己搞。另一方面，我也想通过这种手段来让大家有机会扩充知识面，并了解不同的领域有什么不同和相通之处。并更好的理解上下游合作伙伴，减少歧视的心态。</p>
<h4 id="想做什么安排什么">想做什么安排什么</h4>
<p>这就没什么特别好说的，只要团队内沟通协调良好，大家互相支持，尽量都可以这样安排并结合上面两点来考虑。</p>
<h4 id="不能长期把垃圾工作交给他人">不能长期把垃圾工作交给他人</h4>
<p>这一点是特别要注意的地方。当你承担了分配工作的重任，不是说随心所欲的按自己喜好，下属亲疏来分配的。所以，即便上面说了，可以把自己熟悉的工作分配出去，但不代表你可以把你不想做的垃圾工作都给别人。一方面，这样做并不能锻炼你的下属，他的能力无法得到提高。另一方面，他会对你这个领导产生厌恶感，你和团队之间凝聚力就会变差，而且以后他还会很不愿意听你的安排和意见。</p>
<p>相反，我通常是把垃圾工作自己揽过来处理。真要交出去的时候，可以和下属讨论怎么减少这类型的工作，或者有没有什么好办法来解决。比如说写一些自动化的脚本或者工具，运用新的技术等。这样，就可以将无聊的事情变得有趣，并且对大家的能力，眼界也有所提高。</p>
<h3 id="跟进，不是放任自理">跟进，不是放任自理</h3>
<p>其实，我觉得授权和分配工作只是第一步。重要的一步是如何跟进和指导，不是分配完就不管，最后到期限时追进度而已。</p>
<h4 id="目标明确">目标明确</h4>
<p>其实这点不能说是在跟进时才考虑，因为一开始分配任务的时候，也应该清楚的解释好工作任务的内容和目标。不同的任务类型，处理手段或隐含的目标是不同的。而且，有些人做着做着，可能就深入细节，偏离了大方向，延误了进度。所以，跟进的过程中，要时不时确保目标明确。</p>
<p>之前我安排一个下属通过 POC (Proof of Concept) 来确定 Solr 是否可以用来取代数据库 SQL 查询以提高性能，另一个下属是做一个新功能的页面原型，和通过 POC 来确定初步构想页面结构和操作能否实现，有没有技术难点，并让业务分析人员尽早确定。你们觉得各自的“目标”是什么呢？他们清楚吗？</p>
<p>虽然两个任务都涉及技术的 POC，但是分析角度和要求有细微不同。</p>
<p>第一个的任务，因为是针对旧功能的改造。首要的是充分了解旧的 SQL 查询是怎样的逻辑。如果换成用文本检索的方式，新的数据存储结构和字符的模糊匹配特性，能否完全模拟出原来 SQL 查询的功能？即便不行，那是否还满足当前业务的要求？这边对技术细节的理解和对比要相当清楚，以免换技术方案后，对原功能造成大影响。</p>
<p>另一边的页面原型，主要则是把握大的方向没有问题，主要的交互功能点能实现出来就可以了。一些很细的技术边角，即使后面真的出现并无法解决，可能再和业务商量一些替代方案就好了。而且还处在我们向业务方出提议阶段，时间上希望能尽快先有一个版本。如果业务对我们提议的页面原型有些修改意见，原先的技术问题可能都不用解决。</p>
<h4 id="授之于渔">授之于渔</h4>
<p>当下属遇到问题不知道怎么样解决的时候，我看过不少领导直接上来就给具体方法或者答案，手把手教怎么做，代码该怎么写，有什么 API，哪里有类似的代码可以抄等。</p>
<p>可是，我是相当不喜欢这种方式。因为：</p>
<ol>
<li><p>解决问题的方法不见得只有一种。</p>
</li>
<li><p>直接照搬，下属就缺少思考锻炼，下次也不会举一反三</p>
</li>
</ol>
<p>看到下属遇到问题，我一般至少准备分两三次来进行指导。</p>
<ol>
<li><p>首先我会询问他目前卡在什么地方，分析的思路是怎么样的？如果方向偏了，我会提示解决方向，然后就让他再自己摸索。</p>
</li>
<li><p>再隔一段时间，我再问他问题解决得怎么样？如果这个时候，他已经按提示方向摸到了门道，基本就可以了。如果还是没有头绪，我会再慢慢解释思考的思路，目标原则或者有什么要取舍的。再让他尝试按解释了的思路去解决问题。</p>
</li>
<li><p>最后基本就是再做代码审查了。</p>
</li>
</ol>
<p>这里要把握好中间间隔的时间，提示的程度需要看情况而定。项目的松紧，人的能力等都要考虑。</p>
<h4 id="不接受意见怎么办？">不接受意见怎么办？</h4>
<p>当你对下属做出指导，提供意见或者别的方案的时候，他可能并不买帐。</p>
<p>这种问题其实很难解决。要降低这种问题出现后能温和的处理，首先当然不能粗暴地命令。正如上面所说的，解决问题的答案不止一种，就像编程语言和框架一样。所以，你往往需要从技术或者业务上，<strong>真诚和耐心的详细分析</strong>，你们的方案主要区别是在哪里，为什么说你的考虑可能在目前情况下更优。有些时候，可能真的是技术上来说他们的方案确实更完善。但是从项目性质或者进度上来考虑，需要舍弃一些东西，没必要做得太复杂。有时我们还可以尝试寻求可测试或可量度的手段来进行比较，又或再拉几个人来讨论，发表见解和投票等。</p>
<p>一般来说，优秀的 IT 人员，在摆事实和讲道理后，都会接受合理的意见的。如果作为领导，一直都是很真诚的教导下属，更容易共同寻求最终两方都能接受的方案。</p>
]]></content>
    
    
      <category term="Experience" scheme="http://www.thinkingincrowd.me/tags/Experience/"/>
    
      <category term="Delegation" scheme="http://www.thinkingincrowd.me/tags/Delegation/"/>
    
      <category term="Leadership" scheme="http://www.thinkingincrowd.me/tags/Leadership/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Modulization and Bundling with TypeScript and Webpack for JavaScript Full Stack Project]]></title>
    <link href="http://www.thinkingincrowd.me/2016/01/02/Modulization-and-Bundling-with-TypeScript-and-Webpack-for-JS-Full-Stack-Project/"/>
    <id>http://www.thinkingincrowd.me/2016/01/02/Modulization-and-Bundling-with-TypeScript-and-Webpack-for-JS-Full-Stack-Project/</id>
    <published>2016-01-02T08:09:39.000Z</published>
    <updated>2016-01-03T05:00:43.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Modulization">Modulization</h2>
<p>In a Full Stack JS project, the essence is how to write code consistently and easy to share and maintain because code sharing between server and browser is unavoidably.  Before talking about what strategy we are taking, let’s have a review on the trend of the modulization first.</p>
<h3 id="Ancient_history">Ancient history</h3>
<p>There is no such thing and all things are global.  This causes potentially naming conflict and it’s not good for maintenance.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> logo = <span class="string">'KanbanizeIT'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">(name)</span> </span>{</div><div class="line">  alert(logo + <span class="string">' wish you a happy new year, '</span> + name);</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Package/Namespace_Concept">Package/Namespace Concept</h3>
<p>Some well-known library, like ExtJS, takes package/namespace concept and they manage the source in this structure.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Ext.ns(<span class="string">'com.kanbanizeit'</span>);</div><div class="line"></div><div class="line">Ext.apply(com.kanbanizeit.SubModule, {</div><div class="line">  oneThousand: <span class="number">1024</span>,</div><div class="line">  oneThousandInComputer: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> oneThousand;</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<h3 id="Immediately-Invoked-Function-Expression_(IIFE)">Immediately-Invoked-Function-Expression (IIFE)</h3>
<p>This approach reduce the hassle of long namespace and groups all internal stuffs encapsulated.  Many small library adopts this style, e.g. jQuery.  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> kanbanizeIT = (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> privateField = <span class="number">1024</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> {</div><div class="line">    publicStuff: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      <span class="keyword">return</span> privateField;</div><div class="line">    }</div><div class="line">  };</div><div class="line">})();</div></pre></td></tr></table></figure>

<h3 id="CommonJS/Node-js">CommonJS/Node.js</h3>
<p>This style went popular due to the popularity of Node.js.  Each file is a module and all variables defined within that file are only visible in that file.  If you have public API want to publish, you need to export it.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// logo.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="string">'KanbanizeIT'</span>;</div><div class="line"></div><div class="line"><span class="comment">// sayHello.js</span></div><div class="line"><span class="keyword">var</span> logo = <span class="built_in">require</span>(<span class="string">'./logo'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = {</div><div class="line">  sayHello: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="string">'Welcome to join '</span> + logo;</div><div class="line">  }</div><div class="line">};</div></pre></td></tr></table></figure>

<h3 id="AMD/CMD">AMD/CMD</h3>
<p>CommonJS is suited for server-side JS loading because it’s synchronous file loading in Node.js.  But for browser, script loading is asynchronous and so other groups of people propose different styles target for browser-side JS loading.</p>
<p><a href="http://www.requirejs.org/" target="_blank" rel="external">RequireJS</a> is the representative for AMD style.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>{</div><div class="line">  a.doSomething();</div><div class="line"></div><div class="line">  b.doAnotherThing();</div><div class="line">}]);</div></pre></td></tr></table></figure>

<p><a href="http://seajs.org/docs/en.html" target="_blank" rel="external">sea.js</a> is the representative for CMD style.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span><span class="params">(require, exports, module)</span>) </span>{</div><div class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>);</div><div class="line">  a.doSomething();</div><div class="line"></div><div class="line">  <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'b'</span>);</div><div class="line">  b.doAnotherThing();</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="ES6">ES6</h3>
<p>The latest ECMAScript 6 standard has below syntax.  However, this is not supported in most of the JS execution environment yet.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// xxx.js</span></div><div class="line">export <span class="keyword">default</span> xxx;</div><div class="line"></div><div class="line"><span class="comment">// yyy.js</span></div><div class="line">import xxx from <span class="string">'./xxx'</span>;</div></pre></td></tr></table></figure>

<h3 id="My_strategy">My strategy</h3>
<p>About 2 years ago, I wrote an article “<a href="http://www.thinkingincrowd.me/2013/04/13/share-code-between-nodejs-and-browser/" target="_blank" rel="external">Share code between Node.js and browser</a>“ about this topic already.  At that time, I explain why I decided to choose to write the code in Node.js style and then use tools like <a href="https://github.com/substack/node-browserify" target="_blank" rel="external">browserify</a> (Now we has Webpack too) to do the bundling for browser.  I still consider my choice is the right way to go.  </p>
<p>Now I just changed to <strong>write all JavaScript in ES6 format no matter for browser-side or server-side</strong>, then do the bundling for browser.  This choice enables me to have consistent coding style regardless which environment it’s targeted to.  One more reason for me to abandon the hassle introduced from AMD or CMD is that when the HTTP2 era comes, I have no need to do the bundling anymore and just have to skip this step without changing any code.</p>
<p>But browser doesn’t support ES6 syntax now.  No worry, you should use a transpiler.  Checkout my article <a href="http://www.thinkingincrowd.me/2015/12/26/TypeScript-vs-Babel/" target="_blank" rel="external">TypeScript vs Babel</a> if you know nothing about it.</p>
<h2 id="Bundling">Bundling</h2>
<p>To me, <strong>The No. 1 principle of bundling is <a href="https://en.wikipedia.org/wiki/Single_Source_of_Truth" target="_blank" rel="external">Single Source of Truth</a></strong>.</p>
<p>How is that?  Normally, we need to have some configuration to define a bundle name and file selectors to decide what files to be included in the bundle, like the <a href="https://jawr.java.net/" target="_blank" rel="external">JAWR</a> used in my company.  It is really ugly and error-prone.</p>
<p>Now, if we make use of the modulization and control the dependency through ES6 <code>import</code> and <code>export</code>, then we can base on this relationship to control the bundling as well.  What we need to do is to specify a bootstrap JS file as entry point and let the tools to figure out all dependencies to be included.  No other configuration should be needed unless special requirement is raised, such as bundle splitting for lazy load, etc.  </p>
<p>Hence, <strong>the dependency specified in the source code itself should be the only single truth</strong>.  </p>
<h3 id="TypeScript_config_&amp;_folder_structure">TypeScript config &amp; folder structure</h3>
<p>Sample <code>tsconfig.json</code> setting is as below which compiles all TypeScript source to be compatible with ES5 standard and use CommonJS style for module usage.  Folder structure is simply separated to <code>common</code>, <code>client</code> and <code>server</code> for illustrating purpose.  You can further arrange based on your preference.  </p>
<p>The compiled source is output to <code>build</code> directory and retains the original folder structure.</p>
<p><img alt="Source Folder Structure" src="http://77g8zm.com1.z0.glb.clouddn.com/js_typescript_folder_structure.png" style="position: relative; float: right; margin-left: 5px; border: 0px; padding: 0px;"></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">  "<span class="attribute">compilerOptions</span>": <span class="value">{</span></div><div class="line">    "<span class="attribute">target</span>": <span class="value"><span class="string">"es5"</span></span>,</div><div class="line">    "<span class="attribute">module</span>": <span class="value"><span class="string">"commonjs"</span></span>,</div><div class="line">    "<span class="attribute">outDir</span>": <span class="value"><span class="string">"build"</span></span></div><div class="line">  },</div><div class="line">  "<span class="attribute">exclude</span>": <span class="value">[</span></div><div class="line">    <span class="string">"node_modules"</span>,</div><div class="line">    <span class="string">"dist"</span>,</div><div class="line">    <span class="string">"build"</span></div><div class="line">  ]</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="Webpack_integration">Webpack integration</h3>
<p>When integrating Webpack with TypeScript support, we need to use <code>ts-loader</code> to compile the <code>.ts</code> file.  Sample <code>webpack.config.js</code> is as below when I am testing to bundle the client-side JavaScript for browser usage:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>),</div><div class="line">    path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = {</div><div class="line">    context: __dirname + <span class="string">'/src'</span>,</div><div class="line">    entry: {</div><div class="line">      index: <span class="string">'./client/index'</span></div><div class="line">    },</div><div class="line">    output: {</div><div class="line">        path: __dirname + <span class="string">'/dist'</span>,</div><div class="line">        publicPath: <span class="string">'/'</span>,</div><div class="line">        filename: <span class="string">'[name].bundle.js'</span></div><div class="line">    },</div><div class="line">    resolve: {</div><div class="line">      root: __dirname,</div><div class="line">      extensions: [<span class="string">''</span>, <span class="string">'.ts'</span>, <span class="string">'.js'</span>]</div><div class="line">    },</div><div class="line">    <span class="built_in">module</span>: {</div><div class="line">      loaders: [</div><div class="line">        { test: <span class="regexp">/\.ts$/</span>, loaders: [<span class="string">'ts-loader'</span>], exclude: <span class="regexp">/node_modules/</span> }</div><div class="line">      ]</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>There are two issues discovered after the testing:</p>
<ul>
<li>Any compile warning can possibly block the webpack build process.  To fix this, we can add a <code>ts</code> config in webpack and ignore some particular errors.  </li>
</ul>
<p><img src="http://77g8zm.com1.z0.glb.clouddn.com/js_typescript_error.png" alt="TypeScript Warning"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = {</div><div class="line">  ts: {</div><div class="line">    ignoreDiagnostics: [<span class="number">2339</span>]</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>Normally, we only need to bundle the code for browser, so the webpack <code>entry</code> only specify entries for client-side script.  Even though the <code>ts-loader</code> still use the <code>tsconfig.json</code> to compile all TypeScript, the compiled TypeScript is not output to the <code>outDir</code> specified in <code>tsconfig.json</code> and so the server-side TypeScript is not compiled to JavaScript.  Then how can Node.js use the TypeScript then?  </li>
</ul>
<p>There is one approach to use <a href="https://github.com/theblacksmith/typescript-require" target="_blank" rel="external">typescript-require</a> extension and put <code>require(‘typescript-require’);</code> to the bootstrap entry js executed by Node.js, <code>.ts</code> module can be loaded just like the <code>.js</code> module.</p>
<p>However, I don’t want to go with it because it introduces some exception (Entry <code>.js</code> file for Node.js and this special extension).  I still want all TypeScript source be compiled out to a build folder with exact folder structure.</p>
<h3 id="Gulp_Integration">Gulp Integration</h3>
<p>I have to bring in Gulp to control the process instead.  First compiles all TypeScript and then calls Webpack to do the bundling by pointing to the <code>build</code> folder instead of original <code>src</code> folder.  Hence, <code>ts-loader</code> in <code>webpack.config.js</code> is not necessary anymore.</p>
<p><code>gulpfile.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'./gulp'</span>);</div></pre></td></tr></table></figure>

<p><code>index.js</code> under gulp folder.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'./typescript'</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">'./webpack'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'typescript'</span>, <span class="string">'webpack'</span>]);</div></pre></td></tr></table></figure>

<p><code>typescript.js</code> under gulp folder.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> ts = <span class="built_in">require</span>(<span class="string">'gulp-typescript'</span>);</div><div class="line"><span class="keyword">var</span> tsconfig = <span class="built_in">require</span>(process.cwd() + <span class="string">'/tsconfig.json'</span>);</div><div class="line"><span class="keyword">var</span> tsProject = ts.createProject(<span class="string">'tsconfig.json'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'typescript'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="keyword">var</span> tsResult = tsProject.src() <span class="comment">// instead of gulp.src(...) </span></div><div class="line">    .pipe(ts(tsProject));</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> tsResult.js.pipe(gulp.dest(tsconfig.compilerOptions.outDir));</div><div class="line">});</div></pre></td></tr></table></figure>

<p><code>webpack.js</code> under gulp folder.  To be aware that the <code>webpack</code> task has defined a dependency on <code>typescript</code> task so that it will waits under the <code>typescript</code> task to complete before it starts.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> gutil = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> webpackConfig = <span class="built_in">require</span>(process.cwd() + <span class="string">'/webpack.config'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'webpack'</span>, [<span class="string">'typescript'</span>], <span class="function"><span class="keyword">function</span><span class="params">(callback)</span> </span>{</div><div class="line">    <span class="comment">// run webpack</span></div><div class="line">    webpack(webpackConfig, <span class="function"><span class="keyword">function</span><span class="params">(err, stats)</span> </span>{</div><div class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> gutil.PluginError(<span class="string">'webpack'</span>, err);</div><div class="line">        gutil.log(<span class="string">'[webpack]'</span>, stats.toString({</div><div class="line">            <span class="comment">// output options</span></div><div class="line">        }));</div><div class="line">        callback();</div><div class="line">    });</div><div class="line">});</div></pre></td></tr></table></figure>

<p>The execution is as below.</p>
<p><img src="http://77g8zm.com1.z0.glb.clouddn.com/js_webpack_gulp.png" alt="Gulp and Webpack"></p>
<p>Till now, you should have basic idea on how to work with TypeScript and Webpack for JavaScript full stack project.  But there is one more thing, how about CSS?  Can it be the same?</p>
<h3 id="CSS_dependency">CSS dependency</h3>
<p>For example, my app uses AngularJS and Bootstrap and I want to include them all like below.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// &lt;reference path="typings/angularjs/angular.d.ts" /&gt;</span></div><div class="line"><span class="comment">// &lt;reference path="typings/angularjs/angular-route.d.ts" /&gt;</span></div><div class="line"></div><div class="line">import <span class="string">'angular'</span>;</div><div class="line">import <span class="string">'angular-route'</span>;</div><div class="line">import <span class="string">'angular-ui-bootstrap'</span>;</div><div class="line">import <span class="string">'bootstrap.css'</span>;</div></pre></td></tr></table></figure>

<p>How can I setup the Webpack and bundle all dependencies?  Here is the complete <code>webpack.config.js</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>),</div><div class="line">    ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>),</div><div class="line">    HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>),</div><div class="line">    path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = {</div><div class="line">    context: __dirname + <span class="string">'/build/src'</span>,</div><div class="line">    entry: {</div><div class="line">      index: <span class="string">'./client/index'</span></div><div class="line">    },</div><div class="line">    output: {</div><div class="line">        path: __dirname + <span class="string">'/dist'</span>,</div><div class="line">        publicPath: <span class="string">'/'</span>,</div><div class="line">        filename: <span class="string">'[name].bundle.js'</span></div><div class="line">    },</div><div class="line">    resolve: {</div><div class="line">      alias: {</div><div class="line">        <span class="string">'bootstrap.css'</span>: path.join(__dirname, <span class="string">'/node_modules/bootstrap/dist/css/bootstrap.min.css'</span>)</div><div class="line">      },</div><div class="line">      root: __dirname,</div><div class="line">      extensions: [<span class="string">''</span>, <span class="string">'.css'</span>, <span class="string">'.js'</span>]</div><div class="line">    },</div><div class="line">    <span class="built_in">module</span>: {</div><div class="line">      loaders: [</div><div class="line">        {</div><div class="line">            test: <span class="regexp">/\.(eot|woff|woff2|ttf|svg|png|jpg)$/</span>,</div><div class="line">            loader: <span class="built_in">require</span>.resolve(<span class="string">"url-loader"</span>) + <span class="string">'?name=[name]-[hash].[ext]'</span></div><div class="line">        }</div><div class="line">        , { test: <span class="regexp">/\.css$/</span>, loader: ExtractTextPlugin.extract(<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>) }</div><div class="line">      ]</div><div class="line">    },</div><div class="line">    plugins: [</div><div class="line">      <span class="keyword">new</span> HtmlWebpackPlugin({</div><div class="line">        inject: <span class="literal">true</span>,</div><div class="line">        template: <span class="string">'./src/client/index.html'</span>,</div><div class="line">        chunks: [<span class="string">'index'</span>]</div><div class="line">      })</div><div class="line">      , <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].css'</span>, {</div><div class="line">        allChunks: <span class="literal">true</span></div><div class="line">      })</div><div class="line">    ]</div><div class="line">}</div></pre></td></tr></table></figure>

<p>There are couples of setting took me a while to figure out.</p>
<ol>
<li><p><code>alias</code> for <code>bootstrap.css</code> is necessary so that it can be correctly resolved.  </p>
</li>
<li><p>Without the <code>require.resolve(&quot;url-loader&quot;)</code>, when parsing the CSS file, it complaints <code>Cannot resolve module &#39;url-loader&#39;</code>.  </p>
</li>
<li><p><code>ExtractTextPlugin</code> is used to output the CSS as a separated file instead of being embedded in the bundled JS and dynamically generated as a <code>&lt;style&gt;</code> tag in HTML file during page load.</p>
</li>
<li><p><code>HtmlWebpackPlugin</code> is used to automatically inject the generated CSS and JS files into the appropriate location in the entry HTML file as below.</p>
</li>
</ol>
<p><img src="http://77g8zm.com1.z0.glb.clouddn.com/js_webpack_gulp_final_result.png" alt="Final HTML result"></p>
<p>I haven’t talked about how to include internal CSS or HTML yet.  However, I think you can figure out yourself based on the sample and strategy described here.  </p>
]]></content>
    
    
      <category term="Javascript" scheme="http://www.thinkingincrowd.me/tags/Javascript/"/>
    
      <category term="TypeScript" scheme="http://www.thinkingincrowd.me/tags/TypeScript/"/>
    
      <category term="AngularJS" scheme="http://www.thinkingincrowd.me/tags/AngularJS/"/>
    
      <category term="Webpack" scheme="http://www.thinkingincrowd.me/tags/Webpack/"/>
    
      <category term="browserify" scheme="http://www.thinkingincrowd.me/tags/browserify/"/>
    
      <category term="bundling" scheme="http://www.thinkingincrowd.me/tags/bundling/"/>
    
      <category term="CSS" scheme="http://www.thinkingincrowd.me/tags/CSS/"/>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Sword/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 Retrospect and 2016 Goal Setting]]></title>
    <link href="http://www.thinkingincrowd.me/2015/12/31/2015-retrospect-and-2016-goal-setting/"/>
    <id>http://www.thinkingincrowd.me/2015/12/31/2015-retrospect-and-2016-goal-setting/</id>
    <published>2015-12-31T15:50:00.000Z</published>
    <updated>2015-12-31T15:51:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="总结">总结</h2>
<h3 id="个人学习">个人学习</h3>
<p>花费了一年半多的时间，终于把 <a href="https://www.coursera.org/" target="_blank" rel="external">Coursera</a> 上的 <a href="https://www.coursera.org/specialization/jhudatascience/1" target="_blank" rel="external">Data Science</a> 学完了。不过，断断续续的，其实有些内容掌握得并不好，Statistical Inference 和 Regression Model 有些都不太记得了。不过，这次学习也大概知道数据分析干的是什么事情，以后有需要再深入也容易些。最近有些项目要做一些数据分析，也练了一下手。反正有了些基础知识，后面什么时候有需要都可以拿来再深入使用。</p>
<p>因为主要精力花在这个课程上面，写代码的时间少了。本来说要做的 Kanban 系统，中间也放下了。靠近年尾，团队里面开展 MEAN Stack 方面技术的自学。所以，我也重新捡回来，带他们一起去学，给他们一些意见。既然 Data Science 上完了，我的重心也可以放回来这边了。感觉自己还是更喜欢写代码多一些。回头把之前做了一点的 Kanban 系统用 TypeScript 重写和 Webpack 把构建流程完善一下。有兴趣的小伙伴可以联系我。</p>
<h3 id="工作">工作</h3>
<p>没什么特别好说的。过去一段时间，我花了不少精力带人。团队里面，带新人最多的应该是我了。感觉这方面自己还是做得还行的。至少我是一个很乐意分享和教别人的一个人。可惜我带的人像走马观花一样，时间都不是很长，要么他们换小组了，要么我换项目了。不过，我还是会尽量最好一个 Leader。明年从各方位带领身边的小伙伴学习，无论什么方面。现在我都教起粤语来了。</p>
<h3 id="时间安排">时间安排</h3>
<p>这个没什么好说的了。就像笑来老师说的，我们从来就不应该管理时间，而应该是管理自己。看了他介绍的<a href="http://www.amazon.cn/%E5%A5%87%E7%89%B9%E7%9A%84%E4%B8%80%E7%94%9F-%E6%9F%B3%E6%AF%94%E6%AD%87%E5%A4%AB%E5%9D%9A%E6%8C%8156%E5%B9%B4%E7%9A%84-%E6%A0%BC%E6%8B%89%E5%AE%81/dp/B00FYHDY1G" target="_blank" rel="external">《奇特的一生》</a>那本书，柳比歇夫的<strong>”时间统计法“</strong>真是让人叹为观止。我试着记录了几天，经常开始做一件事情前忘记开始记录，或者不记得停止上一个手上的事情再开始下一个。不知道有什么好方法能够养成这样的习惯，好像有点反人类。还是坚持下去摸索一下怎么做才好。</p>
<h3 id="善事">善事</h3>
<p>今年的最后一天，我还没有做年终总结，联合国儿童基金会就帮我做了一点，寄了几张月捐证书什么的。没想到已经 3 年了。</p>
<p><img alt="UNICEF" src="http://77g8zm.com1.z0.glb.clouddn.com/unicef_certificate.jpg?imageView/2/w/400"></p>
<h2 id="展望">展望</h2>
<p>具体没什么好写的。主要是下面几条原则和两本书：</p>
<p><a href="http://www.amazon.com/How-Read-Book-Intelligent-Touchstone/dp/0671212095" target="_blank" rel="external">How to Read a Book: The Classic Guide to Intelligent Reading</a><br><a href="http://www.amazon.com/Beyond-Feelings-Guide-Critical-Thinking-ebook/dp/B005K24AY0" target="_blank" rel="external">Beyond Feelings: A Guide to Critical Thinking</a>  </p>
<ol>
<li><strong>管理好自己</strong></li>
<li><strong>做了再说</strong>  </li>
<li><strong>学习学习再学习</strong></li>
<li><strong>锻炼身体</strong></li>
<li><strong>分享（博客，公众号，…）</strong></li>
</ol>
<p>学习和成长真的就是一个人不断磨练的过程，所以加入了笑来老师的《七年》和池建强老师的《攻城狮之路》那个群。希望 2018 年，也就是我的下一个七年，能有一些较明显的转变。</p>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Goal" scheme="http://www.thinkingincrowd.me/tags/Goal/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeScript vs Babel]]></title>
    <link href="http://www.thinkingincrowd.me/2015/12/26/TypeScript-vs-Babel/"/>
    <id>http://www.thinkingincrowd.me/2015/12/26/TypeScript-vs-Babel/</id>
    <published>2015-12-26T10:38:00.000Z</published>
    <updated>2015-12-31T00:09:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Transpiler_or_not?">Transpiler or not?</h2>
<p>Before discussing TypeScript and Babel, what we need to decide is <strong>whether to use a transpiler or not</strong>.</p>
<p>I was once opponent on using transpiler language when I first saw CoffeeScript, ClojureScript.  I think that is purely the programmer’s ingrained habit and that is why it goes popular mostly in particular communities (e.g. Python, Ruby, Lisp).  </p>
<p>There are also other languages (e.g. GWT, Dart) that can be used for web frontend development but they don’t feel right either, not to mention other transpiler that compiles some tranditional backend language like JAVA, Ruby or Python to JavaScript.  I don’t know why such scenario exists.  Just because they don’t want to learn JavaScript?</p>
<p>However, now I am a proponent of using “advanced” language and then transpiling to raw Javascript.  The main reasons are as below:</p>
<h3 id="Catch_up_the_great_features_in_ES6_standard">Catch up the great features in ES6 standard</h3>
<p>ES6 standard includes a lot of great features while not every JS environment (Browsers, Node.js, etc.) supports them well and consistently.  It’s a huge benefit if the code can be written in latest standard once and reusabled in every JS environment especially working in full stack JS project.</p>
<p>Transpiler can address this issue pretty well.</p>
<h3 id="Unevitable_build_stage">Unevitable build stage</h3>
<p>Another reason I oppose transpiler before is the worry on the quality &amp; readability of the code transpiled and the hassle of adding unnecessary build stages.</p>
<p>But now, modulization, code sharing between browser and backend, bundling require a build stage anyway.  What is more, there are plenty of solutions to realize code hot-reload to greatly streamline development process already.  Hence, adding transpilation step is not a problem anymore.</p>
<h3 id="Code_written_in_TypeScript_and_Babel_IS_standard_Javascript">Code written in TypeScript and Babel IS standard Javascript</h3>
<p>With Babel, you just use any new feature it supports in JavaScript way.</p>
<p>TypeScript is so called a typed superset of JavaScript.  In theory, any existing JavaScript can be processed by TypeScript after renaming <code>.js</code> to <code>.ts</code> directly.  Although actually some edge cases disobey this rule, it’s easy to identify and fix.</p>
<p>Using TypeScript and Babel for transpilation differs from CoffeeScript and other alternatives.  We are actually writing the future JavaScript for the moment.  Enjoy it.</p>
<h2 id="TypeScript_vs_Babel">TypeScript vs Babel</h2>
<h3 id="ES6_new_feature_support">ES6 new feature support</h3>
<p>Please go check ECMAScript 6 compatibility <a href="https://kangax.github.io/compat-table/es6/" target="_blank" rel="external">table</a>.  In general, TypeScript support on new ES6 feature cannot catch up Babel.  If you have big concern on this, the only option is Babel.</p>
<h3 id="Transpiled_code_readability">Transpiled code readability</h3>
<p>Refering to a simple class defined as below.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Greeter {</div><div class="line">  greeting: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">  <span class="constructor"><span class="keyword">constructor</span>(message: string) </span>{</div><div class="line">    <span class="keyword">this</span>.greeting = message;</div><div class="line">  }</div><div class="line"></div><div class="line">  greet() {</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.greeting;</div><div class="line">  }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>TypeScript</strong> transpiled code is more clean, recognizable and familiar to the approach we used to define class before.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Greeter = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">Greeter</span><span class="params">(message)</span> </span>{</div><div class="line">          <span class="keyword">this</span>.greeting = message;</div><div class="line">      }</div><div class="line">      Greeter.prototype.greet = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.greeting;</div><div class="line">      };</div><div class="line">      <span class="keyword">return</span> Greeter;</div><div class="line">  })();</div></pre></td></tr></table></figure>

<p><strong>Babel</strong> transpiled result code takes advantage on using the new Object method but makes the code a little complex.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="pi">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> _createClass = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{ <span class="function"><span class="keyword">function</span> <span class="title">defineProperties</span><span class="params">(target, props)</span> </span>{ <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.length; i++) { <span class="keyword">var</span> descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || <span class="literal">false</span>; descriptor.configurable = <span class="literal">true</span>; <span class="keyword">if</span> (<span class="string">"value"</span> <span class="keyword">in</span> descriptor) descriptor.writable = <span class="literal">true</span>; <span class="built_in">Object</span>.defineProperty(target, descriptor.key, descriptor); } } <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(Constructor, protoProps, staticProps)</span> </span>{ <span class="keyword">if</span> (protoProps) defineProperties(Constructor.prototype, protoProps); <span class="keyword">if</span> (staticProps) defineProperties(Constructor, staticProps); <span class="keyword">return</span> Constructor; }; })();</div><div class="line"></div><div class="line">  <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, {</div><div class="line">    value: <span class="literal">true</span></div><div class="line">  });</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span><span class="params">(instance, Constructor)</span> </span>{ <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) { <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>); } }</div><div class="line"></div><div class="line">  <span class="keyword">var</span> Greeter = exports.Greeter = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">    <span class="comment">// transform-class-properties</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Greeter</span><span class="params">(message)</span> </span>{</div><div class="line">      _classCallCheck(<span class="keyword">this</span>, Greeter);</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.greeting = message;</div><div class="line">    }</div><div class="line"></div><div class="line">    _createClass(Greeter, [{</div><div class="line">      key: <span class="string">'greet'</span>,</div><div class="line">      value: <span class="function"><span class="keyword">function</span> <span class="title">greet</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.greeting;</div><div class="line">      }</div><div class="line">    }]);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Greeter;</div><div class="line">  })();</div></pre></td></tr></table></figure>

<h3 id="Module">Module</h3>
<p>In ES6, it is exactly one module per file and one file per module.  <code>import</code> and <code>export</code> keyword are used to reference other modules or publish its own API.</p>
<p>Babel exactly supports same syntax and can transpile to CommonJS, AMD and other style.</p>
<p>In TypeScript, there are two different concepts:</p>
<ol>
<li>Internal Module (Namespaces)</li>
<li>External Module</li>
</ol>
<p>I don’t want to go to the extent of explaining the difference of them.  If you really want to know about it, you can check it out in the TypeScript <a href="http://www.typescriptlang.org/Handbook#modules" target="_blank" rel="external">handbook</a>.  The external one is just like the ES6 standard.</p>
<p>What you must know is that, <strong>DON’T mix them together</strong>.  And you should have <strong>NO CHOICE but to use the external module</strong>.  However, if you are telling me you don’t have to use any 3rd-party library, then you can go with the internal one.</p>
<p><a href="https://www.stevefenton.co.uk/2015/05/Stop-Mixing-TypeScript-Internal-And-External-Modules/" target="_blank" rel="external">https://www.stevefenton.co.uk/2015/05/Stop-Mixing-TypeScript-Internal-And-External-Modules/</a></p>
<p>Some usage syntax of external module used in TypeScript are as below for backwards compatibility with CommonJS and AMD style modules:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// xxx.js</span></div><div class="line"><span class="keyword">export</span> = xxx;</div><div class="line"></div><div class="line"><span class="comment">// yyy.js</span></div><div class="line"><span class="keyword">import</span> xxx = <span class="built_in">require</span>(<span class="string">'./xxx'</span>);</div></pre></td></tr></table></figure>

<p>However, above usage should be legacy soon.  In order to take advantage of ES6 and write uniform code, I think it’s better to use the exact ES6 syntax instead.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// xxx.js</span></div><div class="line">export <span class="keyword">default</span> xxx;</div><div class="line"></div><div class="line"><span class="comment">// yyy.js</span></div><div class="line"><span class="keyword">import</span> xxx <span class="keyword">from</span> <span class="string">'./xxx'</span>;</div></pre></td></tr></table></figure>

<h3 id="Type_and_IDE_support">Type and IDE support</h3>
<p><strong>TypeScript</strong></p>
<p>As JSer, I once believed that type and compiler support are not so much important.  I might also be one of the main reason that people thinks it’s flexible and love it.  However, quality control is really not that easy if the codebase is large and many people involved, especially when it’s used heavily in system with complex business logic like ERP while no Unit Test exists.  If we can have type support and compilation checking with little cost, it should be worthy.</p>
<p>Type support is the first principle in TypeScript and you can tell from its definition of position (typed supperset of JavaScript).  What is more, the <a href="http://definitelytyped.org/" target="_blank" rel="external">DefinitelyTyped</a> project provides type support on many existing 3rd-party JavaScript libraries.  It seems the whole JavaScript world supports type suddently and you don’t need to start from scratch.</p>
<p>Let’s use Sublime Text 3 with TypeScript plugin as an example to see how it’s working.  </p>
<p><strong>Install TypeScript &amp; Definition manager</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> -g typescript tsd</span></div><div class="line">tsd <span class="keyword">install</span> angular angular-route</div></pre></td></tr></table></figure>

<p>After the installation completes, there is a <code>typings</code> folder generated under the location you execute <code>tsd</code> command.  The definition files are located there and refering these definition files in your JavaScript is very simple.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// &lt;reference path="typings/angularjs/angular.d.ts" /&gt;</span></div><div class="line"><span class="comment">// &lt;reference path="typings/angularjs/angular-route.d.ts" /&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">'angular'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'angular-route'</span>;</div></pre></td></tr></table></figure>

<p><strong>Code Tips and auto-complete</strong></p>
<p><img alt="Code Tips" src="http://77g8zm.com1.z0.glb.clouddn.com/TypeScript-Code-Tips.png"></p>
<p><strong>Jump to definition and many support shortcuts</strong></p>
<p><img alt="Plugin-Features" src="http://77g8zm.com1.z0.glb.clouddn.com/TypeScript-Plugin-Features.png"></p>
<p><strong>Warning about missing properties</strong></p>
<p><code>Show Error List</code> shows all error in your project.  </p>
<p><img alt="Miss-Properties-1" src="http://77g8zm.com1.z0.glb.clouddn.com/TypeScript-Warn-Miss-Properties1.png"></p>
<p><img alt="Miss-Properties-2" src="http://77g8zm.com1.z0.glb.clouddn.com/TypeScript-Warn-Miss-Properties2.png"></p>
<p><strong>Warning about incorrect function signature</strong></p>
<p>Status bar shows the error focusing on.</p>
<p><img alt="Unmatch-Interface" src="http://77g8zm.com1.z0.glb.clouddn.com/TypeScript-Warn-Interface.png"></p>
<p><strong>Warn but not block</strong></p>
<p>When you compiles the TypeScript to normal JavaScript, it warns but not blocks on code generation by default.  This is great because it allows for gradual evolvement after you mass renaming <code>.js</code> file to <code>.ts</code> format for the transition.</p>
<p><img alt="Warn-Not-Block" src="http://77g8zm.com1.z0.glb.clouddn.com/TypeScript-Warn-Not-Block.png"></p>
<p>So far, you have a glimpse on how fascinating the IDE support is for TypeScript.  I haven’t tried the famous Webstorm and Visual Studio, but they should have great support as well.</p>
<p><strong>Babel</strong></p>
<p>There is a project called <a href="http://flowtype.org/" target="_blank" rel="external">Flow</a> for type support in Babel.  However, it doesn’t support Windows environment yet.  It also have no support for <a href="http://definitelytyped.org/" target="_blank" rel="external">DefinitelyTyped</a> project yet although it [plans][] to.</p>
<p>For IDE, Sublime’s Flow plugin doesn’t seem to have much feature.  Facebook has built an IDE called <a href="http://nuclide.io/" target="_blank" rel="external">Nuclide</a> as suite of packages on top of Atom.  From my experience, installing <a href="http://nuclide.io/" target="_blank" rel="external">Nuclide</a> packages is very slow and causes the Atom to halt with high CPU.  I have to give it up in Mac.  You may have a try though.</p>
<h2 id="Conclusion">Conclusion</h2>
<p><img alt="TypeScript_Babel_Decision" src="http://77g8zm.com1.z0.glb.clouddn.com/TypeScript_Babel_Decision.png"></p>
<p>Above sudo code is just for funny purpose.  It’s really a choice of taste and there is no aboslute right or wrong for the selection.  Actually, there are other things to consider as well.  Which works better with Webpack and Node.js?  How to fit into the build process?  I will illustrate these areas’ consideration in another article later.  </p>
<p>For me, I decided to take the shot for TypeScript because I evaluated that type support is more important than purely pursuing edge feature support and it has great IDE support.  What is more, AngularJS 2 are written with it.  They are my best bet for future.</p>
]]></content>
    
    
      <category term="Javascript" scheme="http://www.thinkingincrowd.me/tags/Javascript/"/>
    
      <category term="TypeScript" scheme="http://www.thinkingincrowd.me/tags/TypeScript/"/>
    
      <category term="Babel" scheme="http://www.thinkingincrowd.me/tags/Babel/"/>
    
      <category term="ES6" scheme="http://www.thinkingincrowd.me/tags/ES6/"/>
    
      <category term="Sword" scheme="http://www.thinkingincrowd.me/categories/Sword/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Sword/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dive into Kanban (6) - Scrum vs Kanban]]></title>
    <link href="http://www.thinkingincrowd.me/2015/10/08/Dive-into-Kanban-6-Scrum-vs-Kanban/"/>
    <id>http://www.thinkingincrowd.me/2015/10/08/Dive-into-Kanban-6-Scrum-vs-Kanban/</id>
    <published>2015-10-08T13:47:57.000Z</published>
    <updated>2015-12-21T09:18:03.000Z</updated>
    <content type="html"><![CDATA[<p>As a Kanban fan, I attended a Scrum-Master training organized by the company.  This is a good chance for me to know Scrum more from an experienced person beside reading books, blogs or other documentations.  </p>
<p>Here I will try to compare some core concept in Scrum with the same or similar idea in Kanban.  </p>
<h2 id="Timebox">Timebox</h2>
<p>Timebox is important in Scrum.  Sprint is the crucial one which is normally 2 ~ 4 weeks.  It’s used to control pacing for delivering usable feature instead of mockup or prototype.  </p>
<p>There is NO prescribed Timebox in Kanban.  Kanban can have different Cadence for Replenishment and Delivery.  What is more, it can be on demand like release whenever there is something useful for users.  </p>
<h3 id="Pressure_&amp;_Goal">Pressure &amp; Goal</h3>
<p>From my perspective, the most important benefit or purpose of the Timebox is the pressure &amp; goal it imposed.  The whole team is driven by a hard deadline limitation &amp; commitment to plan &amp; deliver.  This can provide a shared goal &amp; understanding to the whole team.  </p>
<p>This sounds like deadline driven and many people don’t like it.  But I think what we hate is that the deadline is unreasonably set by some managers regardless of the task difficulty and reality.  The Scrum Timebox is not that kind of a thing.  It’s fixed for steady pacing and the team control what items are included in one Sprint.  Commitment is made by the team together.  </p>
<p>In Kanban, The steady pacing is controlled by WIP.  It makes sure everyone can try to focus on one item at at time and reduce multi-tasking.  For the pressure &amp; goal, there is no explicit thing imposed in Kanban.  It’s not so obvious but it exists when you really pay attention on the flow effeciency of the item.  This can be a good thing or bad depending on the preference &amp; maturity of the team.  </p>
<h3 id="Evil_of_endless_item_splitting">Evil of endless item splitting</h3>
<p>Many people don’t quite agree on such rude approach when fitting an item in a box, because cases happen that some team end up splitting the backlog item into finest level as technical items because it is too big to fit into a desired sprint Timebox.  Hence, they argue that the Timebox approach causes the undesired consequence.  </p>
<p>However, before blaming on it, we should know that:  </p>
<ol>
<li><p>Reducing the length of Timebox is NOT the goal of agility  </p>
<p>We should not merely pursue the goal of reducing length of Timebox in order to prove that we are more agile than before.  There is always a boundary or limitation for your business.  Too short Timebox can also introduce overhead.  Length of the Timebox should be chosen depending on how often we want and actually can deliver belancing the cost it takes.  It’s not by merely using item splitting to reduce the timebox while it might need some other technical breakthrough, like introducing the automatic testing.  </p>
</li>
<li><p>No matter use Scrum or Kanban, to be agile, we always want to split the item as small as possible but still should be a usable unit for user to perform testing.  </p>
<p>The purpose for this is to let user validate the output as soon as possible and get feedback.  Make the item to be small shorten the feedback loop.  Don’t split just for fitting into something.  Also, item splitting is not purely development team’s decision and it also need PO’s contribution.  </p>
<p>In an ERP system, to implement a form containing 1000 fields in 5 tabs, is it acceptable to incrementally implement tab by tab or even section by section in one tab?  The strategy might also be different between developing a new product and doing a migration project.  For migration project, to the user, only when the new system that fully provide what old system has, the new system can be regarded as usable and can replace the old one.  During development phase, PO needs to align with user to accept “incrementally growing” version and do UAT gradually as well.  Of course, how development team guarantee that the new feature doesn’t break the old one is also a huge challenge.</p>
</li>
<li><p>Just let it be if the item really cannot be further broken down.  </p>
<p>It happens and also some workable units are still not releasable from business perspective.  Then we have to disable the function or rollback the change.  The process is the same when things go wrong that originally planned item cannot be completed within Sprint.  The challenge here is not using Scrum or Kanban.  It’s whether and how the Source Code Management, Testing &amp; Release process supports these kinds of scenarios.  If we have technical level support here, we can more easily balance the Timebox length and item size or take the more flexible and on-demand delivery approach without the restriction of Timebox.  </p>
</li>
</ol>
<h2 id="Roles">Roles</h2>
<p>Roles are defined in Scrum and not particularly mentioned in Kanban.  And one of opinion in the Kanban is that because no role or job title changed or external role introduced, resistance of change from management or employees should be minimal. But is that means that Kanban doesn’t have any of the role defined in Scrum?</p>
<h3 id="Product_Owner">Product Owner</h3>
<p>No matter what agile methodology or old-fashion water-fall, we always want and need to have PO.  This role is very important and makes final decision on Product, including requirement, priority, scope, etc.  Especially when a Kanban board serves multiple Product, it even requires to involve multiple PO to have alignment on item priority as well.  </p>
<h3 id="Team">Team</h3>
<p>In Scrum, it emphasizes that the team is cross-functional and should be responsible for development, testing, release and anything required for delivering the usable features after each Sprint.  When all things are controlled within one team, for sure life is easier.  </p>
<p>However, traditional organization structure might breakdown the team by speicialty, like development team, testing team, UI/UX team, Release team, Infrastructure team, etc.  When this kind of company need to introduce Scrum into their development process, it requires to do structural change.  Without structure change, it does not work.  </p>
<p>How does Kanban Team looks like then?  How to define starting &amp; ending stage in a Kanban board?  How many team or different parties involved?</p>
<p>One of the selling point in Kanban is that it doesn’t require the company to do structural change.  The essence of Kanban is to change as little as possible, visualize the existing development process and map the value stream instead of introducing any imaginary ideal process or borrowing one from external success story.  Sounds very promising, right?  </p>
<p>There are pros and cons of it.</p>
<p>To define the start and end point for the Kanban board, David mentioned in his <a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402" target="_blank" rel="external">book</a>:  </p>
<blockquote>
<p>Successful teams have tended to stick to adopting workflow visualization with cards and limiting WIP within their own political sphere of control, and negotiating a new way of interacting with immediate upstream and downstream partners.</p>
</blockquote>
<p>For example, when initially adopt Kanban within development team, the start and end point can only cover the development stages, because upstream who provides requirement and downstream who provides testing services are not in control.  So in this case, there is just one team involved here.  </p>
<p>Because the team doing Kanban might not necessary controls the item flow from end to end, it might be more difficult to become real agile from the considering from the whole business flow.  For example, when controlling the WIP at the first stage of Kanban board, the development manager must have agreement with PO.  What is more, chance of the improvement area is to block PO from sending urgent requests from time to time which interrupts the normal development flow and affects quality.  If development manager has less political power than PO and PO doesn’t realize the agility of the company needs his own improvement, it’s difficult for the whole company to become agile.  Power from higher level’s is required then.  </p>
<p>The structure of the team in Kanban depends on the flow visualized in Kanban.  It can be as narrowed as only one development team, or cross department.  Hence, this requires full cooperation from upstream and downstream and the person who introduces Kanban need to have great ability to influence them.  The other side, the person who introduces Scrum most likely has political power and ambition to do the structure change to break down the barriers already.  </p>
<p>Hence, knowing what is in front is important before choosing the radical way of Scrum to reorganize the company structure or the incremental way of Kanban to influence upstream and downstream.  </p>
<p>No matter which way to choose, management must have the ability to drive change among teams or departments.  It’s not just simply adopting a process by following rules and then hoping the company becomes agile one day.  The training on Kanban and Scrum actually should be more on the management level to understand the prerequisite instead of the team to understand the process concept.  It’s more like the growing a culture.</p>
<h3 id="Scrum_Master">Scrum Master</h3>
<p>I heard a special saying that “Actively doing nothing”.  A Scrum Master should be just like a Sheep Dog or Coach who actively do nothing on the team.  </p>
<p>In Kanban, there is no such role because it encourages that everyone involved in the Kanban process looks for the bottleneck and area to improve because everything is transparent and reflected on the board.  </p>
<p>One question may arise that if one day the team can do Scrum very well and nothing needs Scrum Master to coach, will the Scrum Master role be redundant?  </p>
<p>I think the existence of this role depends on whether you think a dedicated facilitator, coach, issue spotter or change driver is required.  To be honest, I think the Kanban way is the ideal situation to pursue because to stay agile, everyone in the team must have agile thinking and culture.  But that is really not easy and sometimes an outsider can more easily facilitate necessary Kanban activities, spot out the problems in the process.  Sometimes we need a neutral judge on the conflict or need a coach because we don’t know the unknown.  </p>
<p>Lately, I am more inclined to have a dedicated “Kanban Master”.</p>
<h2 id="Work_Item_Restriction">Work Item Restriction</h2>
<p>Scrum limits total items committed by the team at the beginning of the Sprint.  When there is a change requested from PO, normally it should be planned on next Sprint.  </p>
<p>Kanban limits the WIP per workflow state.  When upstream wants to introduce urgent item, it’s OK to accept but required to pull out another one if the WIP limit is reached.  And there must be consensus that the lead time of that item will be enlarged.  </p>
<p>Different business model might be suited for different methods or use both in a combination way.  For purely new product development, Scrum and Kanban should be both fine.  But if the team is both developing new product or feature and also need to handle urgent production support, Kanban might be more suitable.  Taking the Scrum approach requires you to consider how the urgent issue should be handled because production urgent issue normally is not accepable to wait until next Sprint.  </p>
<h2 id="Afterword">Afterword</h2>
<p>There is a good mini-book about the difference between Scrum and Kanban in <a href="http://www.infoq.com/minibooks/kanban-scrum-minibook" target="_blank" rel="external">InfoQ</a> and I suggest you to take a look on it.  I like one statement in the foreword very much.</p>
<blockquote>
<p>these are just tools, and what you really want to do is have a full toolkit, understand the strengths and limitations of each tool and how to use them all.</p>
</blockquote>
<h3 id="Series">Series</h3>
<ul>
<li><a href="http://www.thinkingincrowd.me/2015/05/20/Dive-into-Kanban-1-What-is-it/" target="_blank" rel="external">Dive into Kanban (1) - What is it</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/30/Dive-into-Kanban-2-Visualizing-Process/" target="_blank" rel="external">Dive into Kanban (2) - Visualizing Process</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/" target="_blank" rel="external">Dive into Kanban (3) - How Kanban address the estimation headache</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/06/05/Dive-into-Kanban-4-Variability-and-Flow-Interruption/" target="_blank" rel="external">Dive into Kanban (4) - Variability and Flow Interruption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/07/23/Dive-into-Kanban-5-Difficulty-and-Resisted-Opinions-on-Adoption/" target="_blank" rel="external">Dive into Kanban (5) - Difficulty and Resisted Opinions on Adoption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/10/08/Dive-into-Kanban-6-Scrum-vs-Kanban/" target="_blank" rel="external">Dive into Kanban (6) - Scrum vs Kanban</a></li>
</ul>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Kanban" scheme="http://www.thinkingincrowd.me/tags/Kanban/"/>
    
      <category term="Scrum" scheme="http://www.thinkingincrowd.me/tags/Scrum/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dive into Kanban (5) - Difficulties and Resisted Opinions on Adoption]]></title>
    <link href="http://www.thinkingincrowd.me/2015/07/23/Dive-into-Kanban-5-Difficulty-and-Resisted-Opinions-on-Adoption/"/>
    <id>http://www.thinkingincrowd.me/2015/07/23/Dive-into-Kanban-5-Difficulty-and-Resisted-Opinions-on-Adoption/</id>
    <published>2015-07-23T13:50:49.000Z</published>
    <updated>2015-12-19T12:58:01.000Z</updated>
    <content type="html"><![CDATA[<p>As you have gone this far to know what Kanban is and the benefits it can bring, do you eagerly attempt to adopt in your team or company?  Hold on a little bit first and you should know what difficulties or resisted opinions you may encounter.  </p>
<h2 id="Management_level">Management level</h2>
<h3 id="Adoption">Adoption</h3>
<p>It’s said that Kanban can evolve from bottom to top, which means you can adopt it within the team you can control first and then gradually influence your partners or external parties.  However, this approach is still very difficult.  </p>
<p>You should have some power to say NO.  The reason is that you have to control the tasks/items pushed from the higher level or external parties.  Else, it’s difficult to setup WIP and your team can be frequently interruptted if the tasks/items arrives everywhere.  Hence, it’s better if you can leverage your tasks and resources.  </p>
<p>Do you feel desperate if you don’t have positional power or it’s hard to say no?  There is still chance.  Remember that the first step of applying Kanban is to visualize the process and showing the exact situation your team is encountering.  Hence, it’s good chance to sell the Kanban idea if there is some kind of figures can that how messy the situation is, how much effort is wasted, how many tasks per person concurrently, how many recurring blocking issues or requirement quality is not good, etc.  </p>
<h3 id="WIP_Limit">WIP Limit</h3>
<p>It’s hard to persuade the management that there is WIP limit set to the team and NO work can be accepted if resource is full.  Same as above that you can show what the current situation is and see if you can get figures that, concurrently how many tasks each member normally works on.  </p>
<p>David once shared a funny story.  He met with the development and marketing head for one of his consultation client.  Marketing head is complaining that their requests are not being served well and the lead time is too long.  The development head said that each person in his team is already handling average 7 items concurrently.  David asked the marketing head whether they think development team is already doing their best they can?  What do you think about 7 items per person?  Is it too many or too few?  The marketing head has no hesitation on expressing that 7 items per person is too many but he also thinks 1 item per person doesn’t sound realistic.  After David gradually increase the WIP, marketing head agree on around 3/4 items per person.  </p>
<p>Actually, it’s obvious and intuitive that most of the people can do one thing best without interruption and cannot do things well when multi-tasking.  Afraid of setting WIP is because management is concern on the resource utilization when there is blocking issue.  </p>
<h4 id="Supporting_arguments">Supporting arguments</h4>
<p>Once you encounter above situation, you might need some supporting theories or arguments.  </p>
<ol>
<li><p>Change from utilization to flow management.  </p>
<p> A smooth flow enables us to react and change facing the challenging reality due to the nature that development process contains many variabilities.  In parking lot, we can emphasize on utilization because there is almost no variability affecting parking space.  But on the road, we need to measure and consider how cars flow smoothly because there are too many variabilities.  Lower WIP and enabling slack, which likes limiting number of cars on the road, are ways to achieve agility.  </p>
</li>
<li><p>Multi-tasking has negative impact on quality.  </p>
<p> First, there is causation between WIP and average lead time, and the relationship is linear.  That is described by Little’s Law in Queuing Theory.  Second, there is also observation shared by David in his <a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402" target="_blank" rel="external">book</a>:  </p>
<blockquote>
<p>Longer lead times seem to be associated with significantly poorer quality. In fact, an approximately six-and-a-half times increase in average lead time resulted in a greater than 30-fold increase in initial defects. Longer average lead times result from greater amounts of work-in-progress.</p>
</blockquote>
<p> Hence, smaller WIP can bring good quality beside shorter lead time.  </p>
</li>
</ol>
<h3 id="Defer_Commitment">Defer Commitment</h3>
<p>I met one development head who shares that their boss would prefer to be told that their requests are already being taken and holding in someone’s hand even though that guy hasn’t really spent much quality of time on it.  In the end, the quality might not be good for all items and the lead time for them are all increased because the boss might check the team from time to time and interrupt their progress if he thinks his item is being accepted.  </p>
<p>Obviously, this example shows that, the management don’t understand well when it’s best for the commitment to be made.  They misunderstand that once the team is acknowledged on the tasks, they are committed to it.  I think we can take the canteen as an example.  The people who lines up are not guaranteed to be served and we obviously should not count the meal ready time starting from waiting in line.  The commitment hasn’t been made by the canteen yet.  You can complaint too many guests but not blame serving you poorly.  So, when the commitment is made by the canteen?  The time order is taken.  </p>
<p>Similarly, we should defer our commitment to the stage which indicates we really accept the item.  It should most likely be the time we pulled the item from Requirement stage to In-Dev stage.  Aligning the real starting stage of commitment can better set the expectation and ensure predictable lead time.  </p>
<h2 id="Execution_level">Execution level</h2>
<h3 id="Changing_Communication_Channel">Changing Communication Channel</h3>
<p>At the beginning stage, the behavior of the teams is still using the old habit that communicates through phone, IM or email.  Upstreams don’t create tasks through Kanban cards but offline assign them.  In this case, the communication is NOT through cards and it’s not following pull principle.  The consequence is that downstreams are kept interrupted and they actually know what they need to do without checking or updating on board.  </p>
<p>Hence, the most important thing on execution is that the whole team, especially upstream parties, should communicate with downstreams through Kanban cards and stick to the rule that tasks are pulled instead of being pushed.  </p>
<p>You may wonder that how if there is some really urgent thing that need interruption on the team or even I have to specifically assign a task to someone?  </p>
<ol>
<li><p>First checks the board to see what the team or the person is doing which means checking the urgency between your new tasks, the tasks they are working on, and the cards waiting to be pulled.  </p>
</li>
<li><p>Create a card on board, adjust the priority or put to different lane to indicate different classes of services.  </p>
</li>
<li><p>If it’s really an urgent issue like production support case, after doing above, also offline communicates with the team or specific person to realize that there is really something more important need immediately handle.  Then they would decide themselves whether immediately stop and mark the current card as blocked or wait until current tasks is completed.  </p>
</li>
</ol>
<p>It’s understandable that we cannot avoid adhoc urgent issue and offline communication.  However, we should try our best to indicate it in our communication channel, Kanban board and cards.  Actually, when this is done, it encourages the available team resource to check and pick tasks themselves.  Anyone think they can do the job can pick it up.  Proactive attitude and responsibility can grow and lessen the “It’s not my business” atmosphere.  </p>
<p>There is one thing to notice though.  If it’s not easy for the people to put a new card on Kanban board, they are not willing to do so.  For example, the software or website is tremendously slow or there are too many restrictions, rules or requirements about what should or should not be in the card.  </p>
<h3 id="Resisting_Being_Spied">Resisting Being Spied</h3>
<p>I think no one is willing to be monitored or spied on.  Although Kanban can really shows all workload if we put all tasks on board and communicate through it, by no means it’s intended to spy on everyone.  As mentioned in previous article, Kanban appreciate slack and doesn’t intend to achieve 100% utilization.  Kanban just helps to increase transparency, encourage self-management and pro-active collaboration for problem solving.  </p>
<p>From another perspective, if a boss is really intended to spy on the team, no matter using Kanban or not, he will come up his own method.  So the worse thing is that the team must collect data everywhere to demonstrate that the resource is already fully utilized.  But using Kanban, we don’t need to waste time on those boring, time-consuming and meaningless data collection and the boss can see how busy you are right on Kanban board.  </p>
<h2 id="Afterword">Afterword</h2>
<p>It requires mindset change when using Kanban, no matter on management or execution level.  Human nature resists change.  When we decide to adopt it, we must understand the benefits it brings and what existing problems it can address.  If everyone evaluates that the benefits are more than drawbacks, change is easier.  If not, we should know the reasons behind it.  If you want to persuade someone, interesting thing is that you should know he’s using System 1 or System 2 to argue with you, then you can come up more appropriate solutions.  You can take a look at related books about the different systems, like <a href="http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman/dp/0374533555" target="_blank" rel="external">Thinking, Fast and Slow</a>.  Try recall the scene that you argued with your girlfriend or wife and no consensus was made.  You two were probably arguing with different systems.  Adopting Kanban requires us to make it flow around the rock like water.  </p>
<h3 id="Series">Series</h3>
<ul>
<li><a href="http://www.thinkingincrowd.me/2015/05/20/Dive-into-Kanban-1-What-is-it/" target="_blank" rel="external">Dive into Kanban (1) - What is it</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/30/Dive-into-Kanban-2-Visualizing-Process/" target="_blank" rel="external">Dive into Kanban (2) - Visualizing Process</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/" target="_blank" rel="external">Dive into Kanban (3) - How Kanban address the estimation headache</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/06/05/Dive-into-Kanban-4-Variability-and-Flow-Interruption/" target="_blank" rel="external">Dive into Kanban (4) - Variability and Flow Interruption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/07/23/Dive-into-Kanban-5-Difficulty-and-Resisted-Opinions-on-Adoption/" target="_blank" rel="external">Dive into Kanban (5) - Difficulty and Resisted Opinions on Adoption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/10/08/Dive-into-Kanban-6-Scrum-vs-Kanban/" target="_blank" rel="external">Dive into Kanban (6) - Scrum vs Kanban</a></li>
</ul>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Kanban" scheme="http://www.thinkingincrowd.me/tags/Kanban/"/>
    
      <category term="Adoption" scheme="http://www.thinkingincrowd.me/tags/Adoption/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dive into Kanban (4) - Variability and Flow Interruption]]></title>
    <link href="http://www.thinkingincrowd.me/2015/06/05/Dive-into-Kanban-4-Variability-and-Flow-Interruption/"/>
    <id>http://www.thinkingincrowd.me/2015/06/05/Dive-into-Kanban-4-Variability-and-Flow-Interruption/</id>
    <published>2015-06-05T14:49:04.000Z</published>
    <updated>2015-12-19T12:57:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="External_Sources_of_Variability">External Sources of Variability</h2>
<p>Within the software development cycle, we often face various kinds of flow blocker issues that slows our progress.  Let’s look into some common areas.  </p>
<h3 id="Requirement">Requirement</h3>
<p>Responding to change, one key point in Agile manifesto, is embraced in Agile development.  However, normally there also exists enforcement or agreement that after user story is defined or at least after development is started, requirement should not be changed.  For example, in Scrum, change should be scheduled as new item in next iteration and no new item should be added after sprint backlog is confirmed.  </p>
<p>The reality is that many teams cannot follow the principle well.  From another point of view, do you think it’s better to waste time on doing something we don’t really want and then do it again?  Or it’s better just stop and change it based on new requirement?  </p>
<p>Clearly, there is no absolute right or wrong answer here.  We should understand our business nature and decide ourselves.  Going to either extreme that no any change can be accepted or any change is welcome anytime without constraints can be terrible.  There must be some disciplines to follow no matter which way you choose.  </p>
<h4 id="The_Kanban_solutions">The Kanban solutions</h4>
<p>In Kanban, changing requirement is acceptable but we must agree that it affects lead time.  And we should also have metrics to measure the quality of requirement and prioritization later on.  </p>
<ol>
<li><p>We can either move back the card to “Requirement” stage or mark it as Blocked by REQ under its current stage regarding the change is big enough to impact development or testing.  </p>
<p>We should have statistics on how many cards ever move back to “Requirement” once started development or how many days are blocked by requirement.  </p>
<p>For example, below diagram shows the blocked statistics.  Y-Axis shows different stages in one Kanban board and X-Axis show the total time items are blocked under particular stage.  And the time is also grouped by different blocking reason.  Say, in “In Dev” stage, all time is blocked due to “Priority” reason which means priority kept changing after developer starts development and that is unhealthy signal.  </p>
</li>
</ol>
<p><img alt="Blocked_Statistics" src="http://77g8zm.com1.z0.glb.clouddn.com/Blocked_Statistics.png"></p>
<ol>
<li><p>If the item is discarded once it’s picked from Backlog, we can also show in Kanban’s Discard area and also we can check how much effort has been wasted on it in the report.  </p>
</li>
<li><p>Start as late as possible if we have statistical Lead Time on hand.  Once we have some historical data so that we know on average, 85%, or 98% case that how long it takes to finish one item, then we can start that item as late as possible to avoid requirement change.  </p>
</li>
</ol>
<h3 id="Environment_Availability">Environment Availability</h3>
<p>This is a very typical flow blocker.  The impact of this factor is normally tremendous especially when this issue is dragged without a permanent solution because environment availability often happens in large scale projects involving many teams.  </p>
<p>Say if environment outage takes at least half day to recover, it’s a signal that our recovery and operation capability is weak or the system design need to be reviewed.  And if we don’t solve the issue at the beginning stage of the project, time and cost wasted will increase exponentially every time we do environment preparation, load testing, production release and disaster recovery.  The later stage same thing happens, the more expensive the cost is.  </p>
<p>We can either have larger WIP or actively pursue issue resolution as described below.  </p>
<h3 id="Expediting_items">Expediting items</h3>
<p>Developers often suffers from expediting items as well, for example, overlooked high priority items in backlog, urgent Report requested from manager, production issue support, etc.  </p>
<p>Defining different classes of services and assigning fixed WIP on each class, or enabling slack in the team has the agility to react.  </p>
<h2 id="General_Solutions_in_Kanban">General Solutions in Kanban</h2>
<p>Below are some general approaches used in Kanban to workaround the blocked items, ease the flow to ensure predictable lead time.  Different approachs have its own benefits or drawbacks.  It should be chosen accordingly.  </p>
<h3 id="Larger_WIP">Larger WIP</h3>
<p>The larger WIP, the less tension the team may feel.  Because idle resource can still pull other items in case there are blocked ones.  However, that cause larger and more unprecitable lead time.  Larger WIP also means the people need to multi-tasking and keep switching context.  Empirically, multi-tasking often cause bad quality.  </p>
<p>What is more, less pressure might consequently has less chance of encouraging continuous improvement.  So, this is recommended for immature organization as starting point only.  </p>
<h3 id="Pursuing_resolution">Pursuing resolution</h3>
<p>Strict WIP control requires the team to relentlessly pursue issue fixing.  It greatly encourages continuous improvement culture but it also requires a more mature &amp; fully cooperated team.  </p>
<h3 id="Class_of_Services">Class of Services</h3>
<p>Separating the work items into different classes of services and also assigning suitable WIP on each class is one useful approach to solve the expediting items or flow interruption issue.  </p>
<p>Take below graph as example, we have separated our items into several classes of services:</p>
<ol>
<li><code>L1 TT</code>: Means level 1 Production issue which is intended to be fixed in 4 hours  </li>
<li><code>L2 TT</code>: Means level 2 Production issue which is intended to be fixed in 1 day  </li>
<li><code>Normal</code>: Normal development item or defect  </li>
<li><code>Intangible</code>: Items has no cost of delay  </li>
</ol>
<p>How to assign WIP depends on the nature of the frequency and volume of different levels of items.  If in initial production launch stage, there might be many production support issues so that you have to put fixed resources in <code>L1 TT</code> and <code>L2 TT</code> in order to react quickly and avoid interrupting normal items’ development.  Then the lead time of normal item can still be predictable and the people responsible for normal item development seldom need multi-tasking, ensuring quality.  However, if the system is already kind of stable, instead of assigning fixed resources to the first two classes, you can arrange some resources in Intagible class who can jump into production issue support when needed.  </p>
<p><img alt="Class_of_Services" src="http://77g8zm.com1.z0.glb.clouddn.com/Class_of_Services.png"></p>
<h3 id="Slack_Capacity">Slack Capacity</h3>
<p>Enabling slack in the team helps to face any unexpected situation, remove regular though not urgent blocker, apply automation to shorten lead time or reduce WIP.  Unless the team has slack, continuous improvement can be luxury because they are all busy chasing after business items.  </p>
<h2 id="Afterword">Afterword</h2>
<p>Variability is the major impact on the flow and so we should examine carefully and address on every source in our own process flow.  To analyze existing flow blocker and work out the strategies in Kanban is not easy.  It should be done as part of <a href="http://www.thinkingincrowd.me/2015/05/29/Dive-into-Kanban-2-Visualizing-Process/" target="_blank" rel="external">visualizing process</a>.  </p>
<p>Later on, we will explore how to define WIP and classes of services in-depth.  And if you would like to have more idea on sources of variability, chapter 19 in <a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402" target="_blank" rel="external">Kanban: Successful Evolutionary Change for Your Technology Business</a> is a good reference.  </p>
<h3 id="Series">Series</h3>
<ul>
<li><a href="http://www.thinkingincrowd.me/2015/05/20/Dive-into-Kanban-1-What-is-it/" target="_blank" rel="external">Dive into Kanban (1) - What is it</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/30/Dive-into-Kanban-2-Visualizing-Process/" target="_blank" rel="external">Dive into Kanban (2) - Visualizing Process</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/" target="_blank" rel="external">Dive into Kanban (3) - How Kanban address the estimation headache</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/06/05/Dive-into-Kanban-4-Variability-and-Flow-Interruption/" target="_blank" rel="external">Dive into Kanban (4) - Variability and Flow Interruption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/07/23/Dive-into-Kanban-5-Difficulty-and-Resisted-Opinions-on-Adoption/" target="_blank" rel="external">Dive into Kanban (5) - Difficulty and Resisted Opinions on Adoption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/10/08/Dive-into-Kanban-6-Scrum-vs-Kanban/" target="_blank" rel="external">Dive into Kanban (6) - Scrum vs Kanban</a></li>
</ul>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Kanban" scheme="http://www.thinkingincrowd.me/tags/Kanban/"/>
    
      <category term="Flow" scheme="http://www.thinkingincrowd.me/tags/Flow/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dive into Kanban (3) - How Kanban address the scheduling & estimation headache]]></title>
    <link href="http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/"/>
    <id>http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/</id>
    <published>2015-05-31T05:06:14.000Z</published>
    <updated>2015-12-19T12:57:50.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.thinkingincrowd.me/2015/05/29/Dive-into-Kanban-2-Visualizing-Process/" target="_blank" rel="external">Visualizing the process in Kanban</a> can reduce communication overhead and unnecessary process.  Besides, it can also help to addresses the common estimation headache in development process from a different perspective.  </p>
<h2 id="Reality">Reality</h2>
<p>Traditional manangement or planning style is that, provding how many man-days or man-hours we have in a typical iteration and the estimation on the items we want to do, manager or product owner picks the items that match the man power and item priority.  However, we still meet a typical situation that the expected time of item is delayed, no matter requirement, development or testing.  we can only postpone or cut the scope when we realized that.  Either way affects the original plan and also has additional cost.  The reason is that estimation is often, if not always, wrong.  Frederick Brooks has spent a whole Chapter 2 in his influential software project manangement book, <a href="http://www.amazon.com/Mythical-Man-Month-Software-Engineering-Anniversary/dp/0201835959" target="_blank" rel="external">The Mythical Man-Month</a>, to discuss about that many years ago.  If we are taking estimation as commitment, we might have a lot of trouble.  </p>
<h2 id="Do_we_still_need_estimation">Do we still need estimation</h2>
<p>If the estimation we have always been doing is not accurate, and we should not use it for commitment and scheduling, is it still useful?  We should ask ourselves what we originally want it to help us to achieve first.  Below listed some common usages:  </p>
<ol>
<li><p>Resource Utilization  </p>
<p>High utilization is intended to do more thing in fixed time.  However, there will be high risk if we plan our man-days to fully match the time we have in a iteration.  Once there is any issue blocker or change, schedule is affected.  And then we have to adjust or replan which is also costly and might also lead to degrade of quality.  </p>
<p>If another intention of high utilization is to eliminate any slack, like the old way to manage physical worker, that is pathetic.  This thinking assumes that slack does no good to the company or the team.  In fact, this is some kind of trustness issue and treating knowledge worker as cost instead of asset.  </p>
</li>
<li><p>Prioritization  </p>
<p>Sometime we use the estimation to help prioritize items, so call evaluating ROI (Return on Investment).  </p>
</li>
<li><p>Scheduling</p>
<p>There are different purposes for planning or scheduling: When should I start if I want something to be completed at a particular time, when something can be completed if I start it now, or what is the max possible outcome given some resources.  </p>
<p>In order to make sure things can be done as planned, many people add some buffer time into the estimation.  For example, a task required 2 man-days to complete might normally be estimated as 2.5 man-days.  However, how much buffer is appropriate highly relies on personal experience.  Although we can decrease error margin through peer evaluation, task breakdown into smaller unit, etc, many influential factors are out of control, such as low productivity due to multi-tasking, priority shifting, resource turnover, etc.  </p>
</li>
</ol>
<p>Martin Fowler has also written a good article, <a href="http://martinfowler.com/bliki/PurposeOfEstimation.html" target="_blank" rel="external">Purpose Of Estimation</a>.  There is no absolute right or wrong on estimation.  It depends on how we use it.  Effort estimation can still be used for roughly comparing the difficulty among tasks, evaluating whether there is risk on an item so we should come up a simplified version if needed, or prioritizing tasks if they are really equally important.  However, if we use it incorrect or the benefits it brings can be achieved through other methods, then we might not need estimation at all.  Actually, in Agile community, there are some voices about discarding effort estimation and also a movement called #NoEstimates.  If you have interest, you can take a look on below articles:  </p>
<p><a href="http://ronjeffries.com/xprog/articles/the-noestimates-movement/" target="_blank" rel="external">The NoEstimates Movement</a><br><a href="http://www.cio.com/article/2381167/agile-development/-no-estimates-in-action-5-ways-to-rethink-software-projects.html" target="_blank" rel="external">‘No Estimates’ in Action: 5 Ways to Rethink Software Projects</a><br><a href="http://www.infoq.com/news/2015/02/agile-no-estimation" target="_blank" rel="external">No Estimation in Small And Large Scale Agile Projects</a>  </p>
<h2 id="Whether_Kanban_can_help">Whether Kanban can help</h2>
<p>What is Kanban’s perspective?</p>
<ol>
<li><p>Resource Utilization  </p>
<p>Assuming we have shown all the tasks on the Kanban board and the team is communicating through Kanban, then we can really knows what each team member is working on right now and in what stage one task is.  Hence, we do be able to know the workload of each person so that we can tell if there is any slack.  </p>
<p>However, Kanban doesn’t encourage achieving 100% utilization on each stage as well, because slack is important for continuous improvement and creativity.  Like Google’s 20% freetime, LinkedIn’s InCubator, Apple’s Blue Sky and Microsoft’s The Garage program, different company takes similar approach to encourage that.  (<em>Notes: Seems Google took back that already but there are still many companies think it’s useful.</em>)  Purely achieving high utilization should not be the way to manage knowledge worker in the new era anymore.  Peter F. Drucker has written many great books about management which are highly recommended.  </p>
</li>
<li><p>Prioritization  </p>
<p>Real prioritization does not really require estimation to assist.  It should NOT be defined as high, medium, low.  Instead, it should be in sequence of one, two, three, etc.  If we cannot set priority in sequence, it means we still don’t know what the most important thing is yet.  If there is something very important and cannot be broken down, we should always spent all resource and time on it, right?  In case that we cannot tell the priority of some tasks, surely we can use the estimation as reference.  </p>
<p>Kanban cannot help on prioritization.  However, it can transparently shows them on board for everyone and make sure we focus on flow to complete the task as fast and smooth as possible.  </p>
</li>
<li><p>Scheduling  </p>
<p>In Kanban, the metrics we used is lead time.  Because it’s actual time, it includes all possible external factors, say environment, people, task difficulty, etc.  What is more, by looking into this figure statistically, we use statistics to decrease the error margin.  We can understand the team’s delivery productivity once having statistical lead time on hand.  Knowing how long it takes for the same class of service (say, Story, Support, or Defect) to complete in 85% or 98% of the cases than using estimation.</p>
</li>
</ol>
<p>Kanban cannot solve all the problems we have, but it helps us to concentrate on the right thing we should care about.  </p>
<h2 id="Afterword">Afterword</h2>
<p>Estimation is hard and often incorrect.  Once it’s used with wrong objective, it brings unnecessary mental effort on developer and cannot serve as valuable reference for scheduling.  Hence, we should focus on what benefits we would like to achieve through estimation.</p>
<p>If we focus on lead time, especially when we know how our lead time spreads statistically, we have better idea when it’s the latest time we should start and have greater agility if our lead time is short and stable.  </p>
<h3 id="Series">Series</h3>
<ul>
<li><a href="http://www.thinkingincrowd.me/2015/05/20/Dive-into-Kanban-1-What-is-it/" target="_blank" rel="external">Dive into Kanban (1) - What is it</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/30/Dive-into-Kanban-2-Visualizing-Process/" target="_blank" rel="external">Dive into Kanban (2) - Visualizing Process</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/" target="_blank" rel="external">Dive into Kanban (3) - How Kanban address the estimation headache</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/06/05/Dive-into-Kanban-4-Variability-and-Flow-Interruption/" target="_blank" rel="external">Dive into Kanban (4) - Variability and Flow Interruption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/07/23/Dive-into-Kanban-5-Difficulty-and-Resisted-Opinions-on-Adoption/" target="_blank" rel="external">Dive into Kanban (5) - Difficulty and Resisted Opinions on Adoption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/10/08/Dive-into-Kanban-6-Scrum-vs-Kanban/" target="_blank" rel="external">Dive into Kanban (6) - Scrum vs Kanban</a></li>
</ul>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Kanban" scheme="http://www.thinkingincrowd.me/tags/Kanban/"/>
    
      <category term="Lead Time" scheme="http://www.thinkingincrowd.me/tags/Lead-Time/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dive into Kanban (2) - Visualizing Process]]></title>
    <link href="http://www.thinkingincrowd.me/2015/05/30/Dive-into-Kanban-2-Visualizing-Process/"/>
    <id>http://www.thinkingincrowd.me/2015/05/30/Dive-into-Kanban-2-Visualizing-Process/</id>
    <published>2015-05-29T16:20:10.000Z</published>
    <updated>2015-12-19T12:57:43.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Process_and_Visualization">Process and Visualization</h2>
<p>I think no one will question the importance of process, but it actually also kills a company’s agility and creativity if it becomes some bureaucracy procedures for doing certain things.  </p>
<p>It’s very easy to add process which possibly is some governace on an incident happened once only but it’s hard to remove an established one.  That is because almost no one can tell the historical reason of adding it or has the guts to suggest removing it.  It is hard to provide compelling reason or evidence to prove that removing it has great benefit or the people is afraid of taking the responsibility for something bad happened if removing it.  </p>
<p>Visualizing process is the <strong>first and the most important</strong> thing in using Kanban.  With proper visualization in Kanban, we can see if there is any process that prevents the item flow efficiently and consider area to improve.</p>
<p>Also, about the communication cost within the process, if we have put most of the valuable information on the Kanban board already, why borther to send out emails to ask a group of people and wait feedback?  </p>
<h2 id="Sample_Process">Sample Process</h2>
<p>Let’s see the process established in one company:</p>
<ol>
<li><p><strong>Business Analysis</strong> collect requirement, confirms priority and a particular release schedule. Then walkthrough requirement to development &amp; QA team.   </p>
</li>
<li><p>Shared <strong>Development and QA team</strong> estimate efforts given the item list and feedback if the items can be included.  </p>
</li>
<li><p>When development is done in time, development team raises a Release Candidate Request to <strong>Release team</strong> for central manangement.  It’s some kind of paperwork to indicate that you have done development testing, QA walkthrough, review with system and/or DBA team for reviewing necessary change if required.  </p>
</li>
<li><p>After release team confirms the item can be included in a particular release, development team can request QA environment deployment from Release team.  </p>
</li>
<li><p>Once QA environment is ready by Release team, <strong>Development team</strong> need to do integration testing and mark the item as “Ready for Testing” so that QA steps in for full testing.  </p>
</li>
<li><p>If QA testing is completed without much blocking issue before final Code Freeze time, release team will include the release item to do PP deployment.</p>
</li>
<li><p><strong>QA</strong> starts PP regression testing and see if there is any issue.</p>
</li>
<li><p>When regession testing is done, <strong>Release team</strong> packs code for arranging prodction release.  </p>
</li>
</ol>
<p><em>Notes: There are many daily or weekly reports gathering item progress &amp; blocking issues within this period.</em>  </p>
<p>You can see how many steps, different groups of people involved here and each step involves some kind of <strong>signal</strong> to indicate it can be ready for next stage to continue the process.  Bunches of email discussion, confirmation can happen especially when something unexpected happens.  </p>
<p>If we visualize the process using the Kanban below and all different teams based on the item status on the board to do actions accordingly, lot of communication cost can be avoided.  </p>
<h2 id="Visualization">Visualization</h2>
<p><img alt="Kanban Board" src="http://thinkingincrowd.u.qiniudn.com/Kanban_Visualize_Process.png"></p>
<p>Here is how the process integrates within the Kanban board.  </p>
<ol>
<li><p>Before items’ priority is confirmed, they are all put under <strong>Backlog</strong> stage.  Once priority is confirmed, then they can be put under <strong>Prioritized</strong> stage. The most important one should be listed at top so that the issue of balancing between different business unit can be easily solved.  As this company’s working style still involves effort estimation, we can put effort estimation as task in the work item or make it as pull condition in Prioritized stage.</p>
</li>
<li><p>If the development of one work item is done, it can be marked as <strong>Completed</strong> (<span style="color: #7ED321">Green</span> border of the card) so that it can be treated as a signal to be pulled to next stage.  </p>
</li>
<li><p>Once release team approve the item and finish QA environment deployment, they can also mark the item as Completed in <strong>RC Request</strong> stage.</p>
</li>
<li><p>If DevInt Test is done, development team can mark the card as Completed in <strong>Dev-Int Test</strong> stage.  </p>
</li>
<li><p>Similar approach can be used on <strong>QA Test</strong>, <strong>PP Deploy</strong> and <strong>PP Regression</strong> stages.  </p>
</li>
<li><p>If any work item is <strong>Blocked</strong>, it can be easily told from the <span style="color: red">Red</span> border of the card and what the reason is.  Further, the blocked time and reason can be used to calcualte the flow efficiency later.  </p>
</li>
</ol>
<p>Hence, visualizing the process in Kanban helps us clearly know in which stage the working item is and what followup actions are required to continue the process or clear the blocking issues. A picture is worth a thousand words.  </p>
<h2 id="Afterword">Afterword</h2>
<p>Process visualization in Kanban is the most essential step.  The difficulty on visualization is how to make policies explicit for everyone in the process.  And we <strong>must reflect the real process</strong> in the company/team instead of copying a existing Kanban board from others or design an ideal version in your mind.  </p>
<h3 id="Series">Series</h3>
<ul>
<li><a href="http://www.thinkingincrowd.me/2015/05/20/Dive-into-Kanban-1-What-is-it/" target="_blank" rel="external">Dive into Kanban (1) - What is it</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/30/Dive-into-Kanban-2-Visualizing-Process/" target="_blank" rel="external">Dive into Kanban (2) - Visualizing Process</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/" target="_blank" rel="external">Dive into Kanban (3) - How Kanban address the estimation headache</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/06/05/Dive-into-Kanban-4-Variability-and-Flow-Interruption/" target="_blank" rel="external">Dive into Kanban (4) - Variability and Flow Interruption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/07/23/Dive-into-Kanban-5-Difficulty-and-Resisted-Opinions-on-Adoption/" target="_blank" rel="external">Dive into Kanban (5) - Difficulty and Resisted Opinions on Adoption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/10/08/Dive-into-Kanban-6-Scrum-vs-Kanban/" target="_blank" rel="external">Dive into Kanban (6) - Scrum vs Kanban</a></li>
</ul>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Kanban" scheme="http://www.thinkingincrowd.me/tags/Kanban/"/>
    
      <category term="Process" scheme="http://www.thinkingincrowd.me/tags/Process/"/>
    
      <category term="Flow" scheme="http://www.thinkingincrowd.me/tags/Flow/"/>
    
      <category term="Visualization" scheme="http://www.thinkingincrowd.me/tags/Visualization/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dive into Kanban (1) - What is it?]]></title>
    <link href="http://www.thinkingincrowd.me/2015/05/20/Dive-into-Kanban-1-What-is-it/"/>
    <id>http://www.thinkingincrowd.me/2015/05/20/Dive-into-Kanban-1-What-is-it/</id>
    <published>2015-05-20T12:55:41.000Z</published>
    <updated>2015-12-19T12:57:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="What_is_Kanban">What is Kanban</h2>
<p><a href="http://en.wikipedia.org/wiki/Kanban" target="_blank" rel="external">Kanban</a> can be considered as a <strong>pull</strong> system <strong>visualizing</strong> the <strong>work-flow</strong> through <strong>stage transition</strong> under certain <strong>constraints</strong>.  </p>
<p>It’s still abstract, right?  Please check below sample Kanban board and I will explain each of the highlighted points below.  </p>
<p><img alt="Kanban Board" src="http://thinkingincrowd.u.qiniudn.com/Kanban_Simple_Flow.png"></p>
<h2 id="Work-flow_&amp;_Stage_Transition">Work-flow &amp; Stage Transition</h2>
<p>It’s not hard to understand, when you are trying to get something done, it always involves stage transition.  At least two stages, in progress and done, right?</p>
<p>In software development field, before one product/feature is available for customer, it normally goes through <strong>collecting requirement</strong>, <strong>requirement analysis</strong>, <strong>design</strong>, <strong>coding</strong>, <strong>testing</strong>, and <strong>release</strong>.  These can be mapped to each column above and considered as the transition stages involved in work-flow especially when each stage is responsible by different person or team.  </p>
<p>Hence, before applying Kanban methodology to the development process, it’s a must we understand how our process is and how the stages are transtioned.</p>
<h2 id="Visualize">Visualize</h2>
<p>Human-beings are better at recognizing and understanding the world visually.  Work process in software development is quite complex when many parties are involved and especially when the governing policies or management is in a mess.  </p>
<p>By visualizing the process with a board like above, it’s easy for everyone to track the work item’s progress and spot out the blocking issue or bottleneck if there is any.</p>
<h2 id="Constraints">Constraints</h2>
<p>The constraints applied in Kanban is called <strong>WIP</strong> (Work in Progress).  This is what differentiates Kanban from other “Card-Wall” style task management system, like <a href="http://trello.com/" target="_blank" rel="external">Trello</a>.  Constraints are those number applied on top of each stage which implies that at most that number of tasks put under that stage in parallel.  In the example above, only 6 tasks can be started in development at the same time.  </p>
<p>We can simply assume the constraint is the number of people in different teams although one person might not be limited to do one thing at a time.  But this idea should be easier to understand at first and we can start from that.  </p>
<h2 id="Pull">Pull</h2>
<p>This is an interesting verb.  It’s the opposite of <strong>Push</strong>.  I think most of the developers can feel the meaning behind it pretty well.  Most of the time, the work items or tasks are assigned/pushed from higher level.  </p>
<p>But in Kanban, it emphasize that the work items must be pulled from downstream.  Once, the downstream is busy which means the constraints mentioned above is met, then the work-flow has to be stopped until there is vacancy again in downstream.  </p>
<p>Not hard to imagine, upstream perfers <strong>Push</strong> more than <strong>Pull</strong> while the downstream should feel the opposite.  The reasons are due to out-dated management philosophy and/or level of trust among teams which Kanban is intended to improve.  </p>
<h2 id="Afterword">Afterword</h2>
<p>If you have some basic understanding on Kanban now and curious on what real benefits it can bring, I suggest you to read the great intro book <strong><a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402" target="_blank" rel="external">Kanban: Successful Evolutionary Change for Your Technology Business</a></strong> by David J Anderson.  </p>
<h3 id="Series">Series</h3>
<ul>
<li><a href="http://www.thinkingincrowd.me/2015/05/20/Dive-into-Kanban-1-What-is-it/" target="_blank" rel="external">Dive into Kanban (1) - What is it</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/30/Dive-into-Kanban-2-Visualizing-Process/" target="_blank" rel="external">Dive into Kanban (2) - Visualizing Process</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/05/31/Dive-into-Kanban-3-How-Kanban-address-the-estimation-headache/" target="_blank" rel="external">Dive into Kanban (3) - How Kanban address the estimation headache</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/06/05/Dive-into-Kanban-4-Variability-and-Flow-Interruption/" target="_blank" rel="external">Dive into Kanban (4) - Variability and Flow Interruption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/07/23/Dive-into-Kanban-5-Difficulty-and-Resisted-Opinions-on-Adoption/" target="_blank" rel="external">Dive into Kanban (5) - Difficulty and Resisted Opinions on Adoption</a>  </li>
<li><a href="http://www.thinkingincrowd.me/2015/10/08/Dive-into-Kanban-6-Scrum-vs-Kanban/" target="_blank" rel="external">Dive into Kanban (6) - Scrum vs Kanban</a></li>
</ul>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Kanban" scheme="http://www.thinkingincrowd.me/tags/Kanban/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2014 Retrospect and 2015 Goal Setting]]></title>
    <link href="http://www.thinkingincrowd.me/2015/01/04/2014-retrospect-and-2015-goal-setting/"/>
    <id>http://www.thinkingincrowd.me/2015/01/04/2014-retrospect-and-2015-goal-setting/</id>
    <published>2015-01-04T14:53:24.000Z</published>
    <updated>2015-12-31T13:27:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="总结">总结</h2>
<h3 id="个人学习">个人学习</h3>
<p>主要是今年年中做的<a href="http://www.thinkingincrowd.me/2014/07/31/half-year-summary/" target="_blank" rel="external">小结</a>里面说的东西，其实上半年还是私人时间比较足，做了些东西。下半年就疲于公司项目和加班，加上个人精力好像没之前那么旺盛了，所以书也没什么看，也没什么大的产出，博客更是没越来越少的样子。</p>
<h3 id="工作">工作</h3>
<p>2015 年初是最上面管理层定下的项目上线的 Deadline 了，各部门的 PM, BA 开始密集的看目前有什么缺失的功能在上线前必须要提供给用户才能完成整个业务流程，然后各种需求都涌出来了。项目管理，各部门协作的问题变得更乱，”敏捷” 变为按 Deadline 倒推出每个功能必需完成的时间点。情况可想而知。</p>
<p>去年的团队发生了比较大的变动。我的小组从 6 人，断断续续变成了 3 人。其中一个主要的并且也是最复杂的模块的主程和副程都陆续离开了。而且有一段时间，还要借两个人到别的小组去帮助完成他们的模块。人员的管理和工作的安排让我很头疼。因为人手不足，我写代码时间必需增大，但是同时还是要应付各种沟通, 产品线上支持等，真是感觉力不从心。</p>
<p><a href="http://en.wikipedia.org/wiki/Kanban" target="_blank" rel="external">Kanban</a> 在上半年引入和实施了一小会，团队还没找到太多感觉，再加上上面说的一些原因，很难实施下去。去年希望加强的 Code Review 和 Unit Test 这些更是想都不用想了。</p>
<p>2/3 个月前，我负责的一个模块，因为个人疏忽，导致上线后产生重大影响，当天需要紧急回滚。后面连续两三个星期需要白天响应用户和解决问题，晚上加班加点的对数据打补丁，真是焦头烂额。唯一值得庆幸的是，当年我重点培养的新人，也是作为我的副手，在这次事件和我一起解决问题和加班，算是让我得到一点安慰。感觉当初的选择和花时间来教他都是值得的。</p>
<h3 id="时间安排">时间安排</h3>
<p>学习时间：<br>今年后半年自由时间比较少了，精力也感觉没那么足。最多就上下班车里的30分钟，和晚上 10 点到 11 点。早上 5:30 起不来了，变成了 6:30。有时帮忙带一下儿子，有时跳一会绳，出门前的时间就没怎么剩下了。还只是尽量挤挤吧。</p>
<p>家庭时间：<br>一直占个人时间大头。需要尽量陪儿子多一些，分担一下老妈的精神和肉体压力。儿子性格目前像老婆，做一些事情上不能逼太急。但是老妈又是做事比较急那种，什么刷牙，吃饭，洗澡，出门上学，老是要唠叨他。而且他还比较有自己的想法，不太愿意按大人说的做，尤其是在我们语气比较硬的情况下，他就会像是对着干是的。感觉他的心理压力有点大，晚上睡个觉都还可以做梦和他人争论个什么东西。所以，首要任务是用更耐心和引导的方式让他做一些事情，舒缓他的压力。也让老妈在一些小事上就尽量由他，自己也不用那么动气，免得血压高。因为毕竟让他自己定个时间做，他还是可以做完的。</p>
<p>锻炼时间：<br>还是要尽量坚持每天早上固定30分钟左右的锻炼时间。去年中跳绳 1500 下基本满足，后期身体抱恙后又懈怠了些。明年继续。</p>
<h3 id="善事">善事</h3>
<p>还在给联合国儿童基金会捐助一点。壹基金的停了。原因是中间只是想换个帐号来处理，后来这个换帐号还搞得很麻烦，索性停了。今年最有意思的是，人生第一次去当志愿者，探望聋哑儿童，是和老婆，儿子一起去的。算是把前年的想法，实现了一点点。</p>
<h2 id="展望">展望</h2>
<h3 id="做什么">做什么</h3>
<p>其实自己一直想做个什么东西出来，主要是用自己喜欢的技术来尝试实现前公司一些没有做好的部分。这个东西就是一个多租户，自定义表单，自定义业务流程的系统。之前是想做一个适用于企业 ERP 的自定义流程的系统出来。但是接触过一些不同的企业 ERP 才深知流程的复杂。这样的怪兽系统不是我一个人的能力可以做到的。所以，今年，或者今后，闲时就专注做一个围绕 Kanban 的项目管理系统。小则练技术和架构，大则做产品让大家使用。</p>
<h3 id="为什么">为什么</h3>
<ol>
<li>技术上看，它天然是个多租户系统。必须支持多企业，多项目进行管理。自定义表单也是需要的，因为各企业对项目故事点，任务等都需要加适合自己的字段。关于自定义流程，因为已经是基于 Kanban，所以流程是会通过 Kanban 反映出来，不像企业 ERP 那些流程那么复杂，应该还在我能力范围之内。</li>
<li>Kanban 是我很喜欢的一个理论方法。虽然我的实践还很少，但是它的一些理念我甚是喜欢，比如，限定在做工作项 (WIP)，从已有流程中演进，促进各团队相互协作，提高自主性，找出瓶颈和优化流程的 Kaizen 的文化。我承认我的想法是有点理想化，但是让程序员少加班，减少浪费，工作生活平衡是我的梦想。</li>
<li>去年在公司里面遇到的团队和项目管理问题，希望能够在今年能够好好的处理。如何激励团队，应用 Kanban 来合理化项目流程是我觉得最主要的切入点。深入实践 Kanban 在团队的应用取得的经验可以让我完善这样的一个系统。</li>
</ol>
<h3 id="不同点">不同点</h3>
<p>现在的项目管理系统这么多，我想做的这个和他们有什么不同呢？</p>
<p>现在的项目管理系统据我所知，有传统的复合型，如收费昂贵的 Rally, 平民的 Jira, 和免费的 Redmine 等。它们不附属任何理论方法，上面可以用 Scrum / XP / Kanban，包罗万有。但是一般以 Scrum 和 XP 多一些，因为 Kanban 比较新。还有另一种是简易卡片型的，初看上去像 Todo list 或者 Kanban 系统。出名的有 Trello，国内很多如 Teambition，Tower 等。而我想做出来的是完全基于 Kanban 的，为 Kanban 订制的。</p>
<h3 id="目前状况">目前状况</h3>
<p>目前用的是 Node.js，MongoDB 和 AngularJS，自己一个慢慢磨。悲剧的是工作量还不小，我这个伪前端除了把后端的逻辑写完，前端凑合的页面设计真是惨不忍睹。只能在功能实现前凑合一下了，呵呵。功能实现后再把前端设计搞好，估计可以从伪前端升级成初级的了。</p>
]]></content>
    
    
      <category term="Retrospect" scheme="http://www.thinkingincrowd.me/tags/Retrospect/"/>
    
      <category term="Goal" scheme="http://www.thinkingincrowd.me/tags/Goal/"/>
    
      <category term="Think" scheme="http://www.thinkingincrowd.me/categories/Think/"/>
    
  </entry>
  
</feed>
