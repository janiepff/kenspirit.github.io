<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Thinking in Crowd / 鹄思乱想]]></title>
  <link href="http://www.thinkingincrowd.me/atom.xml" rel="self"/>
  <link href="http://www.thinkingincrowd.me/"/>
  <updated>2012-12-24T06:44:12+08:00</updated>
  <id>http://www.thinkingincrowd.me/</id>
  <author>
    <name><![CDATA[鹄思乱想]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My practices on Time Management]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/12/24/my-practices-on-time-management/"/>
    <updated>2012-12-24T06:22:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/12/24/my-practices-on-time-management</id>
    <content type="html"><![CDATA[<h2>The 101</h2>

<blockquote><p>Time Management is the act or process of planning and exercising conscious control over the amount of time spent on specific activities, especially to increase effectiveness, efficiency or productivity.</p></blockquote>

<p>Everyone who cares about their time should be familiar with this concept and knows its goal - to increase effectiveness.  The <a href="http://en.wikipedia.org/wiki/Time_management">Wiki</a> site covers different aspects of it.</p>

<p>Here I would like to share my understandings and what my choices are to make good use of my time.<br/>
1. Planning &amp; Prioritizing<br/>
2. Protecting thy time<br/>
3. Identifying waste</p>

<h2>Planning &amp; Prioritizing</h2>

<p>Planning &amp; Prioritizing is a must.  It helps us not losing any task we have to do but also makes sure we do the most urgent &amp; important ones first.  <a href="http://en.wikipedia.org/wiki/Getting_Things_Done">Getting Things Done</a> is a great methodology.  However, <strong>DON&#8217;T SPEND TOO MUCH TIME ON THE LIST.</strong>  You cannot prioritize or categorize your tasks if the list fills with tons of items especially if you have some level of <a href="http://en.wikipedia.org/wiki/Obsessive%E2%80%93compulsive_disorder">Obsessive-compulsive disorder</a>.</p>

<p>I have the same issue stated in <a href="http://simpleprogrammer.com/2012/10/28/my-15-minute-rule-to-productivity/">My 15 Minute Rule to Productivity</a>:</p>

<blockquote><p>I’ll delay doing something that I know is important until the last moment that it needs to be done.</p></blockquote>

<p>Hence, my rule on making a list is: <strong>Make a task list only for the tasks I need to do TODAY and come up an estimated time on how long to take it.</strong>  How if I have something important to do in the future? Put it to calendar/reminder and also include an estimated time so that this task will go into my future TODAY task list.</p>

<p>And then the rule of picking the task from a list is: <strong>Scan the tasks and their estimated time; Pick the one I MUST start it.</strong>  This action is to take out the most IMPORTANT and URGENT task which is actually prioritizing.  The estimated time made in the first step helps me know when it is the right time to pick which task.</p>

<h2>Protecting thy time</h2>

<p>What does this mean?  It means avoid distraction.  Distraction is the major time killer which makes us ineffective.  <a href="http://en.wikipedia.org/wiki/Pomodoro_Technique">Pomodoro Technique</a> is the one I like.  It imposes an external mechanism (a timer here) to keep us focus on work for a short period (generally 25 mins) and also have some rest inbetween.  The rest in between the working period can be used to reply your email, IM or actually relaxing your mind.  Its working style is like marathon which needs constant pacing.</p>

<p>However, this mechanism might have an issue to some knowledge worker.  Here is the view in one of <a href="http://www.joelonsoftware.com/articles/fog0000000068.html">Joel Spolsky&#8217; article</a> with which I totally agree:</p>

<blockquote><p>We all know that knowledge workers work best by getting into &#8220;flow&#8221;, also known as being &#8220;in the zone&#8221;, where they are fully concentrated on their work and fully tuned out of their environment. They lose track of time and produce great stuff through absolute concentration.<br/>
&#8230;<br/>
The trouble is, getting into &#8220;the zone&#8221; is not easy. When you try to measure it, it looks like it takes an average of 15 minutes to start working at maximum productivity.  Sometimes, if you&#8217;re tired or have already done a lot of creative work that day, you just can&#8217;t get into the zone and you spend the rest of your work day fiddling around, reading the web, playing Tetris.</p></blockquote>

<p>Hence, the Pomodoro Technique might knock you out of the zone and you should choose your own timer based on the average time you can maintain your flow state instead of 25 minutes.  Or you can just let your flow flows until you think you need to get a break.  The point is to try to maintain some continuous period to get uninterrupted.</p>

<p>But generally, Pomodoro is helpful under certain circumstances like management level people who don&#8217;t even have continous time more than 25 minutes or some working environment has interruption often or someone whose productive time shorter than 25 minutes and want to extend their flow state.</p>

<h2>Identifying waste</h2>

<p>Planning is the starting process of time management, while identifying the waste is the retrospect process.  Sometimes, it&#8217;s even more important than the planning.  That is because planning is working on something uncertain, while retrospect is based on reality and intended to make improvement.  History and fact can tells us more on the our regular time usage pattern.</p>

<p>How to identify waste?  Track the time and see where your time spends.  Our memory is unreliable to keep track of how long we spend on the things done.  We need to actually write it down and write it down when it happens (at the beginning or the end of the task).</p>

<p>By tracking where the time we spend, we can find out where the waste is and try to eliminate it.  Also we can consolidate those discretionary time slots to a continuous unit for more effective usage.  There is a wonderful chapter &#8220;Know Thy Time&#8221; in <a href="http://www.amazon.com/Effective-Executive-Drucker-Series-Peter/dp/0750643900/ref=sr_1_2?ie=UTF8&amp;qid=1356302486&amp;sr=8-2&amp;keywords=The+Effective+Executive">The Effective Executive</a> by <em>Peter F. Drucker</em> describing how to make good use of time.  Highly recommend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A response pends forever issue in MongoDB, Connect and Node.js]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/12/05/a-response-pends-forever-issue-in-mongodb-connect-and-nodejs/"/>
    <updated>2012-12-05T21:08:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/12/05/a-response-pends-forever-issue-in-mongodb-connect-and-nodejs</id>
    <content type="html"><![CDATA[<p><strong>My ignorance</strong><br/>
When I first switched to use <a href="https://github.com/masylum/connect-mongodb">connect-mongodb</a> to replace the MemoryStore in <a href="https://github.com/senchalabs/connect">Connect</a>, I found that the homepage of my pet project cannot be even loaded and it seems the response is kept waiting there.  If I switched back to use MemoryStore, it&#8217;s all fine.  There must be something wrong when I am using <a href="http://www.mongodb.org/">MongoDB</a> for session management.</p>

<p>First, I dig into the <em>session.js</em> in Connect.  Around line 267:</p>

<figure class='code'><figcaption><span>connect/lib/middleware/session.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// proxy end() to commit the session</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">end</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">;</span>
</span><span class='line'><span class="nx">res</span><span class="p">.</span><span class="nx">end</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">encoding</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span> <span class="o">=</span> <span class="nx">end</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">encoding</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">debug</span><span class="p">(</span><span class="s1">&#39;saving&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">resetMaxAge</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">debug</span><span class="p">(</span><span class="s1">&#39;saved&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">encoding</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>After opening the debug feature in <a href="http://nodejs.org">Node</a>, I found that it&#8217;s never going into the callback of <em>session.save()</em>.  Hence, the &#8216;saved&#8217; message is never printed in the console after &#8216;saving&#8217; and the response is never ending.</p>

<p>Why would this happened?  I kept tracing the code and found that <em>session.save()</em> in Connect is calling the <em>sessionStore.set()</em> method.  The <em>MongoStore.set()</em> method in <em>connect-mongodb.js</em> is just purely calling <em>collection.update()</em> and no much magic there.  However, it seems the <em>update()</em> method call has either no err and data coming back.  Is there something wrong with the MongoDB or the Collection?</p>

<p>MongoDB log doesn&#8217;t seems to have any query or update action recorded and I just found that there are 10 connections started every time I started my app, but I remembered there were 5 connections (default pool size) before (Actually, I haven&#8217;t noticed that this is the phenomenon of the problem I have at that time yet).</p>

<p>Without any clue, I checked the initialization of the MongoStore and find below code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">server_config</span><span class="p">.</span><span class="nx">isConnected</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">authenticateAndGetCollection</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">server_config</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">callback</span><span class="p">(</span><span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Error connecting (&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">err</span> <span class="k">instanceof</span> <span class="nb">Error</span> <span class="o">?</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span> <span class="o">:</span> <span class="nx">err</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="nx">authenticateAndGetCollection</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It turns out that the flow goes into <em>server_config.connect()</em> again.  But why?  DB should be initialized in below code which is intended to encapsulate all DB operation.</p>

<figure class='code'><figcaption><span>DbManager.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">DbManager</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">db</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Db</span><span class="p">(</span><span class="s1">&#39;tyt&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Server</span><span class="p">(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">27017</span><span class="p">,</span> <span class="p">{</span><span class="nx">auto_reconnect</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span> <span class="p">{}),</span> <span class="p">{</span><span class="nx">safe</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">(){});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">getDb</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">db</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">DbManager</span> <span class="o">=</span> <span class="nx">DbManager</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>In my node app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">DbManager</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./db.js&#39;</span><span class="p">).</span><span class="nx">DbManager</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">mongoStore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;connect-mongodb&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Configuration</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">session</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">secret</span><span class="o">:</span> <span class="s1">&#39;kenspirit&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">key</span><span class="o">:</span> <span class="s1">&#39;tt.sid&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">cookie</span><span class="o">:</span> <span class="p">{</span><span class="nx">secure</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">maxAge</span><span class="o">:</span> <span class="mi">300000</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">store</span><span class="o">:</span> <span class="k">new</span> <span class="nx">mongoStore</span><span class="p">({</span><span class="nx">db</span><span class="o">:</span> <span class="nx">DbManager</span><span class="p">.</span><span class="nx">getDb</span><span class="p">()})</span>
</span><span class='line'>  <span class="p">}));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are familiar with Node, you may have already noticed what I haven&#8217;t done right here.  I am assuming the DB should be connected and ready for use already as I have called <em>db.open()</em> during DbManager&#8217;s construction.  However, Async is the most importance concept in Node, <em>db.open()</em> takes my callback will immediately return and it doesn&#8217;t guarantee it&#8217;s opened already.  If I change to below code, problem solved.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">DbManager</span><span class="p">.</span><span class="nx">getDb</span><span class="p">();</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">session</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">secret</span><span class="o">:</span> <span class="s1">&#39;kenspirit&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">key</span><span class="o">:</span> <span class="s1">&#39;tt.sid&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">cookie</span><span class="o">:</span> <span class="p">{</span><span class="nx">secure</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">maxAge</span><span class="o">:</span> <span class="mi">300000</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">store</span><span class="o">:</span> <span class="k">new</span> <span class="nx">mongoStore</span><span class="p">({</span><span class="nx">db</span><span class="o">:</span> <span class="nx">db</span><span class="p">})</span>
</span><span class='line'>    <span class="p">}));</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>The root of not responding</strong><br/>
I wonder where is the actual source to make the response kept waiting?  I have configured the <em>auto_reconnect</em> already.  Later I found that in mongodb:</p>

<figure class='code'><figcaption><span>mongodb/lib/mongodb/db.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">Db</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">open</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">_state</span> <span class="o">=</span> <span class="s1">&#39;connecting&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">serverConfig</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">self</span><span class="p">,</span> <span class="p">{</span><span class="nx">firstCall</span><span class="o">:</span> <span class="kc">true</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">err</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Set that db has been closed</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">openCalled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// Return error from connection</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">// Set the status of the server</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">_state</span> <span class="o">=</span> <span class="s1">&#39;connected&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">// Callback</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">self</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Db</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_executeInsertCommand</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">db_command</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="c1">// If the pool is not connected, attemp to reconnect to send the message</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">_state</span> <span class="o">==</span> <span class="s1">&#39;connecting&#39;</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">serverConfig</span><span class="p">.</span><span class="nx">autoReconnect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">process</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">self</span><span class="p">.</span><span class="nx">commands</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span><span class="s1">&#39;insert&#39;</span><span class="p">,</span> <span class="s1">&#39;db_command&#39;</span><span class="o">:</span><span class="nx">db_command</span><span class="p">,</span> <span class="s1">&#39;options&#39;</span><span class="o">:</span><span class="nx">options</span><span class="p">,</span> <span class="s1">&#39;callback&#39;</span><span class="o">:</span><span class="nx">callback</span><span class="p">});</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>mongodb/lib/connection/server.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">Server</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">connect</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">dbInstance</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="c1">// Force connection pool if there is one</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">server</span><span class="p">.</span><span class="nx">connectionPool</span><span class="p">)</span> <span class="nx">server</span><span class="p">.</span><span class="nx">connectionPool</span><span class="p">.</span><span class="nx">stop</span><span class="p">();</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="c1">// Create connection Pool instance with the current BSON serializer</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">connectionPool</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ConnectionPool</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">host</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">port</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">poolSize</span><span class="p">,</span> <span class="nx">dbInstance</span><span class="p">.</span><span class="nx">bson</span><span class="p">,</span>  <span class="k">this</span><span class="p">.</span><span class="nx">socketOptions</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="c1">// Set up on connect method</span>
</span><span class='line'>    <span class="nx">connectionPool</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;poolReady&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Create db command and Add the callback to the list of callbacks by the request id (mapping outgoing messages to correct callbacks)</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">db_command</span> <span class="o">=</span> <span class="nx">DbCommand</span><span class="p">.</span><span class="nx">NcreateIsMasterCommand</span><span class="p">(</span><span class="nx">dbInstance</span><span class="p">,</span> <span class="nx">dbInstance</span><span class="p">.</span><span class="nx">databaseName</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// Check out a reader from the pool</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">connection</span> <span class="o">=</span> <span class="nx">connectionPool</span><span class="p">.</span><span class="nx">checkoutConnection</span><span class="p">();</span>
</span><span class='line'>      <span class="c1">// Set server state to connEcted</span>
</span><span class='line'>      <span class="nx">server</span><span class="p">.</span><span class="nx">_serverState</span> <span class="o">=</span> <span class="s1">&#39;connected&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">// dbInstance._state = &#39;connected&#39;;  If I add this line here, even if my code doesn&#39;t do any change, it works.</span>
</span><span class='line'>      <span class="p">...</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, the root cause is found.  Normally, when <em>db.open()</em> is called, it sets its <em>_state = &#8216;connecting&#8217;</em>, and it then will call <em>server.connect()</em> to create connection pool and in the callback, it sets its <em>_state = &#8216;connected&#8217;</em> again.  However, my case is that the second call <em>server.connect()</em> in MongoStore.js first make the first connection pool stops and then creates a new connection pool again(This should be where makes the mongo db log has 10 connections opened).  Somehow, the callback in normal flow cannot be executed so that <em>db._state</em> has not been set to &#8216;connected&#8217;.  What is more, the callback set in <em>MongoStore.js</em> doesn&#8217;t set the <em>db._state</em> to &#8216;connected&#8217;.  The <em>db._state</em> is remained in &#8216;connecting&#8217; forever which makes my update command keep pushing to its commands stack.</p>

<p><strong>Most appropriate way to initialize MongoDB and its connections in Node.js</strong><br/>
I began to wonder what is the &#8220;most appropriate way&#8221; to initialize MongoDB and manage its connections and googled around.</p>

<p>At first, I found a similar question asked in <a href="http://stackoverflow.com/questions/10656574/how-to-manage-mongodb-connections-in-a-nodejs-webapp">StackOverFlow</a>.<br/>
However, the reply doesn&#8217;t seem to be reasonable.  It recommands opening a new connection (actually, a DB and Connection Pool there) per request.  And it said it&#8217;s due to MongoDB is asynchronous.  It&#8217;s pretty confusing and the asynchronous mechanism in Node should be achieved by callback instead of creating new connection per request.  If so, what is the point of using pool then?  This approach should be more slow.</p>

<p>Later I found out a reply from the author of node-mongodb-native in <a href="http://stackoverflow.com/questions/10307994/where-can-i-find-complete-documentation-concerning-node-mongodb-native/10349450#10349450">StackOverFlow</a> too.  It clearly stated &#8220;DO NOT call open on each request.&#8221;.</p>

<p>I believe only opening MongoDB once with appropriate pool size and initialize node application in the <em>db.open()</em> callback should be the right way to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个多维度数据匹配的RDBMS数据库表设计的想法]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/10/27/db-design-for-multi-dimension-data/"/>
    <updated>2012-10-27T23:48:37+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/10/27/db-design-for-multi-dimension-data</id>
    <content type="html"><![CDATA[<p>首先, 我先要说明一下, 这里的“多维度”可能并不太准确.  这里说的并不是数据仓库里的维度, 而只是数据的属性.</p>

<p>举个例子可能就比较好明白了.</p>

<p>比如, 如果你上京东, 或者苏宁一些网上商场买电脑, 上面一堆的过滤条件 (比如: CPU, 内存, 硬盘等) , 其实就是电脑的属性, 也就是我这里说的数据 (电脑) 的维度。</p>

<p>我最近做的一个系统模块, 其实就是关于数据维度匹配和使用的.  这个模块的大概原理是这样的, 根据一些输入的数据维度值, 在数据库内寻找出维度值和输入的维度值不冲突的数据.</p>

<p>假设数据库现在想保存的数据是眼镜的资料, 那么这些数据的维度有: 材料, 颜色, 设计 (半框, 全框, 等), 面向人群 (青, 中, 老), 面向性别(男, 女).  我现在要做的模块就是当一个人来了, 我把他的相对应的维度 (性别, 喜欢的颜色, 设计, 材料, 等), 输入到数据库中查找匹配的数据 (眼镜), 系统应该要拿出和这个人要求不冲突的.</p>

<p>这个模块要怎么设计呢?  数据库的表要怎么设计呢?  这里假设系统用的是JPA Entity和Oracle DB.</p>

<p>首先应该有一个表是存储了眼镜的信息的 (UUID, 名称, 厂家, 等).  一般来说, 刚才的那些关于眼镜的属性也就是数据维度, 自然的想法, 当然也是放在同一张表里面, 也就是用表里面不同的列, 来存放不同的维度, 比如:</p>

<p>表 GLASSES的列有:</p>

<p>| UUID | 名称 | 厂家 | 材料 | 颜色 | 设计 | 面向人群 | 面向性别 |</p>

<p>那么, 假设一个喜欢红色半框设计眼镜的男人来找眼镜, 根据输入来查寻数据的SQL就会是类似:</p>

<pre><code>SELECT * FROM GLASSES
WHERE 设计 = '半框' AND 颜色 = '红' AND 面向性别 = '男';
</code></pre>

<p>但是, 其实要找出和这个人要求不冲突的眼镜, 情况并不是这样子的.</p>

<p>比如说, 很可能GLASSES表里有些眼镜, 它的某些属性列为空, 假设有一款眼镜并不指定面向性别.  你可能会说SQL就要变成这个样子:</p>

<pre><code>SELECT * FROM GLASSES
WHERE (设计 = '半框' OR 设计 IS NULL)
AND (颜色 = '红' OR 颜色 IS NULL)
AND (面向性别 = '男' OR 面向性别 IS NULL);
</code></pre>

<p>但是, 也有可能这个人对设计没什么偏好.  如果是这样的话, 那可能你就要动态生成SQL, 也就是这个人如果哪个条件没有要求, 哪个条件就不加到SQL里面, 比如对设计没偏好:</p>

<pre><code>SELECT * FROM GLASSES
WHERE (颜色 = '红' OR 颜色 IS NULL)
AND (面向性别 = '男' OR 面向性别 IS NULL);
</code></pre>

<p>到这里, 问题就比较清楚了.  如果从写代码和DB设计来考虑, 属性做为表的列来设计的话, 我个人觉得有几种不好之处:</p>

<ul>
<li><p>如果以后要添加或者删除属性, 表结构要不断改变, 代码也要不断改变来生成各种组合的动态SQL.</p></li>
<li><p>从SQL的特性 (条件不确定, 维度组合多) 来看, 并且如果维度或者说列多的话, 为每一个维度创建index也不太可行, 查询效率也不高.</p></li>
</ul>


<p>所以, 自然的, 我把数据维度的值, 设计成存储在子表里, 结构示例如下:</p>

<p>表GLASSES_ATTRIBUTES:</p>

<p>| UUID | GLASSES_UUID | 维度类别 | 维度值 |</p>

<p>这样的话, 上面的SQL就转换成:</p>

<pre><code>SELECT * FROM GLASSES G
WHERE NOT EXISTS (
    SELECT 1
      FROM GLASSES_ATTRIBUTES GA
    WHERE G.UUID = GA.GLASSES_UUID
              AND (
                    （维度类别 = '颜色‘ AND 维度值 &lt;&gt; '红色')
                     OR
                    （维度类别 = '面向性别‘ AND 维度值 &lt;&gt; '男')
                    )
);
</code></pre>

<p>这条SQL也是需要动态生成的, 也就是最里面的OR的部份.  如果一款眼镜, 它没有定义特定的维度, 那它在子表里面就没有记录, 也满足要求.  如果是那个人没有什么特殊要求, 也就不需要生成特定的OR的部份.</p>

<p>这种实现方法, 个人认为相对来说好处有:</p>

<ul>
<li><p>虽然SQL也要动态生成, 但是变化的部份从表的列名, 转换成数据值, 逻辑会相当简单, 减少一些Hardcode的成份.</p></li>
<li><p>数据库表GLASSES_ATTRIBUTES可以创建一个维度类别+维度值的复合index就可以了</p></li>
</ul>


<p>不过, 老实说, 我也不敢肯定后面一种SQL的查询效率会高点, 因为也会有比较多OR的条件, 并且还要用上NOT EXISTS.  我曾经测试过在GLASSESE里有6W条记录, GLASSES_ATTRIBUTES上有37W条记录的环境里, 用3个维度(也就是3个OR组合), 找出1W条左右记录, 大概0.01秒.  用6个维度, 找出1K条左右记录, 大概0.1秒;  用11个维度, 找出15条记录, 也大概0.2秒左右.  所以, 看起来, 好像还可以.</p>

<p>其实, 我在这里把数据的维度值用行记录来存储, 而不是列值, 还因为实际的系统需求, 还有更多复杂的要求.  再举一个纯属搞笑的例子, 但实际原理是一样的.</p>

<p>比如一个女的要征婚, 她列下了一些要求, 也就是&#8221;如果男的xxx, 就要准备yyy之类的.   xxx就是数据 (男) 的维度, 比如年龄30以上, 或者帅, 等.  yyy就是需求, 比如有房, 有车,  年薪,  爱宠物什么的.</p>

<p>这里呢, 会有3个表:</p>

<ul>
<li><p>主表 - 这里的每一条记录, 代表一份要求</p></li>
<li><p>维度子表 (CONDITIONS) - 存的是归到这份要求, 男的情况是什么, 如年龄30以上, 不帅</p></li>
<li><p>需求子表 (REQUIREMENTS) - 存的是归到这份要求, 男的要准备什么, 女的才会嫁他, 如车30W以上, 房要50W以上等</p></li>
</ul>


<p>系统的行为, 就是当把一个男的所有情况输入进去, 就会找到所有女方的需求是什么, 都组合在一起, 作为总的要求.  这种情况下, 系统就复杂了.  比如主表有三条记录A, B, C.  维度和需求分别是:</p>

<pre><code>CONDITIONS:

| A | 年龄 | 30以上 |
| B | 相貌 | 不帅 |
| C | 相貌 | 不帅 |
| C | 宠物 | 不讨厌 |

REQUIREMENTS:
| A | 车 | 20W以上 |
| B | 房 | 50W以上 |
| C | 房 | 40W以上 |
| C | 车 | 有 |
</code></pre>

<p>看得明白吗?  假设一个男的30以上, 那他就要有20W以上的车才行了.  如果他又不帅, 但是讨厌宠物的话, 就要加上50W以上的房了.  既然需求有组合的情况, 不知道你们有没有想到一些问题, 就是需求是否会有冲突.</p>

<p>假设男的30以下, 不帅, 不讨厌宠物, 那查询出来的记录就是B和C, 那这里会同时对房有要求, 但这种情况, 不算有冲突, 因为C的Codition是包含了B的, 所以只要有车和40W的房就行了.  但是如果男的30以上, 不帅, 不讨厌宠物, 那就A, B, C都是满足条件的, 但是A和C对车都有要求, 选哪个呢?  这时就要解决冲突了, 其中一种做法, 就是在不同的Condition上, 加上比重, 比如年龄看重点, 宠物看轻点, 那就以A的为准, 要20W以上的车了.</p>

<p>好玩吧?  所以, 把数据维度设成行记录来存储, 还可以把不同维度加上其它一些设置, 如比重等, 配置起来会比较方便.</p>

<p>不知道大家有什么意见?  欢迎拍砖.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ExtJS, Jasmine, Unit Test – Part 2 (Ajax & Behavior)]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/08/30/extjs-jasmine-unit-test-part-2-ajax-behavior-2/"/>
    <updated>2012-08-30T23:04:06+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/08/30/extjs-jasmine-unit-test-part-2-ajax-behavior-2</id>
    <content type="html"><![CDATA[<p>Ajax is a pretty common used feature now for every JS Rich application. How to test it is common headache for many application.</p>

<p>ExtJS has been adopted in the two companies I worked and am working for.  Hence, here I only show you how to test Ajax in ExtJS built application.</p>

<p>In my previous post <a href="http://www.thinkingincrowd.me/blog/2012/08/13/extjs-jasmine-unit-test-part-1-philosophy-and-test-for-store/">ExtJS, Jasmine, Unit Test – Part 1 (Philosophy and Test for Store)</a>, the part on how to test Autoload <em>Ext.data.Store</em> simply override <em>Ext.lib.Ajax</em> so that it does nothing and <em>Ext.data.Store</em> is tested through manual loading data.</p>

<p>That is the simplest way but cannot fulfill the requirement to test real production code which uses Ajax feature.</p>

<p><strong>How real production code might look like if the application is built entirely by ExtJS?</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">xxx</span><span class="p">.</span><span class="nx">UiImpl</span> <span class="o">=</span> <span class="nx">Ext</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">xxx</span><span class="p">.</span><span class="nx">Ui</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">initComponent</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">xxx</span><span class="p">.</span><span class="nx">UiImpl</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">initComponent</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">emptyNameWarningMsg</span> <span class="o">=</span> <span class="s1">&#39;Name is empty!&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">duplicateNameWarningMsg</span> <span class="o">=</span> <span class="s1">&#39;Name has been in used!&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">nameField</span> <span class="o">=</span> <span class="nx">Ext</span><span class="p">.</span><span class="nx">getCmp</span><span class="p">(</span><span class="s1">&#39;xxx.name&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">initEventHandlers</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">initEventHandlers</span> <span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">nameField</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;blur&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">validateName</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">validateName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">sName</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">nameField</span><span class="p">.</span><span class="nx">getValue</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">sName</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">nameField</span><span class="p">.</span><span class="nx">markInvalid</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">emptyNameWarningMsg</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">Ext</span><span class="p">.</span><span class="nx">Ajax</span><span class="p">.</span><span class="nx">request</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">url</span> <span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">appName</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot;/foo/validateName&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">method</span> <span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">params</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">name</span> <span class="o">:</span> <span class="nx">sName</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">success</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">responseText</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">this</span><span class="p">.</span><span class="nx">nameField</span><span class="p">.</span><span class="nx">markInvalid</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">duplicateNameWarningMsg</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">failure</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>                <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;validate failure!&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nx">scope</span><span class="o">:</span> <span class="k">this</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above is a simple UI implementation class which extends from an UI class.  You can safely guess that this UI class simply has one name field which is bound with a Blur Event.  The Blur Event handler triggers an Ajax calls to validate whether the typed-in name is empty or duplicated within the system.  Pretty straightforward, right?</p>

<p><strong>Considering the Test Philosophy I mentioned in my last post, what contracts or behaviors we should test against here?</strong></p>

<p>Here are some examples:</p>

<ol>
<li>Contract between user and our system (blur event).  I would expect there would some code like this in my Jasmine Spec:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">oUI</span><span class="p">.</span><span class="nx">nameField</span><span class="p">.</span><span class="nx">fireEvent</span><span class="p">(</span><span class="s1">&#39;blur&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Contract between backend data structure and frontend handling on Ajax call.  I am expecting if I set the <em>responseText</em> from Ajax call to be not empty, the <em>nameField</em> in UI should be marked as invalid and show the <em>oUI.duplicateNameWarningMsg</em>.  Say, the response can be stub as:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">lib</span><span class="p">.</span><span class="nx">Ajax</span><span class="p">.</span><span class="nx">response</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">status</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">responseText</span><span class="o">:</span> <span class="s1">&#39;Duplicate&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Contract between implementation logic and UI behavior experienced by user.  The point mentioned above that <em>nameField</em> in UI should be marked as invalid and show the <em>oUI.duplicateNameWarningMsg</em> or <em>oUI.emptyNameWarningMsg</em> under different situations<strong>.</strong> Sample Spec code might be:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">oUI</span><span class="p">.</span><span class="nx">nameField</span><span class="p">.</span><span class="nx">fireEvent</span><span class="p">(</span><span class="s1">&#39;blur&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">oUI</span><span class="p">.</span><span class="nx">nameField</span><span class="p">.</span><span class="nx">getActiveError</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">oUI</span><span class="p">.</span><span class="nx">emptyNameWarningMsg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">oUI</span><span class="p">.</span><span class="nx">nameField</span><span class="p">.</span><span class="nx">setValue</span><span class="p">(</span><span class="s1">&#39;Ken&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">oUI</span><span class="p">.</span><span class="nx">nameField</span><span class="p">.</span><span class="nx">fireEvent</span><span class="p">(</span><span class="s1">&#39;blur&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">oUI</span><span class="p">.</span><span class="nx">nameField</span><span class="p">.</span><span class="nx">getActiveError</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">oUI</span><span class="p">.</span><span class="nx">duplicateNameWarningMsg</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Other Contracts (e.g. Hardcode global variable or Element Id).  Why this is needed?  Because this where most of the change happens but it&#8217;s very difficult to be aware of.  Sample Spec code might be:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">oUI</span> <span class="o">=</span> <span class="nx">Ext</span><span class="p">.</span><span class="nx">getCmp</span><span class="p">(</span><span class="s1">&#39;kentest&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>The Test Spec is already in mind but how can I use it to test against the production code?  </strong></p>

<p>I googled around and found one useful helper API - <a href="http://github.com/pivotal/jasmine-ajax">Jasmine-Ajax</a> : a set of helpers for testing AJAX requests under the Jasmine BDD framework for JavaScript.  However, now it only supports Prototype.js and jQuery.</p>

<p>I read the source and found it is not difficult to add support for ExtJS.  Hence, I modified it a bit.  Later I may submit a patch to github for this project and see whether it can be accepted.  Here I just attached the modified source first.   <a href="https://dl.dropbox.com/u/17182499/blog/2012/08/mock-ajax.js">mock-ajax</a></p>

<p>How should I include this helper class to use Jasmine to test the Ajax in ExtJS?</p>

<p>Configuration in POM.xml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;preloadSources&gt;</span>
</span><span class='line'>        <span class="nt">&lt;source&gt;</span>adapter/ext/ext-base-debug.js<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>        <span class="nt">&lt;source&gt;</span>ext/ext-all-debug-w-comments.js<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>        <span class="nt">&lt;source&gt;</span>${project.basedir}/Resources/test/js/mock-ajax.js<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>        <span class="nt">&lt;source&gt;</span>${project.basedir}/Resources/test/js/global.js<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/preloadSources&gt;</span>
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Code in file globalTestStub.js change to be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">jasmine</span><span class="p">.</span><span class="nx">Ajax</span><span class="p">.</span><span class="nx">installMock</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>How to write the Test Spec?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Test Maintenance UI&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">jasmine</span><span class="p">.</span><span class="nx">Ajax</span><span class="p">.</span><span class="nx">useMock</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;Maintenance UI should be initialized successfully&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">oUI</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">xxx</span><span class="p">.</span><span class="nx">UI</span><span class="p">({});</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">Ext</span><span class="p">.</span><span class="nx">getCmp</span><span class="p">(</span><span class="s1">&#39;kentest&#39;</span><span class="p">)).</span><span class="nx">toBeTruthy</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;Focus leaving name field should trigger unique validation.&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Ext</span><span class="p">.</span><span class="nx">lib</span><span class="p">.</span><span class="nx">Ajax</span><span class="p">.</span><span class="nx">response</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">status</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">responseText</span><span class="o">:</span> <span class="s1">&#39;Duplicate&#39;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">oUI</span> <span class="o">=</span> <span class="nx">Ext</span><span class="p">.</span><span class="nx">getCmp</span><span class="p">(</span><span class="s1">&#39;kentest&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">oUI</span><span class="p">.</span><span class="nx">nameField</span><span class="p">.</span><span class="nx">fireEvent</span><span class="p">(</span><span class="s1">&#39;blur&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">oUI</span><span class="p">.</span><span class="nx">nameField</span><span class="p">.</span><span class="nx">getActiveError</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">oUI</span><span class="p">.</span><span class="nx">emptyNameWarningMsg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">oUI</span><span class="p">.</span><span class="nx">nameField</span><span class="p">.</span><span class="nx">setValue</span><span class="p">(</span><span class="s1">&#39;Ken&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">oUI</span><span class="p">.</span><span class="nx">nameField</span><span class="p">.</span><span class="nx">fireEvent</span><span class="p">(</span><span class="s1">&#39;blur&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">oUI</span><span class="p">.</span><span class="nx">nameField</span><span class="p">.</span><span class="nx">getActiveError</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="nx">oUI</span><span class="p">.</span><span class="nx">duplicateNameWarningMsg</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can you see how all above works now?  Please take it a trial and share your comment with me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ExtJS, Jasmine, Unit Test - Part 1 (Philosophy and Test for Store)]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/08/13/extjs-jasmine-unit-test-part-1-philosophy-and-test-for-store/"/>
    <updated>2012-08-13T23:02:18+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/08/13/extjs-jasmine-unit-test-part-1-philosophy-and-test-for-store</id>
    <content type="html"><![CDATA[<p>After the <a href="http://www.thinkingincrowd.me/blog/2012/08/06/extjs-jasmine-maven-integration/">integration</a> for ExtJS, Jasmine and Maven is done, we should consider how the unit test should be done for some web application built by ExtJS.</p>

<p>My previous ExtJS projects experience are all for internal company usage in Retail or Logistics business, the UI is composed of plenty components and full of user interaction.  Hence, business logic are often intervened with UI behavior together.  This is also one of the reason previously we think it&#8217;s difficult to go for JS Unit Test.  (Maybe just we are too inexperienced on that.  Please share your experience to us if you have any.)</p>

<p>Assuming I need to introduce JS Unit Test to a system without any Unit Test covered, what should the general JS Unit Test principles to be firstly considered?  My opinions are:</p>

<blockquote><ol>
<li><p>To test external contract against each ExtJS Component or JS function.  The external contract is where changes often take place.</p></li>
<li><p>To test business logic (data calculation/validation, etc.) because this is where the real value in the business.</p></li>
<li><p>Not to test the UI behavior (Window popup, Panel/Tree collapse/expand, Drap/Drop, Animation, etc.).  It&#8217;s quite difficult to mimic and verify the UI behavior because you have to twist your mind somehow to &#8220;tranform&#8221; the UI behavior to manual control the &#8220;movement&#8221; and then verify it.  It&#8217;s just writing even more UI logic to control other UI logic.</p></li>
<li><p>Not to test all Ajax requests because it&#8217;s slow and actually should be considered as Integration Test.  It&#8217;s better to mock the interface data to test the Ajax caller &amp; response handler.</p></li>
</ol>
</blockquote>

<p>Let&#8217;s see some real Unit Test example.  (Here some assumptions are made on how the components are generated and used in System: UI are completely built by ExtJS Designer.  It may not be the best practice, but it&#8217;s the way I think the real practice can be applied.)</p>

<p><strong>Ext.data.Store</strong></p>

<p>You might first wonder why Unit Test need to be done for Store component?  I got to tell you that I have met many bugs that are introduced because of fields&#8217; definition changed.  This is the major contract bound the Store with the caller.</p>

<p>Below is a typical xxx.Datastore.js file generated by Ext Designer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">ns</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">xxx</span><span class="p">.</span><span class="nx">DataStore</span> <span class="o">=</span> <span class="nx">Ext</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Ext</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">JsonStore</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">constructor</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">cfg</span> <span class="o">=</span> <span class="nx">cfg</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>        <span class="nx">xxx</span><span class="p">.</span><span class="nx">DataStore</span><span class="p">.</span><span class="nx">superclass</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">Ext</span><span class="p">.</span><span class="nx">apply</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">storeId</span><span class="o">:</span> <span class="s1">&#39;xxx.DataStore&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://www.foo.com/stub&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">root</span><span class="o">:</span> <span class="s1">&#39;data.rows&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">totalProperty</span><span class="o">:</span> <span class="s1">&#39;data.totalCount&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">autoLoad</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">fields</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;code&#39;</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;name&#39;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">},</span> <span class="nx">cfg</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="k">new</span> <span class="nx">xxx</span><span class="p">.</span><span class="nx">DataStore</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>How should we test it?  This is an autoLoad Store.  As a JS source file to be linked in for testing, I cannot use Jasmine spyOn to stub it.  That is because JS source file is loaded before Jasmine spyOn in Spec can ever be run.  The only thing I can think of is to override the Ext Ajax lib to not doing actual request call.</p>

<p>Code in file globalTestStub.js to override the Ajax lib:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ext</span><span class="p">.</span><span class="nx">lib</span><span class="p">.</span><span class="nx">Ajax</span><span class="p">.</span><span class="nx">request</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="nx">success</span><span class="o">:</span> <span class="kc">true</span><span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Configuration in POM.xml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;preloadSources&gt;</span>
</span><span class='line'>        <span class="nt">&lt;source&gt;</span>adapter/ext/ext-base-debug.js<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>        <span class="nt">&lt;source&gt;</span>ext/ext-all-debug-w-comments.js<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>        <span class="nt">&lt;source&gt;</span>${project.basedir}/Resources/test/js/globalTestStub.js<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/preloadSources&gt;</span>
</span><span class='line'>    <span class="nt">&lt;jsSrcDir&gt;</span>${project.basedir}/Resources/js<span class="nt">&lt;/jsSrcDir&gt;</span>
</span><span class='line'>    <span class="nt">&lt;jsTestSrcDir&gt;</span>${project.basedir}/Resources/test/js<span class="nt">&lt;/jsTestSrcDir&gt;</span>
</span><span class='line'>    <span class="nt">&lt;sourceIncludes&gt;</span>
</span><span class='line'>        <span class="nt">&lt;include&gt;</span>xxx.DataStore.js<span class="nt">&lt;/include&gt;</span>
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ExtJS source and the globalTestStub.js are included in <em>preloadSources</em> so that all Stub/Mock code required for Unit Test can be initialized correctly before other JS sources and Test Spec files without polluting real production code.</p>

<p>How to write a Test Spec then?  Actually, there is no fixed way, but just a simple rule: to test the contract.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;xxx.Datastore&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be able to initialized&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">oStore</span> <span class="o">=</span> <span class="nx">Ext</span><span class="p">.</span><span class="nx">StoreMgr</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s1">&#39;xxx.DataStore&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">oStore</span><span class="p">).</span><span class="nx">toBeTruthy</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should load data correctly&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">oStore</span> <span class="o">=</span> <span class="nx">Ext</span><span class="p">.</span><span class="nx">StoreMgr</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s1">&#39;xxx.DataStore&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">oStore</span><span class="p">.</span><span class="nx">loadData</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">rows</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="nx">code</span><span class="o">:</span> <span class="s1">&#39;C1&#39;</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;N1&#39;</span>
</span><span class='line'>                    <span class="p">},</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="nx">code</span><span class="o">:</span> <span class="s1">&#39;C2&#39;</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;N2&#39;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">],</span>
</span><span class='line'>                <span class="nx">totalCount</span><span class="o">:</span> <span class="mi">2</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">oStore</span><span class="p">.</span><span class="nx">getTotalCount</span><span class="p">()).</span><span class="nx">toEqual</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">oRecord</span> <span class="o">=</span> <span class="nx">oStore</span><span class="p">.</span><span class="nx">getAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">oRecord</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;code&#39;</span><span class="p">)).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;C1&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">oRecord</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;N1&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unit Test for non-autoload Store would be similar but easier.</p>

<p>Beside how the Test is written, I would like to draw your attention to how I wrote the description for the Suite and the Spec.  I am not sure whether I understood the <a href="http://dannorth.net/introducing-bdd/">Behavior Driven Development</a> comprehensively because I am still learning it.  However, I think this simple mind change helps me to think about how the behavior should be more than just simply how to write Test to meet coverage.  It can even helps us to review our design whether particular code belongs to the right place.</p>

<p>Let&#8217;s explore how Unit Test can be achieved more for ExtJS later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ExtJS, Jasmine, Maven - Integration]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/08/06/extjs-jasmine-maven-integration/"/>
    <updated>2012-08-06T22:59:31+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/08/06/extjs-jasmine-maven-integration</id>
    <content type="html"><![CDATA[<p>After briefing <a href="http://www.thinkingincrowd.me/blog/2012/08/05/extjs-jasmine-maven-why-i-am-working-on-them/">Why I am working on them</a>, let me show you how they can be integrated all together first.</p>

<p><a href="http://pivotal.github.com/jasmine/">Jasmine</a> is a BDD Test Framework which can be integrated in many environments.  At first, I want to integrate it with <a href="http://nodejs.org/">NodeJS</a> which I have been eager to use for a long time.  However, when using NodeJS in Windows environment, I encountered some strange error &#8220;Class not found: File&#8221; if I tried to start my local Weblogic server.  After I removed NodeJS installation path from environment variable PATH, the error is gone.</p>

<p>The other reason I decided not integrating Jasmine in NodeJS in our project is because it might be difficult for some people to learn a completely new stuff and it is also not compatible to our JAVA development environment &amp; process.  <a href="maven.apache.org">Maven</a> is a better choice for us now because we should be using it for our project&#8217;s build management.</p>

<p>Let&#8217;s see how it can be done.  Here, I assume you already know what Maven is and have your own project POM.xml.  Then, simply setup <a href="https://github.com/searls/jasmine-maven-plugin">jasmine-maven-plugin</a> in your POM.xml like below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>com.github.searls<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>jasmine-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.2.0.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;extensions&gt;</span>true<span class="nt">&lt;/extensions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;executions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;execution&gt;</span>
</span><span class='line'>            <span class="nt">&lt;goals&gt;</span>
</span><span class='line'>              <span class="nt">&lt;goal&gt;</span>test<span class="nt">&lt;/goal&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/goals&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/execution&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/executions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;preloadSources&gt;</span>
</span><span class='line'>      <span class="nt">&lt;source&gt;</span>${project.basedir}/[SOME_PRELOAD_FILES_GOES_HERE]<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/preloadSources&gt;</span>
</span><span class='line'>  <span class="nt">&lt;jsSrcDir&gt;</span>${project.basedir}/Resources/js<span class="nt">&lt;/jsSrcDir&gt;</span>
</span><span class='line'>  <span class="nt">&lt;jsTestSrcDir&gt;</span>${project.basedir}/Resources/test/js<span class="nt">&lt;/jsTestSrcDir&gt;</span>
</span><span class='line'>  <span class="nt">&lt;sourceIncludes&gt;</span>
</span><span class='line'>            <span class="nt">&lt;include&gt;</span>[TO_BE_TESTED_JS_FILES_GOES_HERE]<span class="nt">&lt;/include&gt;</span>
</span><span class='line'>      <span class="nt">&lt;include&gt;</span>[TO_BE_TESTED_JS_FOLDER_GOES_HERE]/*.js<span class="nt">&lt;/include&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/sourceIncludes&gt;</span>
</span><span class='line'>  <span class="nt">&lt;specIncludes&gt;</span>
</span><span class='line'>      <span class="nt">&lt;include&gt;</span>[SPEC_JS_FOLDER_GOES_HERE]/*.js<span class="nt">&lt;/include&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/specIncludes&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;/plugin&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After you modify those CAPITALIZED PLACEHOLDER to fit your own project, you can simply type &#8220;mvn test&#8221; in command line to see whether Jasmine is included into your Maven test lifecycle.  You should have something similar in output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>INFO<span class="o">]</span> Executing Jasmine Specs
</span><span class='line'>-------------------------------------------------------
</span><span class='line'> J A S M I N E   S P E C S
</span><span class='line'>-------------------------------------------------------
</span><span class='line'><span class="o">[</span>INFO<span class="o">]</span>
</span><span class='line'>Test Suite Name 1
</span><span class='line'>  Spec 1
</span><span class='line'>  Spec 2
</span><span class='line'>
</span><span class='line'>Test Suite Name 2
</span><span class='line'>  Spec 3
</span><span class='line'>
</span><span class='line'>Results: 3 specs, 0 failures
</span></code></pre></td></tr></table></div></figure>


<p>If you encounter any error, please go check the documentation site of this plugin or leave a comment here.  The plugin setup should be quite strange forward.</p>

<p>File path in <em>sourceIncludes</em>, <em>specIncludes</em> are relative paths to <em>jsSrcDir</em> and <em>jsTestSrcDir</em>.  <em>preloadSources</em>, <em>sourceIncludes</em>, <em>specIncludes</em> are treated as ordered list so that you can properly arrange your JS and Jasmine Spec in correct order when your JS or Spec has some loading dependency.</p>

<p>OK, now preparation for Unit Test is done.  Let&#8217;s see how Jasmine can be used to do Unit Test especially for ExtJS project together in my next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ExtJS, Jasmine, Maven - Why I am working on them?]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/08/05/extjs-jasmine-maven-why-i-am-working-on-them/"/>
    <updated>2012-08-05T15:52:24+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/08/05/extjs-jasmine-maven-why-i-am-working-on-them</id>
    <content type="html"><![CDATA[<p>Before going into how to setup <a href="http://pivotal.github.com/jasmine/">Jasmine</a> to do Unit Test for <a href="www.sencha.com/products/extjs">ExtJS</a>, I think I should describe why I am doing this.</p>

<p>I have been using ExtJS for around 4 years.  My first company used HTML + ExtJS to build the UI while the current one use ExtJS completely to do that.  I have encountered lots of cases that well-tested behavior failed after some new features introduced in.</p>

<p>Everyone knows that it&#8217;s because there lacks Unit Test.  However, there have never been any Unit Test done for Javascript in any project.  There are many of the reasons behind that, such as tight schedule, not enough attention etc.  But the most important reason that outweights or strengthens others is that Unit Test for Javascript is way too difficult than Java, especially when Javascript is used intensively to build the UI and implement business logics.</p>

<p>One of the reason makes Javascript hard to do Unit Test is due to good tools unavailability;  the other one is that most developers tend to not separating business logic from UI code quite clearly.</p>

<p>After the emergence of <a href="http://seleniumhq.org/">Selenium</a>, I have once thought it should be the right tool to address this issue.  However, after reading Selenium Doc and seeing what my previous colleagues did for recording &amp; playing, I think Selenium should be used mainly for Integration Test, not in Unit Test level.  My opinion is further strenghten after watching a video from Google Testing Expert and reading the blog from Martin Fowler:</p>

<blockquote><p><a href="http://www.infoq.com/cn/presentations/duannian-agile-test">让测试也敏捷起来</a> by 段念</p></blockquote>

<p><a href="http://martinfowler.com/bliki/TestPyramid.html">TestPyramid</a> by Martin Fowler</p>

<p><strong>The main points in TestPyramid are:</strong></p>

<blockquote><ol>
<li><p><strong>Low-level unit test should be many more than high level end-to-end testing through GUI.</strong></p></li>
<li><p><strong>Testing through UI is slow, brittle, expensive to write.</strong></p></li>
<li><p><strong>A rich javascript UI should have most of its UI behavior tested with javascript unit tests using something like Jasmine.</strong></p></li>
</ol>
</blockquote>

<p>Above is a long long purpose briefing, I hope it worthes to let you know the background and also agree with me on this.  I heard about Jasmine before reading the post by Martin Fowler, however, I kept thinking that it&#8217;s quite difficult or even impossible to use Jasmine to test those ExtJS UI components.</p>

<p>Until I did sit down and really tried to use Jasmine to test the ExtJS code, I can say that Unit Test against ExtJS by Jasmine can be achieved at some level once we know what to test for.</p>

<p>In next post, I will show you the steps to bind ExtJS, Jasmine, Maven together to do the Unit Test and what I think we should test against.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[i18n, ExtJS and JAWR]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/07/21/i18n-extjs-and-jawr/"/>
    <updated>2012-07-21T17:19:57+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/07/21/i18n-extjs-and-jawr</id>
    <content type="html"><![CDATA[<p><strong>What is i18n and How to do it in Javascript?</strong></p>

<p>i18n, which is so called internationalization, is to support multilingual for a platform.</p>

<p>ExtJS, JavaScript framework, provides numerous UI  components to build complex UI.</p>

<p>In order to implement i18 in UI page purely built by ExtJS, it&#8217;s inevitable to translate the title, label of the ExtJS components into proper language.  From my point of view, there should be two ways for that:</p>

<ol>
<li><p>Use the translated text directly in the UI components during construction</p></li>
<li><p>Use separate JS to replace the text before rendering, say in initComponent method or beforeRender event handler.</p></li>
</ol>


<p>There are pros and cons for each approach:</p>

<ol>
<li><p>Approach #1 is easy, but injecting logic for i18n text translation into the UI components construction is just like adding event handler into the HTML directly and it makes the code for text translation spread all around the code building UI.</p></li>
<li><p>Approach #2 separates the i18n implementation detail which makes it easier to change.  The benefit got from this can be easier prototyping, unit testing, and future enhancement if i18n implementation changed.</p></li>
</ol>


<p>In order to avoid violation of separation of concern principle, I would like to choose approach #2.  If you agree with me, you can keep going.</p>

<p><strong>How to use JAWR to implement i18n</strong></p>

<p>Normally, i18n text file is built with property file (e.g. msg_en_UI.properties) in which an entry is represented as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">msgkey</span><span class="o">=</span><span class="s">msgText in i18n</span>
</span></code></pre></td></tr></table></div></figure>


<p>This kind of file is very common in JAVA and <a href="http://jawr.java.net">JAWR</a> can be used to interpret this kind of property file and built code for i18n.  It&#8217;s quite easy to setup JAWR and I am not going to brief it here.  In a word, if your i18n text entry built like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">main.hello.world</span><span class="o">=</span><span class="s">Hello world!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can get the translated text by:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">messages</span><span class="p">.</span><span class="nx">main</span><span class="p">.</span><span class="nx">hello</span><span class="p">.</span><span class="nx">world</span><span class="p">();</span> <span class="c1">// Hello world!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actually, JAWR build the text to Javascript data structure (messages is default prefix) to make a function call to get the actual text (i18n is based on which property file loaded depending on your locale resolver).</p>

<p>OK, till now, do you get the idea and like this kind of implementation?</p>

<p>Personally, I don&#8217;t quite like it.  Although the usage of data structure is to prevent polluting the Javascript namespace, directly mapping to data structure with the message key makes it hard to dynamically handle the text translation or even in batch operation.  Imagine the message key is the ID of the UI component, you have to use eval() function on &#8220;ID of UI component + ()&#8221; if you want a generic way.</p>

<p>Hence, I would rather have a Message Manager class having a function to return the translated message by passing in the message key.  If you agree with me again, keep follow.</p>

<p>Luckily, I am able to do this because JAWR provides flexibility to use a customized message generator.  Let&#8217;s see how to do it.  According to its doc about <a href="http://jawr.java.net/docs/messages_gen.html">message</a> and <a href="http://jawr.java.net/docs/generators.html">generators</a>, we need just need to do three things:</p>

<ol>
<li>Set below sample lines in jawr.properties file:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">jawr.custom.generators</span><span class="o">=</span><span class="s">xxx.MyResourceBundleMessagesGenerator</span>
</span><span class='line'>
</span><span class='line'><span class="na">jawr.js.bundle.lib.mappings</span><span class="o">=</span><span class="s">**mymessages**:com.myapp.messages(mynamespace)</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>Build the customized generator.  How? The simplest way is to extends the <em>net.jawr.web.resource.bundle.locale.ResourceBundleMessagesGenerator</em> and overrides its <em>public Reader createResource(GeneratorContext context)</em> to use our own generator and overrides its <em>public String getMappingPrefix()</em> to return our own mapping <strong>mymessages</strong>.</p></li>
<li><p>Build the customized creator.  How?  The simplest way is to extends the <em>net.jawr.web.resource.bundle.locale.message.MessageBundleScriptCreator</em> and overrides its <em>protected Reader doCreateScript(Properties props)</em> to write our own script generation code.</p></li>
</ol>


<p>Below is the sample code in my <em>xxx.MyResourceBundleMessagesGenerator</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Reader</span> <span class="nf">createResource</span><span class="o">(</span><span class="n">GeneratorContext</span> <span class="n">context</span><span class="o">)</span><span class="err"> </span><span class="o">{</span>
</span><span class='line'>  <span class="n">MyMessageBundleScriptCreator</span> <span class="n">creator</span> <span class="o">=</span><span class="err"> </span><span class="k">new</span> <span class="n">MyMessageBundleScriptCreator</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">creator</span><span class="o">.</span><span class="na">createScript</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getCharset</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getMappingPrefix</span><span class="o">()</span><span class="err"> </span><span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;mymessages&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below is the sample code in my <em>xxx.MyMessageBundleScriptCreator</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">StringBuffer</span> <span class="nf">loadScriptTemplate</span><span class="o">()</span><span class="err"> </span><span class="o">{</span>
</span><span class='line'>  <span class="n">StringWriter</span> <span class="n">sw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">();</span>
</span><span class='line'>  <span class="n">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">is</span> <span class="o">=</span> <span class="n">ClassLoaderResourceUtils</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;/xxx/messages.js&quot;</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="n">IOUtils</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="n">sw</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">BundlingProcessException</span><span class="o">(</span><span class="s">&quot;Fail to load the message template. &quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">IOUtils</span><span class="o">.</span><span class="na">close</span><span class="o">(</span><span class="n">is</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">sw</span><span class="o">.</span><span class="na">getBuffer</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="n">Reader</span> <span class="nf">doCreateScript</span><span class="o">(</span><span class="n">Properties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">script</span> <span class="o">=</span> <span class="n">loadScriptTemplate</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>  <span class="n">Set</span> <span class="n">keys</span> <span class="o">=</span> <span class="n">props</span><span class="o">.</span><span class="na">stringPropertyNames</span><span class="o">();</span>
</span><span class='line'>  <span class="n">StringBuffer</span> <span class="n">messages</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">(</span><span class="s">&quot;{&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">keys</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">props</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="n">messages</span><span class="o">.</span><span class="na">append</span><span class="o">(</span>
</span><span class='line'><span class="s">&quot;\&quot;&quot;</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">&quot;\&quot;: \&quot;&quot;</span> <span class="o">+</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">defaultString</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">).</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&quot;\&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;\\\\\&quot;&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;\&quot;,\n&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">messages</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">messages</span><span class="o">.</span><span class="na">deleteCharAt</span><span class="o">(</span><span class="n">messages</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">messages</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;}&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">script</span> <span class="o">=</span> <span class="n">script</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;@namespace&quot;</span><span class="o">,</span> <span class="n">RegexUtil</span><span class="o">.</span><span class="na">adaptReplacementToMatcher</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">namespace</span><span class="o">));</span>
</span><span class='line'>  <span class="n">script</span> <span class="o">=</span> <span class="n">script</span><span class="o">.</span><span class="na">replaceFirst</span><span class="o">(</span><span class="s">&quot;@messages&quot;</span><span class="o">,</span> <span class="n">RegexUtil</span><span class="o">.</span><span class="na">adaptReplacementToMatcher</span><span class="o">(</span><span class="n">messages</span><span class="o">.</span><span class="na">toString</span><span class="o">()));</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">StringReader</span><span class="o">(</span><span class="n">script</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, let&#8217;s see what is in my message.js:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">window</span><span class="p">.</span><span class="nx">MultilingualMessageMgr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">MultilingualMessageMgr</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">msgMap</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">getMsg</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">namespace</span><span class="p">,</span> <span class="nx">msgKey</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">argLen</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">argLen</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">msg</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">argLen</span> <span class="o">===</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">msg</span> <span class="o">=</span> <span class="nx">msgMap</span><span class="p">[</span><span class="nx">namespace</span><span class="p">][</span><span class="nx">msgKey</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">argLen</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">argLen</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">msg</span> <span class="o">=</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;{&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;}&quot;</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">msg</span><span class="p">;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">putMsgs</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">namespace</span><span class="p">,</span> <span class="nx">msgObj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">msgMap</span><span class="p">[</span><span class="nx">namespace</span><span class="p">]</span> <span class="o">=</span> <span class="nx">msgObj</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">})();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">MultilingualMessageMgr</span><span class="p">.</span><span class="nx">putMsgs</span><span class="p">(</span><span class="s2">&quot;@namespace&quot;</span><span class="p">,</span> <span class="err">@</span><span class="nx">messages</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let me explain a bit on what the <em>MultilingualMessageMgr</em> does here.</p>

<p>It&#8217;s an object which is returned by anonymous function.  This object has a <em>getMsg</em> and <em>putMsgs</em> function.  Both of them is referring to an <em>msgMap</em> object in the anonymous function scope so that it cannot be accessed directly outside <em>MultilingualMessageMgr</em>.  The <em>getMsg</em> function takes at least two arguments including namespace and message key, any other parameters are treated some value to replace the placeholder in message.  The <em>getMsg</em> function puts the messages json object with namespace bound to it for retrieval later.</p>

<p>With this <em>MultilingualMessageMgr,</em> multilingual message translation can be done by sample call like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">MultilingualMessageMgr</span><span class="p">.</span><span class="nx">getMsg</span><span class="p">(</span><span class="nx">namespace</span><span class="p">,</span> <span class="nx">msgKey</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, centralizing i18n logic to dynamically replace all ExtJs UI components can be realized by building the property file with component id as message key and iterating all components to replace them.</p>

<p>If you have any comment or better idea on how to do i18n in JavaScript, please let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[待在优秀的地方，还是把所在的地方改变的优秀]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/07/15/stay-in-good-or-change-to-be-good/"/>
    <updated>2012-07-15T17:31:25+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/07/15/stay-in-good-or-change-to-be-good</id>
    <content type="html"><![CDATA[<p>已经换了工作差不多一年，期间还有幸被派去美国学习所做的系统后台开发，趁着本博客重新启航，是时候回顾一下了。</p>

<p><strong>小公司 vs 大公司</strong></p>

<p>在小公司那么多年来，给我最大的感受就是灵活性强，行动敏捷。再加上本人后来能担当上Team Lead角色，所以，有什么好的想法，自然容易尝试和贯彻。但是公司的敏捷，一但被利用成不断高强度赶项目而忽视了人员培养，代码和框架的改进，团队和系统的问题便不断浮现。这也成为我离开的原因之一。不过，对怎么样推动改变上，我并没有做的很好。在能自己拍板范围外的事，虽然有提意见，但是推动不够，主要都在等领导的改变和决策，主动性还不够强。</p>

<p>来了大公司差不多一年了，最大的感受和没有来之前想象到的差不多，就是沟通成本非常高，行动迟缓。再加上职位上我只是小兵一名，有好的想法，也没法通过“强硬”的手段，推广出去。在哪里体现出迟缓的问题呢？</p>

<ol>
<li><p>问题达成结论难。邮件多，开会部门多，人员杂，是大公司的通病。这其实还不是主要问题。问题是一开始讨论邮件或者开会的人员，在等级或者部门上来讲，大家都是平级的。通常情况是老大级别一般先没有参于，即使有，也是各方的老大，也都在，结果还是打平。在谈一个问题的时候，除非大家对一个问题共识较多，或者各方影响不大，方案比较容易通过。但是如果主要涉及一方要其它各方做更大改变，就不容易出结论了。因为大家平级，不好说一方强行推行。那么最终可能要拉锯一段时间，最后再把老老大拉出来，才能拍板。</p></li>
<li><p>推行改变很难。改变，本来就是很难的事情。想一想睡惯懒觉的你突然要自己每天早起30分钟，跑5圈，你做的到吗？更何况如果是要改变别人，那更难了。再想象在大公司，你要改变的是多少个别人。举个例子，从10月份进公司我问为什么不用Maven，有人答我，可能今年5月，到几个星期前我再抱怨，再有人说8月。现在就放话在这，等等看什么时候实施得了。另一个原因同开会难有定调一样，涉及到影响流程，或某些人员的工作比较大的时候，就一定要有一位拍板的人物了。</p></li>
</ol>


<p>其实无论是软件还是非软件公司，大了，自然不好管了。Yahoo不是也被批官僚气氛严重，甚至连Google也不例外。Agile的提出，其中一个焦点也致于减少沟通环节。我们也引入了Agile，但是，感觉形式多于内容，反而更乱。</p>

<p><strong>如何改变，如何敏捷</strong></p>

<p>个人认为，要做到Agile，很重要的一个思想就是行动迅速，不断反省，找出不完善的地方，加以改正。这里面，非常需要的一个手段，就是试错。但是很多大公司，很难实现Agile的原因，一个原因是人多难协调，行动缓慢，另一个原因就是不敢试错。一般来说，大公司除了客观原因由于子系统杂，多，乱外，更是因为人员求稳，怕担责的思想，不敢随意做改变。怕错了，出问题，承担后果。</p>

<p>之前看了一本David J. Anderson写的关于<a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402/ref=sr_1_1?ie=UTF8&amp;qid=1342343902&amp;sr=8-1&amp;keywords=Kanban+David+J">Kanban</a>的书，个人感觉是非常适合大公司引用来进行流程，甚至是文化的改进的，甚至比Agile更有效。其中一个重要的原因是Agile的推行，一般意味着对现有流程的一次大的变革。如果人员思想跟不上，或者没有抓住重点，流于形式的话，问题更多。反而，Kanban强调的是在现有流程上的不断发现各个部位的瓶颈，不断进行细微改善和调整。里面推崇的Kaizen文化，更是精华：“任何人对流程改进的尝试，即使失败，或者出问题，都不会被追究。” 要做到这点，虽然需要有良好的衡量机制，更重要的是一种开放和允许尝试的文化。当每个人都不必惧怕所谓的承担责任时，甚至鼓励自发的对流程进行改善的时候，力量可是不容小看的。</p>

<p>具体操作上来说，要推行改变，首先要对你提出的东西，有深刻的理解，它的优缺点都要清楚，必须强调改变带来的好处是远大于它的缺点的。因为抵制的人，总会拿它的缺点说事。而且，你也必须要有坚实的论证，才能说服同事，甚至是你的老板。之前看了一本书《<a href="http://www.amazon.com/Driving-Technical-Change-Terrence-Ryan/dp/1934356603/ref=sr_1_1?ie=UTF8&amp;qid=1342343784&amp;sr=8-1&amp;keywords=Driving+Technical+Change">Driving Technical Change</a>》by Terrence Ryan，主要正是教人如何推行改变。最后，当然得期望你上面的领导是英明的，你就事半功倍了。</p>

<p><strong>改变才是永恒</strong></p>

<p>其实，没有哪里可以永恒保持优秀，重要的是如何不断的改变，来追寻优秀。小公司可以变得臃肿，大公司也可以敏捷。重要的是，首先自己要有一颗秉持Kaizen的心，和同一班同样追寻改变和优秀的人合作。</p>

<p>所以，今年我的目标就是&#8221;Push for Change; Act as Model” - “推行改变，以身作则”。其实这作为每一年的目标都是正确的，但是，对于现在的我来说，是迫切的。这正是针对自己之前的不足，也是针对目前的环境。问题多的地方，机会才多。这么一段时间以来，我感觉也确实推动了一些东西，无论直接还是间接，甚至方法上可能并不正确，或者为自己留下后患，我都无所畏惧，将继续前进。</p>

<p>可喜的是，新任的Team Lead，对问题上和我有比较一致的看法，也很积极推动团队的前进，感觉非常高兴。同时，可以在他身上，学习如何在大公司内推动改变，确实难得。前景暂时还是光明的，只需要继续努力。</p>

<p>接下来，具体的想改变的事项，我希望能在目前项目的前端开发引入Unit Test，以验证自己对前端开发和测试的想法，以及作为发展自己前端开发能力的一项手段。敬请期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[曾经，最后]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/02/15/ever-never/"/>
    <updated>2012-02-15T02:42:33+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/02/15/ever-never</id>
    <content type="html"><![CDATA[<p>曾经真心相待，换来质疑无奈。只能痛心离去，送上最后祝福。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[到底是前进还是后退？]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/02/05/forward-or-backward/"/>
    <updated>2012-02-05T02:07:56+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/02/05/forward-or-backward</id>
    <content type="html"><![CDATA[<p>自从我离开旧公司以来，都有旧同事问我新公司这边有没有什么好的职位。</p>

<p>一开始，其实都系正常，因为问我的人，都已经在那做了和我差不多那么多年，甚至都还是第一份工作。所以，希望出去闯闯也理所当然。但是近来，好像人数还有增多的倾向，而且是服役多长时间的都有，有扩散的倾向。这还不是让我最担心的，更重要的是，从每个人身上，我都听到些怨言。这样，感觉情况就不妙了。</p>

<p>我走的时候，就听说公司，上至大老板开始更加重视起和员工的沟通，员工培养上面来。</p>

<p>本想我走了后，可能还真是做了件好事，但为什么所谓“更加重视员工”的做法还会引起那么多怨言和激发人员要走的想法呢？</p>

<p>拿我听到的两点来说吧:</p>

<p><strong>1.  加薪方面</strong></p>

<p>本来人员流失后，加薪是正常和需要的，尤其是我之前还在职并还能发表一下意见的时候，已经和上层说过这个问题了。公司开发部中层方面（3年左右）的人员，薪酬水平有点偏低的。但我听到的很多怨言，都说这次加薪幅度，很多人都不满意。估计主要是中层加的不多。像一些做了5年以上的，公司里非常重视的少数，好像并没太大声音听到，因为我也知道有一些加的好像真不少，我也和他们说其实公司对他们已经很不薄，不要以为外面真的高很多而跟风轻率跳槽。</p>

<p>所以我感觉，可能中层普遍加的都并不多，薪酬集中到某些人上面去了。这里是一个问题，因为感觉公司以前一直有一个想法就是，最重要的那么年资老的，能干活的人，保住就行了。其它人就无所谓了。反正有老员工带着干。</p>

<p>其实这样的想法是错误的，会引起下面的问题。要保住和发展公司，不是只要有老员工就行的了。</p>

<ul>
<li><p>新员工感觉不受重视，没发挥空间。因为上层，也只认得老员工，有事也找他们。新员工Turn over太快。其实这也和上层缺乏和下面的员工进行沟通有关。我就听一个新员工说过：“我们这些新人，其实都不重要，都是堆砖头的，老员工在就行了。”</p></li>
<li><p>老员工经常要带新员工，但因为他们流动太快，老员工都有培训疲劳症了。公司的产品本来是有一个比较好的框架的，做的事情，一部份是重复性劳动，一部份是业务逻辑或复杂的customization。如果一直要老员工培训新人来做重复性的劳动，老员工就会很烦，而且因为项目紧还要忙于处理剩下的部分，还没有时间去改进框架和产品。框架很快就被毁了。</p></li>
<li><p>公司总不招一些有经验的人，这样，老员工学习新知识，新文化只能靠上层，或者自学了。可是，因为忙，基本哪还有时间，有时周末都还要加班。上层也少和下面的沟通，更不要说创造培训的机会了。这样，久而久之，老员工感觉学不到东西了，你工资又不比别人有吸引力，那为什么还要留着呢，更何况连本来保留着的一些感情，还被一些人，一点一点的摧毁了。老员工的流失也成了必然。听一个老员工说，他临走前问上层为什么不招有经验的人，那个竟然答，我们不需要有经验的，进来还不是要教他？我真是无语了。</p></li>
</ul>


<p>还有另一方面是，有人说这次加薪幅度不高，但是搞了个什么类似奖金的东西，就是做满一年后，会再拿到双薪外可能多一个月左右的工资吧。但据他们算过以后，觉得如果分摊到每一个月现拿，才差不多达到他们觉得理想的水平。所以普遍让人觉得，又想让人留下，又一点诚意都没有。</p>

<p>其实这种压后拿钱，和别人给个什么期权是一样道理，是有用的，但要看什么时候。如果别人都很不爽了，或者觉得你没有前途了，还要来干什么呢？所谓乱世用重典，重要时候，一定要用让人一击即倒的手段，让人无法拒绝，而不是还谈什么感情，理想的。过年那段时间，我刚好看了一本关于人脑学习特性的书(Brain Bugs)里面有说到，人普遍来说是比较看重眼前利益的，你说现在得到20元，或者一个月后拿到40元。基本都是选现拿的。因为远期目标并不多多少，而且还要看你说话算话不。所以，如果真如我听到的，要等上一年，而且即使现在分摊出来，才是理想的价格，可以说是没有多少吸引力的。</p>

<p><strong>2.  请假方面</strong></p>

<p>听说现在请假很不容易，要提前一个有，还真有人被reject了，可能多是一两天那种情况吧，我不知道是真的那么忙呢，还是专门出这种政策来防人出去面试找工作的。如果真是后一种情况，还真是脑残做法。所谓上有政策，肯定下有对策，请个病假不就行了，还不用提前说呢。退一步说，如果真是那么忙，据我所知，以前一起工作的同事，基本和我熟悉的，每个人工作都是很负责任的。有需要的话，晚上周末自觉加班，过年过节被点名要开电话或加班，最多抱怨一下，也还是这样。到真有事要请假，相信也是有急事，事后也会补回来。再退一步说，现在公司那么多怨言的情况下，还出这样的政策，真是还怕不够多吗？想走的人，真不爽了，没找到新工作，也会走。真搞不懂他们是怎么想的。</p>

<p>之前，我在LinkedIn里还看了两篇文章：</p>

<p><a href="http://www.linkedin.com/news?actionBar=&amp;articleID=5562842806801670153&amp;ids=cPATdjAPe3wSdj0PczkMd3oRdiMPczcNd3AMdz0Sd30MdjsOdzkRb34Me30Rdj8Scj8Uej0Vej8SdjkIcj8Td3gRej0UdzoOc3AQczoRdiMPdj4MdPoNc3wSc3wOd3wOdzkR&amp;aag=true&amp;freq=weekly&amp;trk=eml-tod2-b-ttl-0&amp;ut=2yCqJXsKqFql41">Six Reason Why You Should Give Your Employee a 4-Day Week</a></p>

<p><a href="http://www.linkedin.com/news?actionBar=&amp;articleID=1026708525&amp;ids=cPsOdzoVdj8MciMTdzcScPoVdzATe3wTcj4NdzkRb34Tdj8PcjgOc34Idj8Re30Tdz8MciMPcPsMe3sMcz0N&amp;aag=true&amp;freq=weekly&amp;trk=eml-tod2-b-ttl-1&amp;ut=0D2UlrYgjNgR41">Why You Should Give Your Employee Unlimited Vacation</a></p>

<p>里面其实说的都是为什么这样会更尊重员工，减少公司成本，激起员工工作热情，还可以从中找出积极向上的人。其实想起来何尝不是呢？想起我们平时不是有很多假期都没有放，要堆到年后才清吗？放个长一点的假，其实也是觉得无聊，想干活了。其实有些时候，放松了，可能更好管。</p>

<p>本来既然已经离开，就不好再说什么，但是看到这种情况，还是忍不住要发泄一下。也不知道那些那么另人不爽的政策，是不是又是那个人想出来的。真是“成也萧何 败也萧何”。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resolve Error of "weblogic.management.DeploymentException: Error: Unresolved Webapp Library references"]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/02/04/resolve-error-of-weblogic-management-deploymentexception-error-unresolved-webapp-library-references/"/>
    <updated>2012-02-04T09:07:35+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/02/04/resolve-error-of-weblogic-management-deploymentexception-error-unresolved-webapp-library-references</id>
    <content type="html"><![CDATA[<p>When I tried to deploy an EAR to weblogic these days, I encountered one problem if deploying it to a newly created server, but not the default ADMIN one.</p>

<blockquote><p>weblogic.management.DeploymentException: Error: Unresolved Webapp Library references for &#8220;ServletContext@36720652[app:WLS_PRS_DOC module:wls_prs_doc p
ath:/wls_prs_doc spec-version:2.5]&#8221;, defined in weblogic.xml [Extension-Name: jsf, Specification-Version: 2, exact-match: true], [Extension-Name: jstl
, Specification-Version: 1.2, exact-match: true]</p></blockquote>

<p>It looks strange from the error message that the EAR is referring to some jars but cannot be resolved.</p>

<p>I remember that these two jars have been set as shared library in Weblogic since the very beginning and why the problems occur when I am deploying it to the newly created server but not ADMIN.</p>

<p>I wonder around by using Google and happened to see this website.</p>

<p><a href="http://middlewaremagic.com/weblogic/?p=2938">http://middlewaremagic.com/weblogic/?p=2938</a></p>

<p>It&#8217;s also said that the directory having the Shared Library should be included when you are calling weblogic.appc to compile your EAR.</p>

<p>I immediately realized that those two shared library might not been included in the server I newly created.  Hence, I set them up in the shared library.  And the problems solved.</p>

<p><a href="https://dl.dropbox.com/u/17182499/blog/2012/02/1.jpg"><img src="https://dl.dropbox.com/u/17182499/blog/2012/02/1.jpg?w=574" alt="Image" /></a><a href="https://dl.dropbox.com/u/17182499/blog/2012/02/1.jpg"><img src="https://dl.dropbox.com/u/17182499/blog/2012/02/2.jpg?w=614" alt="Image" /></a></p>

<p> </p>

<p> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[9种比钱更好的激励员工的方法]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2011/12/17/9-things-that-motivate-employee-more-than-money/"/>
    <updated>2011-12-17T00:24:26+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2011/12/17/9-things-that-motivate-employee-more-than-money</id>
    <content type="html"><![CDATA[<p>激励员工的士气</p>

<p>最近看到篇文章：“<a href="http://goo.gl/ushlH">9种比钱更好的激励员工的方法</a> (9 Things That Motivate Employees More Than Money)”。</p>

<p>第1、6点，展示了公司的高层有没有真正的关心过下属，是真的把他们做的事都看在眼里，放在心上，还是只是说说而已。表扬不应该是空泛的，应该很具体，让下属知道，原来我的老板真的看在眼里，知道我在做什么的，还肯特意抽时间和他吃饭，谈话。如果真的关心，员工是感觉的到的。很多别的都是浮云。说到底，还是有没有心，就像关心自己朋友，家人一样。</p>

<p>第2、3、9，其实还是让员工有“当家做主”的感觉，把他和公司联系在一起。生死共存。尽量减少中间层管理人员，也是希望减少一种被命令的感觉。</p>

<p>下面是译文：</p>

<p><strong>别简单的向他们展示钱(即使你有). 下面有9种更好的方法来提升士气.</strong></p>

<p><strong>激励员工的能力</strong>是一个企业家需要具备的最重要的能力之一. 两年前, 我认识到我并不具备这种能力. 所以,我请了一个有这种能力的CEO.</p>

<p>Josh在企业界已经有12年的经验, 包括在Comcast公司运营一个重要的部门. 我知道他已经很老练, 但一开始的时候我还是对他有点怀疑. 当时我们正在经历一些成长的危机, 我认为我们并不充足的现金非常难提高公司和员工的士气.</p>

<p>我错了.</p>

<p>在他和他任命的团队领袖的帮助下, Josh不单单重建了公司的文化, 还打造了一个充满激情, 奋力拼搏的团队. 而这正是我希望致力于为发展和改善公司想做的.</p>

<p>下面是我从他身上学到的9件事:</p>

<ol>
<li><p><strong>不要吝惜表扬.</strong> 每一个人都渴望得到表扬, 而这也是最容易做到的一件事情. 再说, 从一个CEO那得到表扬, 比你想像的要有效得多. 为你的团队成员取得的任何改进提出表扬. 当你适应了一对一下为员工提出表扬, 你可以尝试在其他所有人的面前表扬那些值得表扬的人.</p></li>
<li><p><strong>把管理人员都去掉.</strong> 项目里没有项目经理? 不对吧! 请试一下. 我明白把项目经理或管理人员去掉, 让你的员工以一个团队的形式紧紧的工作而不是向某一个人汇报的做法会有点让人怀疑. 请想一想. 比让你的管理人员失望更糟糕的事情是什么? 是让你的团队失望! 让一个团队的人平等的于同事一起工作, 项目通常会做得更好更快. 他们会很早来到办公室, 留得很晚, 并把他们所有的精力集中在解决问题上面来.</p></li>
<li><p><strong>把你的想法变成是他们的.</strong> 人们都不愿意被人命令做事. 与其告诉别人你想做不什么出来; 通过一些方式让他们觉得你提出的要求好像是他们自己想出来的一样. “我想你这样做”可以说成”你不觉得如果我们这样做的话更好吗?”</p></li>
<li><p><strong>绝不批评或纠正.</strong> 任何人, 是的, 我说的是任何人, 都不愿意听到别人说他们做错了. 如果你在找一个打压士气的人, 这就是了. 要尝试一种委婉的方式让人们去提高, 从他们的错误中学习, 并解决问题. 你可以问:”这是解决问题的最好办法吗?” 这种情况下,你们是在谈论解决方案的对话中, 而不是互相指责.</p></li>
<li><p><strong>让所有的人成为领袖.</strong> 指出你下面的最出色人员的强项, 并让他们知道正是因为他们的出色表现, 你希望他们成为其它人的榜样. 这样, 定出高标准, 那他们自然而然得被激励并为了保持作为一名领袖的名声而努力.</p></li>
<li><p><strong>一星期带一名员工出吃午饭.</strong> 让他们得到惊喜. 别发公告来说明制定出这样一个政策. 走到一名员工面前, 然后邀请他和你共进午餐. 这是非常简单的方法让他们知道你有关注和感激他们的辛勤工作.</p></li>
<li><p><strong>认可并给于奖励.</strong> 这两件事有很多形式: 大声在公司会议点名说出他成功的为公司做了什么事情. 比赛或举办游戏并把结果记录在白板上,让任何人都可以看到. 有形的奖励也行, 但别太昂贵了. 尝试一些事情像晚餐, 奖杯, spa服务和牌匾等.</p></li>
<li><p><strong>举办公司派队.</strong> 以一个团队来做事情可以维系一个团队很长时间. 举办公司郊游活动, 生日派队, 快乐时光时间. 别只是等到节假日才举办公司活动. 一年内不间断的举办活动可以让你的员工知道所有人都在一起.</p></li>
<li><p><strong>分享荣誉和痛苦.</strong> 当你的公司表现好的时候,庆祝. 这是最好的时间来让所以人知道你感激他们每一个人的辛勤劳动. 当人们帮助你的公司成功的时候, 尽你的最大努力让人们知道你是会怎么来感激他们的. 如果有什么让人失望的事情, 同样于所有人分享. 当你期望有很好的表现的时候, 你的团队应该知道公司当前的位置. 要坦白和透明.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过艰难的六步让你成长为一名出色的程序员]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2011/10/14/six-steps-to-be-good-programmer/"/>
    <updated>2011-10-14T14:53:26+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2011/10/14/six-steps-to-be-good-programmer</id>
    <content type="html"><![CDATA[<p>在我决定要在技术上，下狠功夫时，看到一篇非常好的文章。</p>

<h2>以下是我的译文，期望与大家共勉：</h2>

<h2><a href="http://www.gamedev.net/blog/355/entry-2250592-become-a-good-programmer-in-six-really-hard-steps/">通过艰难的六步让你成长为一名优秀程序员</a></h2>

<p>05 September 2011</p>

<p>Posted by <strong><a href="http://www.gamedev.net/index.php?showuser=33873">ApochPiQ</a></strong> <a href="http://www.gamedev.net/index.php?showuser=33873&amp;f="><img src="http://public.gamedev.net/public/style_images/master/user_popup.png" alt="" /></a></p>

<p>在GDNet论坛里，其中一类比较常见到的是像这样的一些主题：“你好，我刚 [ 买了台电脑 | 写了一个简单的游戏 | 发现了一个游戏引擎 ] ，我想知道从这起步的话，可以走到哪？如果说我想要最终能实现某个特定目标的话，我需要学习什么东西呢？”首先，你必须明白，Peter Norvig 很久以前就已经非常清楚的知道: <a href="http://norvig.com/21-days.html">成为一名程序员要花费10年时间</a>。现在市面上充斥大量的&#8221;短时间内学会X&#8221; 类型的书; 还有一大堆博客教你 &#8220;如何通过一些简单的方法提高编程水平&#8221;; 总的来说，很多人总是在寻找一些能够让他们通过最少的努力来成为专家的方法。</p>

<p>我在这里想把标准调高一点。与其告诉你5种容易的方法来在21天内写出令人惊艳的代码, 我将要告诉你的是事实是怎么样的。请看如何通过艰难的六步让你成长为一名出色的程序员。_
_</p>

<p><strong>第一步：坚持。沉下心，深吸一口气。如果做不到就一边去观鸟算了。</strong>
当然, 你可以反复折腾，写一些小巧的Shell脚本或者几个小游戏。到这里，如果你已经满足于你已经拥有的技能，那么只管通过最快和最容易的方法去解决你遇到的问题就可以了。 我不想忽视这个选择的合理性，有些人没有时间（或者甚至没有意愿）成为一个编程高手。如果你并不为你将训练你的手艺上十年直至你精通它为止的想法而津津乐道的话，那就别那么干。但是不要被迷惑了，你将一直只能被局限在你以前能做什么和能把什么做好。如果你几经权衡，认为那已经足够。好，那么你就没有必要继续阅读下去了。</p>

<p>对于继续阅读下来的我们，其实还是有这么一些东西吸引我们，让我们真真正正精通编程技巧。我们想成为专家，忍者，领袖级人物 - 任何超高级的冲击你幻想的名词。对于我们来说，10年看上去是合理的投资。可能看上去有那么点沉重，但如果这本身就是值得你去做的事情，就值得你做对，不是吗？</p>

<p>所以，要想成为出色的程序员的第一步，就是吞下苦水。接受现实，这不是十年的过程，而是一辈子的过程。 像Norvig说的那样，这样做只是因为你想去做。如果不是自己愿意去做的话，没有人会在那方面变得异常出色。世界纪录保持者不会因为那天他恰巧吃下最多的热狗被纪录下来，而一定是因为那天他也确实是感到饿的。</p>

<p><strong>第二步：不断写代码</strong>
并不是说一定说写出来的，都要是很优秀的代码。而且，在很长的一段时间里，它也不会是很优秀的代码。只管写，能实现功能就好了。任何情况下，如果发觉你每天用电脑都会遇到同一个烦人的问题，想想你是不是可以写个程序来处理它。任何时候，如果你发现什么有趣的东西你想尝试一下，那么你就去做。尽可能多得去体验新的概念，工具和语言。</p>

<p>学习的过程永远也不会停止，所以，如果在一段时间里，你秉持通过不断的解决问题的同时来学习和进步的态度来前进的话，你将可以走的很远。要认识到，如果在一天、一星期、一个月内如果没有学到有趣的东西，其实是一种失败。每天，其实都有足够多的事情让你能从中学习到一点有益的东西。当然这从15年左右作为一个标记来看的话会很难，但也是完全可能的。没有一个凡人可以完全吸收这世界上关于编程的所有知识，所以，如果你感觉到你没什么东西要学习了，开始一个新的项目，写更多的代码。</p>

<p>当你这样做的时候，请留心。寻找一些模式 - 一些你经常做的，可能可以变成自动处理的东西，或者说一些你经常写的，可以被分出来放在共享包里的代码。寻找那些非常容易处理特定任务的语言，同时也找出那些处理同样任务，却不太容易的语言，并想想为什么他们有什么不同。</p>

<p>但最重要的是：不断写代码。每天，即使那只是一个简单的正则表达式来搜查你的邮件历史或别的什么。尽可能经常的用编程的手法来处理事情。记住，如果什么时候你觉得你做的事情不再显得有趣，那么，去做别的事。做一些你本身并不享受的事情没有一点意义。</p>

<p><strong>第三步: 读更多的代码</strong>
一旦你已经积累下一点项目代码后，你可以尝试去阅读别人的代码。一开始，可能有点困难。因为他们并不是你看过，或者熟悉的风格，或者用你学习过的语言去做一些事情。如果你认为那很有趣，尝试阅读完它全部的代码。别因为要深入分析任何项目而恐惧，至少别在一开始的时候。其实它可以像你做全职工作，去理解那些庞大的项目的代码库一样。选择一两件你认为你可以学会怎么去做的事，并掌握它们是如何实现的。</p>

<p>阅读新的代码为你展示出新的思维方式，并帮助你延展思维极限。延展对保持进步异常重要，而且也确保你能不断发现新的事物来学习。</p>

<p>一定要和别的程序员交流。问他们为什么和怎么做到某些事。问他们如果可以重新来过的话，是否会用不同的方式来做。问他们对你的代码有没有任何建议。(请要有礼貌。很多出色的程序员都极度繁忙，并不都有这样的时间和意愿来免费为别人的工作疏通整理和提出意见。 尊敬可以把你引领得更远。这个世界很小，声望很重要。)</p>

<p><strong>第四步: 学多门语言，掌握几 门 .</strong>
你不会有足够多的时间同时掌握多门语言，除非你非常幸运。因此，浅度学习尽量多的语言 － 了解怎么让它们运行起来，为什么它们擅长于特定某些工作，它们的缺点是什么。延展在这里很重要。不要死守于命令式语言，像C，或面向对象语言，像Java，或别的。同时也要扩展到函数式语言，或声明式语言。</p>

<p>学习一种Lisp方言。<a href="http://www.gamedev.net/topic/479651-anyone-else-using-common-lisp-in-their-game/page__view__findpost__p__4141855">原因在这</a> 它不会对你的日常编程有什么直接影响，因为你不需要使用它。但是它会让你拥有更好的思维方式，并让你深入了解简单的递归系统的优美之处。坚持到你发出“啊哈”那一瞬间。因为在那以前，它看起来都会是古怪的语法和风格搅和在一起了。但一旦你看破以后，它将一直保留在你的职业生涯内其中之一由种人类设计出来的最重要的优美的理念。</p>

<p>然后学习一种纯函数式语言。我推荐Haskell, 因为它强迫你去纯粹使用函数到别的函数式语言都无法相比的程度 (包括大部分Lisp方言) 。你必须要把你的思维扭曲到一定程度，但是一但又到了那个“啊哈”的瞬间(从我的经验来看，大概在了解到使用monads的原因所在的时候)，你会再一次把你的思维和设计出优美的系统的能力再推进一步。</p>

<p>最后，学习一种声明式语言。SQL也算，虽然单单学习SQL好像弱了点。Prolog是多数人会推荐的语言，但不是太可能会接触到。实践领域上看，XAML, XSLT和XQuery是好的学习工具, 并且它会让你了解到声明式语言背后的概念。(简单来说, 你告诉电脑你想做什么，然后它自己想办法做出来。这完全是和命令式编程反过来的，因为命令式编程是你告诉电脑怎么做然后希望它做到你想要的做的事情。而函数式语言是你要去描述数据和类型的转换。)</p>

<p>况且，在你学习Lisp方言后去学习XML工具会让你非常明显得感觉到为什么XML想重新发明s-expressions是多么的难，并且它现在是做得那么的差劲。</p>

<p><strong>第五步: 创造一门语言.</strong>
它不需要有多复杂，或包含多丰富的特性，或多抽象，或甚至有多优雅。它甚至不需要是原创的。我经常建议写一个Lisp解释器(为一种Lisp方言来做这件事是值得奖励的)来作为一种好的学习语言基础的方式。重要的是，这样你可以得到计算机语言设计的基本感觉：词法，解析，编译，解释，虚拟机，和无数的语言设计基本理念，以至于它是如何影响到它在处理不同任务时是否更有效率。</p>

<p>这样做会让你有以下三种收获：</p>

<ul>
<li><p>你会更深入的理解到你的工具是如何工作的，那么你在使用它们的时候会更有效率。</p></li>
<li><p>你会慢慢看到那些吸引你的或让你觉得很不舒服的主流语言和工具的设计理念。这样，你在今后开始新项目的时候，就能更有效的选择你的工具。</p></li>
<li><p>你将可以留意到那些可供开发的新语言和工具的处女地，为你打开前所未有的视野去学习和尝试新的东西。</p></li>
</ul>


<p><strong>第六步: 学习一些没有别的人学习过的东西</strong>
这是最难也是最后一步。到目前为止，你已经习得那些已知的东西，那些能从别的人代码，或书，或学术文章获得的东西。那些东西值得学习，但并不是标新立异的东西。</p>

<p>现在是时候打破僵界，真正上升到大师级别的时候的。现在是时候在没有别的人冒险进入过的领域开创一条血路的时候了。</p>

<p>别误会。这并不会是你真正拥有10年经验前你会尝试去做的事情。因为只有你真的走到那里，你才有可能创造出新的东西，而不是在重新发明轮子。但是，一但你精通了某一领域，其实并不是那么难去发掘出计算机的未知领域。</p>

<p>这很有可能还要再花你另外10年时间，如果不是永远的话。别放弃。记住，这应该对你来说还是非常有趣的事情。如果在任何时候，你发现你已经不在热爱你手上做的事情，去做别的事。生命太短暂了，你不应该浪费任何时间去做任何你不再想做的事情。</p>

<p>并不是所有的人都能成功走完这一步，但任何曾经尝试过的人都会受益非浅。不要让任何事情击败你。即便你没能获得图灵奖，你也应当在你的程序员生涯不断前行，向着你的终极领域进发。而这一切，都需要靠着你不断挑战难题，延展你的大脑。</p>

<p><strong>恭喜! 你已经成为一名出色的程序员了!</strong>
等等&#8230; 事实上，你可能已经因为年纪太大而离去了。对不起，下辈子再来一遍吧，可能会好运点!</p>

<p>哈哈，玩笑话。话说回来，别认为会有结束的那天。在你在成长旅途中一但开始停滞不前，你实际已经开始死亡，而变得无关了。我在编程世界里见过的最让人觉得悲伤的失败是那些选择在这领域开始并前行一段后，决定放弃，不再学习了。作为一个人，他们现在肯定完全已经对软件世界来说是毫无相干的了，也几乎可以说他们再也走不出他们目前的处境，除非，他们再继续学习前进。</p>

<p>现在就开始前进吧，写代码! 可能某一天你就会成为一名出色的程序员，然后告诉我你是怎么做的。</p>

<p>我非常热爱学习。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发团队领袖可能会犯的十个错误]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2011/08/04/10-mistakes-software-team-lead/"/>
    <updated>2011-08-04T11:18:37+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2011/08/04/10-mistakes-software-team-lead</id>
    <content type="html"><![CDATA[<p>昨天看到一篇文章不错。写出很多之前我在公司看到了一些团队的情况。</p>

<p>作为Team Lead，我觉得我做的最不够的就是Protect them from project manager。</p>

<p>下面是翻译过来的文章。省略了开头一点玩笑话。</p>

<p>Adam Roy开场通过提出以下几个团队领袖可能有的一些疑问带出主题。这些疑问是:</p>

<ol>
<li><p>我如何说服的我团队做xxx</p></li>
<li><p>我该拿团队里的那个专门搞事 的家伙怎么办?</p></li>
<li><p>我该如何做一个团队领袖呢?</p></li>
<li><p>我们为什么无法远离无谓的争吵呢?</p></li>
<li><p>我会不会失去朋友呢?</p></li>
<li><p>…</p></li>
</ol>


<p>他说这些问题其实缠绕他多年，而在接下来的讲座，他也逐一做出解答。他正在写一 本叫《开发团队领袖手记》的书，里面也涵盖这些方面的内容。</p>

<p>下面就来说说这十个错误:</p>

<p><strong>#1 </strong><strong>没有</strong><strong>认识</strong><strong>到</strong><strong>团队</strong><strong>的成熟度</strong>****</p>

<p>这点是首要注意的地方因为后面谈到的问题都是回顾到团队成熟度。Roy说，可以从3个层面来评价一个敏捷团队的成熟度。</p>

<ol>
<li><p>混乱</p></li>
<li><p>学习</p></li>
<li><p>自我引导</p></li>
</ol>


<p><strong>混乱</strong></p>

<p>一个混乱的团队就是哪都觉得很忙。  可能他们总是在争吵，或一直都被要求在非常有限的时间做太多的事情。但其实结果都一样－－混乱。没有人有任何时间变得有条理，没有人有任何时间学习新的知识因为他们一直都在忙这忙那。  如果你问我的话，这个团队明显成熟度不高。因为所有人，要么耗尽精力，要么感到沮丧因为缺乏机会学习，而最终好的人都会离开。但是，Roy说这种混乱其实非常常见，而我也很赞同。如果你是在这么一个混乱的团队里当领袖，秘诀就是要正确的行动起来。你必须自信和强势。</p>

<p><em>      <strong>当船快要沉的</strong>时<strong>候，你需要的是一个</strong>发<strong>号施令的</strong>领<strong>袖，而不是开会。</strong></em></p>

<p>一个混乱的团队里的领袖，必须坚定立场，而且可能必须要和领导层说清楚，整个团队并不能把他们要求的所有的事情都完成的了。这是一个艰难的角色。他必须坚定的做出一些艰难的决定。</p>

<p><em>       <strong>管理要做得</strong>对<strong>，做得好是一件很</strong>艰难<strong>的工作。</strong></em></p>

<p>但为什么作为一个团队领袖，你必须自己做出这些艰难的决定，而不是和团队商讨呢？ 答案很简单，因为没有足够的时间。 通过你自己做出这些执行上的决定，你让你的团队得到一些喘息的空间，可能也就是这些空间让他们把手上的事做完。当然，可能有些你做的决定是错的。这没关系，人生就是这样。但这是为了更重要的正确的事情，也就是让你的团队有成长到另一个层次的空间，一个不断学习的团队。</p>

<p><strong>学</strong><strong>习</strong>****</p>

<p>这个层面的成熟度是团队自我管理的升华，但是团队成员还是有需要得到指导的。 一个团队领袖必须持续不断的为他的团队成员带来一些挑战，和质疑，甚至可能是功课。 目标就是让团队里的成员每周都有进步，开始学会解决自己遇到的问题。</p>

<p><em>       <strong>所以，你要怎么做？</strong></em></p>

<p>作为一个学习成长的团队里的领袖，你要让团队里的成员学会以解决自己遇到的问题，然而成长为自我引导的团队。 如果某一个人带善一个问题来找你，你应该鼓励他们自己想办法解决，并问“你会怎么来处理这个问题？” 来强迫他们思考。</p>

<p><strong>自我引</strong><strong>导</strong>****</p>

<p>成熟的第三个层次就是自我引导型的团队。  这是我们所有人都想去到的地方。 在这样的团队里面，领袖更像是一个导师。他不需要像在一个混乱的团队里那样为团队做各种执行方面的决定或告诉人们该做什么。但即使是在一个自我引导的团队里，团队领袖还是需要最少50%的时间在团队上面。</p>

<p>所以，第一个错误就是不能正确认识到你的团队是在什么成熟度，也因此不能够正确的领导你的团队。如果你当他们是自我引导型的团队在运作，但其实他们事实上还是在混乱的状态，那么不久你就会在一条河上像没有浆似的乱窜。</p>

<p><strong>#2 </strong><strong>惧怕下放</strong><strong>责</strong><strong>任</strong>****</p>

<p>如果你常常习惯自己一手包办，可能要你下放责任给其它人是比较不容易接受，尤其是你觉得其它人并不能把事情做好的时候。</p>

<p><em>如果每个人都<strong>对</strong>目前手上做的事情都感到很舒服，没什么挑<strong>战</strong>的<strong>时</strong>候，就是你做的不<strong>对</strong>的<strong>时</strong>候了。</em>__</p>

<p>当你要下放责任的时候，你必须习惯让他人去承担那些本是你自己做的事情的责任。 这些外加的责任，会把他们拉出那个安全区，这是一件很好的事情。 适时挑战一下你的团队和拉他们出安全区才可以让他们成长。</p>

<p><strong>#3 </strong><strong>惧怕参于</strong>****</p>

<p>这一般来说是沟通不够有效，但Roy谈得更深入。</p>

<p><strong>#4 </strong><strong>安</strong><strong>抚</strong>****</p>

<p>公共要素(Bus Factor) － 这是什么？ 公共要素指的就是那些会导致整个项目停滞不动的人员的数量，假如他们同时被公车撞了的话。这其实说的就是某些个体掌握太多信息。我看到太多地方有这种情况，无论是好的还是坏的项目。 所以我觉得这很正常。但Roy提到的是你不应该只安抚这些个体就因为他们掌握了大量重要的对项目的了解。 你对待一个公共要素为1 (也就是说他一个人如果被公车撞了的话，项目就倒了) 的人应该和别的任何一个人一样。 我非常喜欢在人身上定义一个公共要素的主意，因为它让我注意到六度分离理论值(Kevin Bacon Number)。</p>

<p><strong>#</strong><strong>5</strong><strong> </strong><strong>疏远</strong>****</p>

<p>这个应该是说由于太多的会议或邮件等烦杂事情要处理，导致基本上和整个团队实际的工作脱节了，最终疏远了。这个和六度分离理论没有关系。</p>

<p><strong>#</strong><strong>6</strong><strong> </strong><strong>太合理了</strong>****</p>

<p>不确定我是否同意这个术语但Roy的意思是认为所有人都能清楚明白你说的意思但实际上你并没有把自己的观点阐明是太合理了。我想这点的关键是说当你和一群人相处，尤其是对一个敏捷团队来说，假定他们拥有和你同样的知识水平和理解力是不正确的。你应该用最合适的方式去沟通，而不能做太多的假设。</p>

<p><strong>#</strong><strong>7</strong><strong> </strong><strong>责备</strong>****</p>

<p>如果你认为某个人是垃圾，那你就会有意无意的以这个为借口，不让他参与到团队的事务上来。这世界上总有这样的垃圾人物，但你所要做的是了解他们的短处，并把他们提升到整个团队的水平，而不是疏远他们，因为这样就意味着一直背负这些沉重的包袱。</p>

<p><strong>#</strong><strong>8</strong><strong> </strong><strong>忽略影响行为因素的力量</strong>****</p>

<p>你必须认识到那些会作用到个人身上的行为因素的力量和知道它们是如何影响个人的。主要有这么三种行为因素：</p>

<ul>
<li><p>个人</p></li>
<li><p>群体</p></li>
<li><p>外界环境</p></li>
</ul>


<p>所有这些因素都会影响到一个团队是否能够成功。所以你必须找到有没有什么因素正在影响团队的敏捷度。其中一个外界环境的因素可能是硬件设备不足够支撑你所需。比如说你没有预算添置一台持续集成的服务器，那你几乎永远无法变得敏捷起来。</p>

<p><strong>#</strong><strong>9</strong><strong> </strong><strong>惧怕</strong><strong>太独断</strong></p>

<p>很明显这在英国和挪威是很普遍的，但在丹麦不适用。我敢打赌你不知道。但这据称是真的。独断，就是坚定自己的立场并拒绝任何你感觉不能接受的事情。如果你是在一个处于混乱状态下的一个团队里面，那你必须非常独断。在一个处于混乱状态下的一个团队里面，惧怕独断是致命的。</p>

<p><strong>#</strong><strong>10 </strong><strong>散播不做承诺的风气</strong></p>

<p>这里说的是模糊其词。Roy说你应该任何时候都对项目期限负责。当你对团队谈论的时候，确保他们也告诉你每个任务的具体完成时间。很明显，让他们作出承诺，他们会更有激情的完成任务。Roy的建议是当你开会结束的时候，并问每一个人他们下一步要做的事情是什么，确保他们的回复是什么时候前做完什么事情。但是，任何人都只应该承诺他控制范围内可以完成的事情。承诺一些要别人替你完成的事情是没有意义的。还有，一但你发现你无法按时交货时，让整个团队的人都知道，他们可能有办法帮忙并让你及时完成任务。</p>

<p><strong>问题和解答</strong></p>

<p>下面这些问题和解答其实持续很长时间才得出。我用bullet表单总结了一下，因为bullet的样式非常好。</p>

<ul>
<li><p>你需要认识到你什么时候需要转换领导形式 ―― 你必须停止用一个在混乱模式的团队下的领袖角色来领导一个成长型的团队。</p></li>
<li><p>没有一个所谓的既混乱又成长型的团队。这两者是不可共存的，但是一个团队会从一种形式，转换为另一种形式。</p></li>
<li><p>跨不同地域的团队不能像在同一地方的团队表现好。如果你是这样的事实情况下，你要做的是改变现实。</p></li>
<li><p>敏捷团队应该是两个Pizza的团队。也就是说，只够两个Pizza可以喂饱的团队。</p></li>
<li><p>好的团队是成长起来的，不是雇佣来的。</p></li>
<li><p>Scrum有时并不适用于一些混乱模式下的团队。</p></li>
<li><p>团队领袖和经理其实并没有不同如果他们是同一个人。其实他们也可以是同一个人。</p></li>
<li><p>如果你的团队处在混乱模式，你从项目经理应该保护他们。</p></li>
</ul>


<p><strong>相关书籍</strong></p>

<p>Managing Teams Congruently – Gerald M Weinberg</p>

<p>Behind Closed Doors – Johanna Rothman</p>

<p>Influencer (The Power To Change Anything) – Patterson et al</p>

<p>Succeeding With Agile – Mike Cohn</p>

<p>原文链接: <a href="http://agile.dzone.com/news/10-mistakes-software-team">http://agile.dzone.com/news/10-mistakes-software-team</a></p>

<p>By Roy Osherove</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[看了让我有点蛋疼的文章标题]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2011/07/27/annoying-titles-of-two-articles/"/>
    <updated>2011-07-27T18:45:34+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2011/07/27/annoying-titles-of-two-articles</id>
    <content type="html"><![CDATA[<p>这两篇文章都是<a href="http://www.ifanr.com/author/kkk/">李楠</a>写的：</p>

<h1><a href="http://www.ifanr.com/47183">为何 G+ 的圈子是倒退？</a></h1>

<h1><a href="http://www.ifanr.com/47332">为何 G+ 的圈子是进步?</a></h1>

<p>怎么样？ 有点感觉没有？初看标题我就不知道他对G+是持何种的观点。假定两篇都是成立的，那必然应该说的是两个不同的方面。那应该在标题上更写清楚点。</p>

<p>我先看了说G+的圈子是倒退的那篇，主要说的是G+的圈子使用上是对人进行分类(Category)，对比Tag，Category这种单一的分类，其实并不符合实际，已经被Tag取代。核心的观点也就是说对事物的特性，我们是应该可以打上多个而不是单个标记。但G+的圈子,其实是可以把同一个人放入不同的圈子里的，也就是打上多个标记。也就是说一个人，你可以把他标记为高中同学，也可以标记为死党，没有冲突。所以，如果从人员分类来说G+的圈子其实是Category，单一的标记，是错误的。</p>

<p>当然，文章里还提到信息传播方向的问题（也就是下一篇说G+的圈子是进步的文章的主题），如发相到什么高中同学，G+的圈子是可以，也是需要你定向的（把他们都放在一个圈子），如果你真的介意不想让别的任何人看到。我觉得从你发觉有需要定向传播信息的时候，你就得找到那群人，而G+给的，就是那个圈子。它只是让你重用那一个圈子的人，不会你每次选啊选。我没觉得，并没什么退步的地方。对于说这个圈人的方式，是否合理，我觉得还行，因为一开始，你只要把他放一个比较适合的圈子，或哪个圈子都不放。到有特别需要的时候，再拖过去。当然，不否定以后可能有更好的方式，但我觉得这并没有退步之说。</p>

<p>再看说G+的圈子是进步的那篇，主要说的就是信息传播和产生的影响方面的。里面说到，Twitter的影响，由别人决定，要看follow你的人的多少，和愿意为你传声的有多少。而G+，我觉得也一样，只是多了一个定向传声功能，你不做广播，只和一群人说而已。再退一步，你也还是可以做广播的，发到Public就可以了。至于你的影响力，最少可以是某一群人，后面的，就看那群人中，会不会，或怎么样帮你传声了。从这个角度来说，G+是Twitter私密增强版，进步了一点。</p>

<p>写这篇东西，感觉自己也有点蛋疼，因为也没什么结论出来。</p>

<p>我也不是批驳作者，只是觉得那两篇文章有点标题党了，不太爽。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enhance Performance of ExtJs Grid Record set value operation]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2011/07/20/enhance-performance-of-extjs-grid-record-set-value/"/>
    <updated>2011-07-20T23:25:39+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2011/07/20/enhance-performance-of-extjs-grid-record-set-value</id>
    <content type="html"><![CDATA[<p>When implementing a feature for the project, I encounter one Javascript method that takes around 9 seconds to finish.  Clearly, there is some performance issue in it.</p>

<p>The method logic is simple.  Take below table&#8217;s data as an example:</p>

<pre><code>Measurement         XS     S     M     L      XL   XXL
 Sleeve             1      1     0     2      2     2
</code></pre>

<p>Consider above row &#8220;Sleeve&#8221; is a Record in ExtJs Grid.  When deleting size S &amp; L column, the figure should change to be:</p>

<pre><code>Measurement         XS     M     XL      XXL
 Sleeve             2      0      4      4
</code></pre>

<p>The intent is to accumulate the figure of the deleted size to the remained ones in one direction from the Standard size M.  Hence, this method requires intensive call on Record.set();  Below is the sudo code.</p>

<pre><code>    var recalculatedGridData = [];
    var colSearchCount = 0;
    for (var rowNo = 0; rowNo &lt; gridStoreLength; rowNo++) {
        ...
        // Calculation logic here to get all the correct data first.
        ...
        recalculatedGridData.push(recordData); // Store the data
    }
    // Reset recalculated data to record
    for (var rowNo = 0; rowNo &lt; recalculatedGridData.length; rowNo++) {
        var recordData = recalculatedGridData[rowNo];
        var record = store.virtualGetAt(recordData.rowNo);
        for (var colNo = 0; colNo &lt; recordData.cells.length; colNo++) {
            var cell = recordData.cells[colNo];
            record.set(cell.name, cell.value);
        }
        // record.batchSet(recordData.cells); // Enhanced version to batch set
    }
</code></pre>

<p>The performance tuning rule is first to find out the part where the bigger portion of the time used in.  This method contains two major for loop.  One is the first for calculation logic and the second is just purely setting data to the right cell.</p>

<p>The total time of the method takes around 9 seconds when the involved number of records are 42 and each have 5 cells affected.  It&#8217;s found that 99% of the time spent on the second for loop.</p>

<p>After testing more intensively, each record.set() takes around 0.05 second.  That is why operation on around 42 * 5 = 210 cells takes 9 seconds.</p>

<p>OK.  Root cause is found and it&#8217;s time to see why it takes so long to call record.set().  After checking on the source of ExtJs Record and Store object.</p>

<p>In Record.js:</p>

<pre><code>set : function(name, value){
        var encode = Ext.isPrimitive(value) ? String : Ext.encode;
        if(encode(this.data[name]) == encode(value)) {
            return;
        }
        this.dirty = true;
        if(!this.modified){
            this.modified = {};
        }
        if(this.modified[name] === undefined){
            this.modified[name] = this.data[name];
        }
        this.data[name] = value;
        if(!this.editing){
            this.afterEdit();
        }
    },

    // private
    afterEdit : function(){
        if (this.store != undefined &amp;&amp; typeof this.store.afterEdit == "function") {
            this.store.afterEdit(this);
        }
    },
</code></pre>

<p>In Store.js:</p>

<pre><code>    afterEdit : function(record){
        if(this.modified.indexOf(record) == -1){
            this.modified.push(record);
        }
        this.fireEvent('update', this, record, Ext.data.Record.EDIT);
    },
</code></pre>

<p>You can find that each Record.set() will call store.afterEdit() with its own as parameter.  Hence, I am considering batch update all cells in one record and then trigger Record.afterEdit() method.  Below is the &#8220;cracked&#8221; method added for batch set data.</p>

<pre><code>batchSet : function(cells){
        for (var i = cells.length; i--;) {
            var name = cells[i].name;
            var value = cells[i].value;
            var encode = Ext.isPrimitive(value) ? String : Ext.encode;
            if(encode(this.data[name]) == encode(value)) {
                return;
            }
            this.dirty = true;
            if(!this.modified){
                this.modified = {};
            }
            if(this.modified[name] === undefined){
                this.modified[name] = this.data[name];
            }
            this.data[name] = value;
        }
        if(!this.editing){
            this.afterEdit();
        }
    },
</code></pre>

<p>After testing, operation based on the same data set takes around 3.5 seconds now.  Suddenly drops 60%!</p>

<p>Kind of satisfied on what I have changed on this.  However, I think there should be room to improve.  Any Comment?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个石头值多少钱]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2011/07/20/valueofstone/"/>
    <updated>2011-07-20T17:49:13+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2011/07/20/valueofstone</id>
    <content type="html"><![CDATA[<p>公司的前General Manager Tim Shee给我看了如下一篇文章：</p>

<p>小和尚的大石頭值多少錢？</p>

<p>大都市城外山上有一座峰巒環抱，翠竹蔥蔥，松柏鬱鬱的古剎，有一天，一個小和尚跑過來向老和尚請教：「師父，我人生最大的價值是什麼呢？」</p>

<p>老和尚說：「你到後花園搬一塊大石頭，拿到山下菜市場上去賣，假如有人問你什麼價錢，
你不要講話，只伸出一個指頭；假如他跟你還價，你不要賣，然後馬上抱回來，師父就告訴你，你人生最大的價值是什麼。」</p>

<p>第一天一大早，小和尚抱了一塊大石頭，興致勃勃地跑到山下菜市場上去賣。菜市場上人來人往，熙熙攘攘，人們很好奇，誰會買一塊石頭呢？結果沒一會兒，一個家庭主婦走了過來，問小和尚：「這石頭多少錢賣呀？」</p>

<p>小和尚伸出了一個指頭，那個家庭主婦說：「10塊錢？」
小和尚搖搖頭，家庭主婦說：「那麼是100塊錢？好吧，好吧！我剛好拿回去壓酸菜。」
小和尚聽到：「我的媽呀，一文不值的石頭居然有人出100元錢來買！我們山上有的是呢！」</p>

<p>於是，小和尚遵照師父的囑託沒有賣，樂不可支地抱回山上，去見師父：「師父，
今天有一個家庭主婦願意出100元，買我的石頭。師父，您現在可以告訴我，我人生最大的價值是什麼了嗎？」</p>

<p>老和尚說：「嗯！不急，你明天一早，再把這塊石頭拿到博物館 門口去，假如有人問價，
你依然伸出一個指頭；如果他還價，你不要賣，再抱回來，我們再談。」
第二天早上，小和尚又興高采烈地抱著這塊大石頭，來到了博物館。</p>

<p>在博物館外，一群好奇的人圍觀，竊竊私語：「一塊普通的石頭，到底有什麼價值，
難不成是什麼稀奇呢？只是我們還不知道而已。」
這時，有一個人從人群中竄出來，對小和尚大聲說：</p>

<p>「小和尚，你這塊石頭要賣多少錢啊？」小和尚沒出聲，伸出一個指頭，那個人說：
「1000元？1000元就1000元吧，剛好我要用它雕刻一尊神像。」
小和尚聽到這裡，倒退了一步，嚇得說不出話！但小和尚依然遵照師父的囑託沒有賣，
趕緊抱回山上，去見師父，見到師父說：「師父，今天有人要出1000元買我這塊石頭，
這回您總要告訴我，我人生最大的價值是什麼了吧？」</p>

<p>老和尚哈哈大笑說：「你明天再把這塊石頭拿到古董店門口去賣，照例有人還價，
但仍然不要賣掉它。你就把它抱回來。這一次，師傅一定告訴你，你人生最大的價值是什麼。」</p>

<p>小和尚聽後徹夜難眠，只恨天亮的太慢，好不容易到了天亮，他急忙捧著石頭跑到古董店門口，突然出現一名的拍賣師告訴他這是千年不遇的寶石，問他要賣多少錢，小和尚沒出聲，
伸出一個指頭，拍賣師說：「10000元？」小和尚搖了搖頭，拍賣師出價說：
「100000元就100000元吧，我要好好珍藏它！」小和尚聽了幾乎當場暈倒，趕緊抱回山上，去見師父，見到師父說：「師父，今天有人要出100000元買我這塊石頭，這回你總要告訴我，我人生最大的價值是什麼了吧？」</p>

<p>老和尚指著石頭打斷他說：「其實，我們並不打算賣它，不過現在你應該明白，
為什麼石頭的形狀和外表都沒有變，而你的想法和做法卻再三變化呢，我之所以讓你這樣做，主要是想培養和鍛煉你充分認識自我價值的能力，和對事物的理解能力。如果你是生活在菜市場，那麼你只有那個市場的理解力，你就永遠不會認識更高的價值。</p>

<p>不管你在什麼地方，同樣的你，有人將你抬得很高，有人把你貶得很低，有價值的東西，
只有在懂價值的人面前，才有價值。不要管別人怎麼看，關鍵是自己怎麼看自己。總而言之，你可以掌握自己的命運，決定自己的價值！」</p>

<p>※【激勵一點通】※</p>

<p>也許你就一個普通的石頭，只要你認為自己是一塊寶石，別人也可能把你當寶石來看，
也許你就是一個寶石，可是你卻認為自己是一塊普通的石頭，也許只配給人做成墊腳石來看待。</p>

<p>你看了这篇文章怎么想？
我的看法是：
1. 首先，最重要的是要清楚自己的一块什么石头，有什么料。 不然，如果确实只是烂石头，放到博物馆内也让人踢出来。
2. 知道自己的价值后，尽量往需要你这样的价值的人去靠近，不然，宝石也变压咸菜的而已。好马也要遇到伯乐才行。
3. 当然也如本文说的，不要妄自菲薄，要坚持，努力挖掘自己的优点和价值。
多到处走走，看看，了解哪可以用得上自己。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何避免Microsoft Excel在Cell上定义好的Named Validation的下拉选项在POI写值后丢失]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2011/06/15/excelavoidvaliationlostafterpoi/"/>
    <updated>2011-06-15T13:54:07+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2011/06/15/excelavoidvaliationlostafterpoi</id>
    <content type="html"><![CDATA[<p>有一种常用的Excel报表打印实现是用客户定义好的Excel Template, 通过POI来写值进去。</p>

<p>这样的好处是基本可以原汁原味的保留Excel的样式和一些宏。</p>

<p>有时，在Excel里会定义有一些Name, 然后用到某一些Cell里做Validation, 也就是模拟下拉选项的效果。</p>

<p>有时候，Excel Template经过POI写值后，会发现那个用Validation做成的模拟下拉选项不见了，而未写值前的Excel Template里是有的。 情况可能是这样：</p>

<ol>
<li><p> 在做好Excel Template, 保存的瞬间，光标选在的某个有Named List Validation的Cell上。我们要注意，保存Excel Template里，光标必须落在一些空白或不重要的地方。</p></li>
<li><p>如果你做的Named List里动态写值的，那最好先做一些dummy的list, 在需要做Validation的Cell上，定义好这个Named List Validation, 然后再把那些dummy value删去。</p></li>
</ol>


<p>这样都会有影响，Microsoft的东西有够诡异的了吧？ 哈哈</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cleaner Code]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2011/03/06/cleaner-code/"/>
    <updated>2011-03-06T21:23:04+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2011/03/06/cleaner-code</id>
    <content type="html"><![CDATA[<p>Finished reading Robert Martin&#8217;s &#8220;Clean Code&#8221; these days, I suddenly feel more passionate to write code, to write better and more descriptive code.</p>

<p>Before, I do think my coding style is not bad and stick to it every time when I am writing Java, Javascript, SQL, etc.</p>

<p>However, after digesting the essence of &#8220;Clean Code&#8221;, I am forcing myself to write self-descriptive code, without using comment.</p>

<p>The most important points I do remember after reading it are:</p>

<ol>
<li><p>Longer descriptive name, smaller function</p></li>
<li><p>Boy Scout Rule</p></li>
<li><p>Know your algorithm</p></li>
</ol>


<p>Although &#8220;Clean Code&#8221; has shown us many aspects on how to make the code clean, these two rules are easy to remember, fundamental of others.</p>

<p>Now, I feel the passion of writing code as I am writing a diary, an article.  I feel the impulse of cleaning the mess I got before submitting it again.  What is more, in order to make the code cleaner, I have to make my English better.  haha</p>

<p>Just take below function as an example.  You might not easily figure out what it&#8217;s for.</p>

<pre><code>function groupingFieldFormat(value, p, r, rowIndex, i, ds) {
    var cGrid = ds.cGrid;
    var cGridIsReadonly = (cGrid &amp;&amp; cGrid.isReadonly()) ? true : false;

    if (rowIndex === 0) {
        if (cGrid.id === 'shipmentPackDetail'
               &amp;&amp; p.id === 'packCount') {
            Core.FieldFormat.addCellEditableIndicator(
               config, p, cGridIsReadonly);
        }
        return value;
    }
    var lastRecord = ds.getAt(rowIndex - 1);

    if (lastRecord.data['lineNo'] == r.data['lineNo']
            &amp;&amp;  lastRecord.data[p.id] === value) {
        return '';
    }

    if (cGrid.id === 'shipmentPackDetail'
            &amp;&amp; p.id === 'packCount') {
        Core.FieldFormat.addCellEditableIndicator(
            config, p, cGridIsReadonly);
    }
    return value;
}
</code></pre>

<p>Below is the my modified version.  Which version is better is quite obvious although it still has room to improve.</p>

<pre><code>/**
 * Used by Color, Pack Name, Pack Count in two grids
 */
function eliminateRepeatedValueInGroup(value, colMeta, record, rowIndex, colIndex, dataStore) {
    if (isFirstLineInOneGroup(dataStore, record, rowIndex, colMeta.id)) {
        showPackCountEditableIfNeeded(colMeta, dataStore);
        return value;
    }

    // Always show value for the first row in grid
    // even though not the first line in one pack,
    // so that user is easier to check the group value
    return rowIndex === 0 ? value : '';
}

function isFirstLineInOneGroup(dataStore, record, rowIndex, fieldId) {
    var cGrid = dataStore.cGrid;
    if (cGrid.id === 'shipmentPackDetail') {
        return isFirstLineInOnePack(record);
    }

    var lastRecord = dataStore.getAt(rowIndex - 1);
    if (lastRecord
            &amp;&amp; lastRecord.data[fieldId] !== record.data[fieldId]) {
        return true;
    }
    return false;
}

function isFirstLineInOnePack(record) {
    if (record.data['packSeq'] === 1) {
        return true;
    }
    return false;
}

function showPackCountEditableIfNeeded(colMeta, dataStore) {
    var cGrid = dataStore.cGrid;
    if (cGrid.id === 'shipmentPackDetail'
           &amp;&amp; colMeta.id === 'packCount') {
        var cGridIsReadonly =
           (cGrid &amp;&amp; cGrid.isReadonly()) ? true : false;
        Core.FieldFormat.addCellEditableIndicator(
            {}, colMeta, cGridIsReadonly);
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
