<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Think | Thinking in Crowd / 鹄思乱想]]></title>
  <link href="http://www.thinkingincrowd.me/blog/categories/think/atom.xml" rel="self"/>
  <link href="http://www.thinkingincrowd.me/"/>
  <updated>2013-01-03T21:21:31+08:00</updated>
  <id>http://www.thinkingincrowd.me/</id>
  <author>
    <name><![CDATA[鹄思乱想]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[被广泛误解的匈牙利命名法]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/01/03/widely-misunderstood-naming-convention-the-hungarian/"/>
    <updated>2013-01-03T21:03:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/01/03/widely-misunderstood-naming-convention-the-hungarian</id>
    <content type="html"><![CDATA[<p>我承认我是其中的一员。要向发明者 <em>Charles Simonyi</em> 道个歉。</p>

<p><strong>长期以来，不问出处，不求起源，只是单纯接受一些看起来是常识或事实的结论，导致此问题发生</strong>。这是我有的一点不足，要改进。多思考，多看书是良方，庆幸在不断服药中。如果不是看到 <a href="http://www.amazon.com/More-Joel-Software-Occasionally-Developers/dp/1430209879">More Joel On Software</a>（<a href="http://book.douban.com/subject/4163938/">软件随想录</a>）里 <em>I'm Hungary</em> 那一节，我会继续误解下去。扯远了，回归。</p>

<p>估计可能 <em>90%</em> 的人都只是知道<strong><a href="http://en.wikipedia.org/wiki/Hungarian_notation">匈牙利命名法</a></strong>要求在变量名前面加上类别。这里用类别，而不是 type，也正是书里所说的，这个关键点就是使得不少人误解和背弃这种用法的原因。</p>

<p>多数人的用法是加上变量所代表的<strong>数据类型</strong>或<strong>作用域</strong>，如：</p>

<ul>
<li><em>n</em> 表示 <em>number</em> 型</li>
<li><em>s</em> 表示 <em>string</em> 型</li>
<li><em>g</em> 表示全局变量</li>
</ul>


<p>这种用法，在弱类型语言或者使用之前一些并不完善的 IDE 时，用处还是明显的。可以避免把数据赋值到不同类型的变量中而产生错误，或者养成不好的编程习惯。但是，其实更深层的意思应该是在书中提到的:</p>

<blockquote><p>Make wrong code look wrong</p></blockquote>

<p>这是什么意思呢？就是<strong>让错误的代码更容易暴露出来</strong>。一些不符合命名规范或非约定俗成的变量的使用，或者不恰当的方法调用，应该使得它们只要我们的眼睛一扫过，就可以判断出来。而这个基本原则，正是匈牙利命名法真正的用意所在。</p>

<p>在书中提到的关于用前缀来区别一些字符串是用户输入(Unsafe)的，还是已经处理过的(Safe)的例子，就很好的说明了这种意图。在当前很多大型的企业级系统里面，数据交换在用户，数据库，和不同子系统之间的交换需求是那么多且复杂，判断数据是否已经恰当处理就显得很重要。什么是用户提供的原始数据，什么是从数据库中拿出来的数据，有没有经过HTML编码，XML编码等。这些如果处理不好，就会产生一些隐藏很深的Bug。</p>

<p>还有一个适合这个应用场景的例子，我想就是时间数据的存储。在一些供跨国企业或用户协作的系统里面，时间数据的存储和显示，往往伴随着 TimeZone 的处理。一般来说，时间数据都是把 ISO 时间，也就是不包含时区的时间，存储到数据库里面，当需要显示的时候，再根据用户的时区来转换处理。当然，也有一些系统在业务上的需求是把已经考虑了时区的时间存储在数据库的。这样的话，什么时间是包含了时区信息的，什么时间是没有包含的，也是关键点。加上恰当的命名前缀，再结合业务需求，很容易就可以判断代码处理的对不对了，而不需要再翻看一系列的代码。</p>

<p>当然，你可以说，我可以把变量名写的很详尽，如 <em>unsafeContent</em> 而不是 <em>usContent</em>。 这是可以的。只是这样就使得我们的手和眼睛需要处理更多的字符，而且也混合了变量名中的类别意义和业务意义两部分在一起。个人感觉还是分开好点。</p>

<p>回想起来，很多对 <em>Code Convention</em> 上的要求，除了让程序员可以更容易理解代码以外，另一层意思也是更容易发现错误或问题所在，比如：</p>

<ul>
<li>简短的方法体</li>
<li>有意义的变量和方法名称</li>
<li><em>Self-Documentary Code</em> 或者是加注释</li>
<li>恰当缩进和使用括号{}</li>
</ul>


<p>所以说，我们也不应该一棍打死匈牙利命名法。有需要的话，只要整个团队一致认为某些情况确实可以增加代码清晰度和容易看出问题，那么定义清楚什么时候该用就行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么开始写技术博客, 并且还是用英语?]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2013/01/01/why-i-start-blogging-and-in-english/"/>
    <updated>2013-01-01T22:00:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2013/01/01/why-i-start-blogging-and-in-english</id>
    <content type="html"><![CDATA[<p>一些朋友发现我最近在写一些博客，而且还多数是英语的，都在好奇我在搞什么。那我就写一篇博客来解释一下吧。</p>

<p>写技术博客好处很多，很多牛人也提到过, 这是我出来刚工作时的一位同事的<a href="http://www.iamhukai.com/">博客</a>, 现在他在Thoughworks, 里面有好几篇文章说到为什么要写和怎么写。</p>

<h2>写技术博客的原因</h2>

<ul>
<li><p><strong>写博客可以积累总结自己的一些想法，见证技术学习过程和成长的经历</strong>。所以，我博客里的内容，一般应该会是技术类文章多一点，当然也会有一些开发过程和管理的想法及吐槽。写博客就是一种总结的手段，对自己知识的回顾和梳理。</p></li>
<li><p><strong>博客是一种对外沟通交友，甚至是宣扬思想和文化的平台，说点实际的还可以为自己打广告</strong>。人生在世，总希望找到些志同道合的朋友。这些朋友有生活上的，情感上的，也有事业上的。博客也可以说是为我寻找事业上的朋友的地方之一。</p></li>
<li><p><strong>为后来人积累一些财富，帮助他人解决一些问题</strong>。我已经习惯在Google和别人的博客上索取了那么长时间了，是时候贡献自己的力量的时候了。把自己遇到的一些问题，最终的解决方案，想法分享出来，应该可以帮助一些后来人。也许有人觉得自己遇到的困难和解决方法太微不足道了，说出来让人笑话。其实不然，每个人都有成长过程，像我们也要去获取别人的智慧一样，我们要帮助的就是那些还没有起来的人。而且，也别太小看自己了。</p></li>
</ul>


<h2>用英语的原因</h2>

<p>也许有不少人觉得我在装13，卖弄自己的英语水平。而且我觉得, 用英语写博客, 可能会使得博客流量不高, 正如我那位旧同事所说。那么，我为什么还这么做呢？</p>

<ul>
<li><p>我确实英语水平比中文好，我也喜欢英语多过中文。很多人看到这可能会说我卖国贼，呵呵。其实为什么呢？我从小语文水平都不高，60到70分左右吧，作文也差。对以前的语文课，我完全感受不到语言的美丽。各种什么作者观点分析，文言文等，搞得我对语文很反感，遇到的语文老师，又没几个好的，反正学习语文对我来说充满了挫折感。</p>

<p>  我是在六年级就开始学英语，但那时是用中文来模拟发音和死记的。我记得刚上初中的时候，第一次测验才40多分的。但后来水平一直都不算差，我也不知道为什么。不过使我喜欢上英语的，是因为在大学梦想出国留学，疯狂学英语，考TOEFL和GRE，才喜欢上了，也使得自己水平比附近的人要高。学英语对我来说，充满了成功和优越感。所以，培养成功的感觉，可能真的很重要。为什么同样是语言，学英语我会比学语文好？可能TOEFL和GRE考试都强调的是事实和逻辑推理，不像语文那些什么观点分析那么狗屁吧。</p>

<p>  至于现在，我还那么喜欢英语，我想是延续之前的情结，以及从事IT的缘故吧。所有先进的技术，一开始都从国外发源起来，不懂英语，怎么行呢？</p></li>
<li><p>我现在主要的工作，还是编程。编程用什么语言？废话，当然是英语。大家看过<a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code</a>这本书吗？ 什么叫做<em>Self-Documentary</em>的代码？ 不知道的，看书去。为了能写出清晰，优雅，具有自我说明能力的代码，命名一个变量，一个方法，都是有讲究的，如果一段代码，读起来像读文章一样，那就成功了一大半了。</p>

<p>  而且，在<a href="http://www.amazon.com/More-Joel-Software-Occasionally-Developers/dp/B002KE5SLU/ref=sr_1_1?ie=UTF8&amp;qid=1357050792&amp;sr=8-1&amp;keywords=More+Joel+on+Software">More Joel on Software</a>, 也就是<a href="http://book.douban.com/subject/4163938/">软件随想录</a> 这本书里面，在<em>Learn how to write before graduating</em>这一节里面说到：</p></li>
</ul>


<blockquote><p>the programmers with the most power and influence are the ones who can write and speaks in English clearly, convincingly, and comfortably,</p>

<p>...</p>

<p>The difference between a tolerable programmer and a great programmer is not how many languages they know, and it's not whether they prefer Python or Java.  It's whether they can communicate their ideas.</p></blockquote>

<p>所以，锻炼用英语来写博客，主要是提高自己的代码编写能力和成为一名好的程序员。</p>

<p>好了, 我已经起航了, 你们是否也考虑考虑写写博客?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My practices on Time Management]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/12/24/my-practices-on-time-management/"/>
    <updated>2012-12-24T06:22:00+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/12/24/my-practices-on-time-management</id>
    <content type="html"><![CDATA[<h2>The 101</h2>

<blockquote><p>Time Management is the act or process of planning and exercising conscious control over the amount of time spent on specific activities, especially to increase effectiveness, efficiency or productivity.</p></blockquote>

<p>Everyone who cares about their time should be familiar with this concept and knows its goal - to increase effectiveness.  The <a href="http://en.wikipedia.org/wiki/Time_management">Wiki</a> site covers different aspects of it.</p>

<p>Here I would like to share my understandings and what my choices are to make good use of my time.<br/>
1. Planning &amp; Prioritizing<br/>
2. Protecting thy time<br/>
3. Identifying waste</p>

<h2>Planning &amp; Prioritizing</h2>

<p>Planning &amp; Prioritizing is a must.  It helps us not losing any task we have to do but also makes sure we do the most urgent &amp; important ones first.  <a href="http://en.wikipedia.org/wiki/Getting_Things_Done">Getting Things Done</a> is a great methodology.  However, <strong>DON'T SPEND TOO MUCH TIME ON THE LIST.</strong>  You cannot prioritize or categorize your tasks if the list fills with tons of items especially if you have some level of <a href="http://en.wikipedia.org/wiki/Obsessive%E2%80%93compulsive_disorder">Obsessive-compulsive disorder</a>.</p>

<p>I have the same issue stated in <a href="http://simpleprogrammer.com/2012/10/28/my-15-minute-rule-to-productivity/">My 15 Minute Rule to Productivity</a>:</p>

<blockquote><p>I’ll delay doing something that I know is important until the last moment that it needs to be done.</p></blockquote>

<p>Hence, my rule on making a list is: <strong>Make a task list only for the tasks I need to do TODAY and come up an estimated time on how long to take it.</strong>  How if I have something important to do in the future? Put it to calendar/reminder and also include an estimated time so that this task will go into my future TODAY task list.</p>

<p>And then the rule of picking the task from a list is: <strong>Scan the tasks and their estimated time; Pick the one I MUST start it.</strong>  This action is to take out the most IMPORTANT and URGENT task which is actually prioritizing.  The estimated time made in the first step helps me know when it is the right time to pick which task.</p>

<h2>Protecting thy time</h2>

<p>What does this mean?  It means avoid distraction.  Distraction is the major time killer which makes us ineffective.  <a href="http://en.wikipedia.org/wiki/Pomodoro_Technique">Pomodoro Technique</a> is the one I like.  It imposes an external mechanism (a timer here) to keep us focus on work for a short period (generally 25 mins) and also have some rest inbetween.  The rest in between the working period can be used to reply your email, IM or actually relaxing your mind.  Its working style is like marathon which needs constant pacing.</p>

<p>However, this mechanism might have an issue to some knowledge worker.  Here is the view in one of <a href="http://www.joelonsoftware.com/articles/fog0000000068.html">Joel Spolsky' article</a> with which I totally agree:</p>

<blockquote><p>We all know that knowledge workers work best by getting into "flow", also known as being "in the zone", where they are fully concentrated on their work and fully tuned out of their environment. They lose track of time and produce great stuff through absolute concentration.<br/>
...<br/>
The trouble is, getting into "the zone" is not easy. When you try to measure it, it looks like it takes an average of 15 minutes to start working at maximum productivity.  Sometimes, if you're tired or have already done a lot of creative work that day, you just can't get into the zone and you spend the rest of your work day fiddling around, reading the web, playing Tetris.</p></blockquote>

<p>Hence, the Pomodoro Technique might knock you out of the zone and you should choose your own timer based on the average time you can maintain your flow state instead of 25 minutes.  Or you can just let your flow flows until you think you need to get a break.  The point is to try to maintain some continuous period to get uninterrupted.</p>

<p>But generally, Pomodoro is helpful under certain circumstances like management level people who don't even have continous time more than 25 minutes or some working environment has interruption often or someone whose productive time shorter than 25 minutes and want to extend their flow state.</p>

<h2>Identifying waste</h2>

<p>Planning is the starting process of time management, while identifying the waste is the retrospect process.  Sometimes, it's even more important than the planning.  That is because planning is working on something uncertain, while retrospect is based on reality and intended to make improvement.  History and fact can tells us more on the our regular time usage pattern.</p>

<p>How to identify waste?  Track the time and see where your time spends.  Our memory is unreliable to keep track of how long we spend on the things done.  We need to actually write it down and write it down when it happens (at the beginning or the end of the task).</p>

<p>By tracking where the time we spend, we can find out where the waste is and try to eliminate it.  Also we can consolidate those discretionary time slots to a continuous unit for more effective usage.  There is a wonderful chapter "Know Thy Time" in <a href="http://www.amazon.com/Effective-Executive-Drucker-Series-Peter/dp/0750643900/ref=sr_1_2?ie=UTF8&amp;qid=1356302486&amp;sr=8-2&amp;keywords=The+Effective+Executive">The Effective Executive</a> by <em>Peter F. Drucker</em> describing how to make good use of time.  Highly recommend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ExtJS, Jasmine, Maven - Why I am working on them?]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/08/05/extjs-jasmine-maven-why-i-am-working-on-them/"/>
    <updated>2012-08-05T15:52:24+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/08/05/extjs-jasmine-maven-why-i-am-working-on-them</id>
    <content type="html"><![CDATA[<p>Before going into how to setup <a href="http://pivotal.github.com/jasmine/">Jasmine</a> to do Unit Test for <a href="www.sencha.com/products/extjs">ExtJS</a>, I think I should describe why I am doing this.</p>

<p>I have been using ExtJS for around 4 years.  My first company used HTML + ExtJS to build the UI while the current one use ExtJS completely to do that.  I have encountered lots of cases that well-tested behavior failed after some new features introduced in.</p>

<p>Everyone knows that it's because there lacks Unit Test.  However, there have never been any Unit Test done for Javascript in any project.  There are many of the reasons behind that, such as tight schedule, not enough attention etc.  But the most important reason that outweights or strengthens others is that Unit Test for Javascript is way too difficult than Java, especially when Javascript is used intensively to build the UI and implement business logics.</p>

<p>One of the reason makes Javascript hard to do Unit Test is due to good tools unavailability;  the other one is that most developers tend to not separating business logic from UI code quite clearly.</p>

<p>After the emergence of <a href="http://seleniumhq.org/">Selenium</a>, I have once thought it should be the right tool to address this issue.  However, after reading Selenium Doc and seeing what my previous colleagues did for recording &amp; playing, I think Selenium should be used mainly for Integration Test, not in Unit Test level.  My opinion is further strenghten after watching a video from Google Testing Expert and reading the blog from Martin Fowler:</p>

<blockquote><p><a href="http://www.infoq.com/cn/presentations/duannian-agile-test">让测试也敏捷起来</a> by 段念</p></blockquote>

<p><a href="http://martinfowler.com/bliki/TestPyramid.html">TestPyramid</a> by Martin Fowler</p>

<p><strong>The main points in TestPyramid are:</strong></p>

<blockquote><ol>
<li><p><strong>Low-level unit test should be many more than high level end-to-end testing through GUI.</strong></p></li>
<li><p><strong>Testing through UI is slow, brittle, expensive to write.</strong></p></li>
<li><p><strong>A rich javascript UI should have most of its UI behavior tested with javascript unit tests using something like Jasmine.</strong></p></li>
</ol>
</blockquote>

<p>Above is a long long purpose briefing, I hope it worthes to let you know the background and also agree with me on this.  I heard about Jasmine before reading the post by Martin Fowler, however, I kept thinking that it's quite difficult or even impossible to use Jasmine to test those ExtJS UI components.</p>

<p>Until I did sit down and really tried to use Jasmine to test the ExtJS code, I can say that Unit Test against ExtJS by Jasmine can be achieved at some level once we know what to test for.</p>

<p>In next post, I will show you the steps to bind ExtJS, Jasmine, Maven together to do the Unit Test and what I think we should test against.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[待在优秀的地方，还是把所在的地方改变的优秀]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/07/15/stay-in-good-or-change-to-be-good/"/>
    <updated>2012-07-15T17:31:25+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/07/15/stay-in-good-or-change-to-be-good</id>
    <content type="html"><![CDATA[<p>已经换了工作差不多一年，期间还有幸被派去美国学习所做的系统后台开发，趁着本博客重新启航，是时候回顾一下了。</p>

<p><strong>小公司 vs 大公司</strong></p>

<p>在小公司那么多年来，给我最大的感受就是灵活性强，行动敏捷。再加上本人后来能担当上Team Lead角色，所以，有什么好的想法，自然容易尝试和贯彻。但是公司的敏捷，一但被利用成不断高强度赶项目而忽视了人员培养，代码和框架的改进，团队和系统的问题便不断浮现。这也成为我离开的原因之一。不过，对怎么样推动改变上，我并没有做的很好。在能自己拍板范围外的事，虽然有提意见，但是推动不够，主要都在等领导的改变和决策，主动性还不够强。</p>

<p>来了大公司差不多一年了，最大的感受和没有来之前想象到的差不多，就是沟通成本非常高，行动迟缓。再加上职位上我只是小兵一名，有好的想法，也没法通过“强硬”的手段，推广出去。在哪里体现出迟缓的问题呢？</p>

<ol>
<li><p>问题达成结论难。邮件多，开会部门多，人员杂，是大公司的通病。这其实还不是主要问题。问题是一开始讨论邮件或者开会的人员，在等级或者部门上来讲，大家都是平级的。通常情况是老大级别一般先没有参于，即使有，也是各方的老大，也都在，结果还是打平。在谈一个问题的时候，除非大家对一个问题共识较多，或者各方影响不大，方案比较容易通过。但是如果主要涉及一方要其它各方做更大改变，就不容易出结论了。因为大家平级，不好说一方强行推行。那么最终可能要拉锯一段时间，最后再把老老大拉出来，才能拍板。</p></li>
<li><p>推行改变很难。改变，本来就是很难的事情。想一想睡惯懒觉的你突然要自己每天早起30分钟，跑5圈，你做的到吗？更何况如果是要改变别人，那更难了。再想象在大公司，你要改变的是多少个别人。举个例子，从10月份进公司我问为什么不用Maven，有人答我，可能今年5月，到几个星期前我再抱怨，再有人说8月。现在就放话在这，等等看什么时候实施得了。另一个原因同开会难有定调一样，涉及到影响流程，或某些人员的工作比较大的时候，就一定要有一位拍板的人物了。</p></li>
</ol>


<p>其实无论是软件还是非软件公司，大了，自然不好管了。Yahoo不是也被批官僚气氛严重，甚至连Google也不例外。Agile的提出，其中一个焦点也致于减少沟通环节。我们也引入了Agile，但是，感觉形式多于内容，反而更乱。</p>

<p><strong>如何改变，如何敏捷</strong></p>

<p>个人认为，要做到Agile，很重要的一个思想就是行动迅速，不断反省，找出不完善的地方，加以改正。这里面，非常需要的一个手段，就是试错。但是很多大公司，很难实现Agile的原因，一个原因是人多难协调，行动缓慢，另一个原因就是不敢试错。一般来说，大公司除了客观原因由于子系统杂，多，乱外，更是因为人员求稳，怕担责的思想，不敢随意做改变。怕错了，出问题，承担后果。</p>

<p>之前看了一本David J. Anderson写的关于<a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402/ref=sr_1_1?ie=UTF8&amp;qid=1342343902&amp;sr=8-1&amp;keywords=Kanban+David+J">Kanban</a>的书，个人感觉是非常适合大公司引用来进行流程，甚至是文化的改进的，甚至比Agile更有效。其中一个重要的原因是Agile的推行，一般意味着对现有流程的一次大的变革。如果人员思想跟不上，或者没有抓住重点，流于形式的话，问题更多。反而，Kanban强调的是在现有流程上的不断发现各个部位的瓶颈，不断进行细微改善和调整。里面推崇的Kaizen文化，更是精华：“任何人对流程改进的尝试，即使失败，或者出问题，都不会被追究。” 要做到这点，虽然需要有良好的衡量机制，更重要的是一种开放和允许尝试的文化。当每个人都不必惧怕所谓的承担责任时，甚至鼓励自发的对流程进行改善的时候，力量可是不容小看的。</p>

<p>具体操作上来说，要推行改变，首先要对你提出的东西，有深刻的理解，它的优缺点都要清楚，必须强调改变带来的好处是远大于它的缺点的。因为抵制的人，总会拿它的缺点说事。而且，你也必须要有坚实的论证，才能说服同事，甚至是你的老板。之前看了一本书《<a href="http://www.amazon.com/Driving-Technical-Change-Terrence-Ryan/dp/1934356603/ref=sr_1_1?ie=UTF8&amp;qid=1342343784&amp;sr=8-1&amp;keywords=Driving+Technical+Change">Driving Technical Change</a>》by Terrence Ryan，主要正是教人如何推行改变。最后，当然得期望你上面的领导是英明的，你就事半功倍了。</p>

<p><strong>改变才是永恒</strong></p>

<p>其实，没有哪里可以永恒保持优秀，重要的是如何不断的改变，来追寻优秀。小公司可以变得臃肿，大公司也可以敏捷。重要的是，首先自己要有一颗秉持Kaizen的心，和同一班同样追寻改变和优秀的人合作。</p>

<p>所以，今年我的目标就是"Push for Change; Act as Model” - “推行改变，以身作则”。其实这作为每一年的目标都是正确的，但是，对于现在的我来说，是迫切的。这正是针对自己之前的不足，也是针对目前的环境。问题多的地方，机会才多。这么一段时间以来，我感觉也确实推动了一些东西，无论直接还是间接，甚至方法上可能并不正确，或者为自己留下后患，我都无所畏惧，将继续前进。</p>

<p>可喜的是，新任的Team Lead，对问题上和我有比较一致的看法，也很积极推动团队的前进，感觉非常高兴。同时，可以在他身上，学习如何在大公司内推动改变，确实难得。前景暂时还是光明的，只需要继续努力。</p>

<p>接下来，具体的想改变的事项，我希望能在目前项目的前端开发引入Unit Test，以验证自己对前端开发和测试的想法，以及作为发展自己前端开发能力的一项手段。敬请期待。</p>
]]></content>
  </entry>
  
</feed>
