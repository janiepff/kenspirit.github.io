<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Think | Thinking in Crowd / 鹄思乱想]]></title>
  <link href="http://kenspirit.github.io/blog/categories/think/atom.xml" rel="self"/>
  <link href="http://kenspirit.github.io/"/>
  <updated>2013-06-26T07:03:05+08:00</updated>
  <id>http://kenspirit.github.io/</id>
  <author>
    <name><![CDATA[鹄思乱想]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[永久测试之心, 寻求真我]]></title>
    <link href="http://kenspirit.github.io/blog/2013/06/26/startup-review-permanent-beta/"/>
    <updated>2013-06-26T06:39:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/06/26/startup-review-permanent-beta</id>
    <content type="html"><![CDATA[<p>最近看了李开复作序的书：<a href="http://www.amazon.cn/dp/B00COJ3CVY">至关重要的关系</a>，也就是<a href="http://www.amazon.com/dp/B008NXKYNO">THE START-UP OF YOU</a>的译本。书的英文原名和它的意图其实想说明的是，每个人其实都是和企业家一样，具备相同的特质。</p>

<blockquote><p>广义的企业家精神：自主独立，足智多谋，满怀抱负，灵活变通，并拥有广泛的人脉。企业家精神是一种生活态度，而不是一个商业概念；是伴随一生的观念，而不只是某一代人的想法。</p></blockquote>

<p>这本是 <a href="www.linkedin.com">LinkedIn</a> 创始人 Reid Hoffman 和 硅谷企业家 Ben Casnocha 一起写的书。其实书的内容并不只讲述如何建立重要的人际网络关系，还阐明当前变幻无常的职业环境下，怎么样才能保持竞争力。不知道怎么译成中文书名，就变成只突出关系了，可能为了迎合国内对关系的依赖心理吧。</p>

<blockquote><p>你的竞争优势是由三种各不相同且不断变化的力量相互作用而形成的：你的资产、你的追求/价值观和市场现实，即你的综合能力在竞争市场的供应状况。</p></blockquote>

<h2>真我，追求</h2>

<p>书中一段让我非常有感触：</p>

<blockquote><p>你的内心不存在能通过自省发现并为你指明正确方向的＂真我＂。是的，你的追求塑造了你所做的事，但是追求本身就受到你的行动和经历的限制。个性不是你找到的，而是自己浮现的。</p></blockquote>

<p>其实我一直想通过自省来寻找到自我，但发觉真的太难了。身边也缺乏很好的 Mentor，所以一直感觉有点迷茫。我到底应该怎么前行呢？直到看完上面那段话后，终于可以释怀了。回想起前段日子看到 <em>@玉伯也叫射雕</em> 说的＂心要粗糙点＂，<em>@周鸿玮</em> 的这篇<a href="http://m.blog.sina.com.cn/s/blog_49f9228d0101c9pr.html?retcode=0">不喜欢的工作，可能通往一个崭新世界</a>，和自己迷茫前走过的路程，也确实是这么走过来的。</p>

<p>高考时我就是想考计算机专业，没什么理由。毕业时就是想转行从事软件开发，而不是专业的电子方向 (没考上计算机)。还有就是大学时出国留学的想法以至狂学 TOEFL 和 GRE。 至今我也不知道当时为什么这么想，只是有点一根筋的感觉。</p>

<p>之前的工作生涯，领导让做什么我就做什么，说去哪个项目就到哪去，不挑活，只认真干。当时的＂真我＂就是做 BA 或者 Consultant (以前感觉那种职位比码农高级点，现在发现沟通和需求分析根本就是码农必备技能)，而且公司也是主靠这部分业务，所以个人在公司发展可以说一帆风顺。快速学习和解决问题的能力，抗压能力，良好沟通能力也同时在这样情况下培养出来。</p>

<h2>永久测试之心</h2>

<blockquote><p>把职业始终保持在测试阶段，可以强迫自己承认自身还有缺陷，还存在发展空间，还需要适应和进步。不过，这种心态也十分乐观，因为这意味着你有能力改善自己，同时也有能力改变周围的世界。</p></blockquote>

<p>永久测试其实是对非常流行的观点＂我们必须找到自己心中真正的优势和渴望做的事情，然后坚持不懈的努力下去，终将取得非凡成就＂进行必要的一些补充和修订。</p>

<p>虽然如上面所说，自我/价值观需要坚定的去追求，但它也不是一成不变的。因为一开始我们的追求可能是空泛的，含糊的，没有具体步骤和验证过的。我们有时可能只是想当然认为自己想做什么，可以做什么，但不知道能不能做或怎么做。所以必须在实践中验证，也就是不断测试调整的一个过程。</p>

<p>永久测试其实也是应对市场现实而提出的要求。如果你的优势和能力，并没有市场需求的话也是白搭。其实这个观点和 <a href="http://www.amazon.com/dp/0307887898">LEAN STARTUP</a> 里面的 Build-Measure-Learn 这样一个反馈循环正是异曲同工之处。因为我们面对的是迅速变化的市场和趋势，我们必须像打造一个产品一样，不断测试我们身上的技能是否还满足市场的需求。</p>

<p>之前从一家毕业后一直工作了7年的公司离职，除了公司一些长久问题，个人已经不太抱希望管理层能解决外，也是感觉需要去外面的世界看看，测试一下自己能否适应市场的需求。后来面试发现，在珠海这个地方，需要多面手的地方不多，自己看重的广泛技能，英语，沟通和快速学习能力并没多少人欣赏。招聘方看你那么多年经验，基本就是看你在他们想要的技术方面，能深入多少，因为他们多数要的是专才。</p>

<p>但这却是我的短板。我并没哪项技术钻研的很深，脚踏的不够坚实。其实我之前也一直缺乏一定自信，总觉得底气不够。所以，我也就正好调整了一下＂真我＂，决心专攻某一样技术，JS。今后嘛，还是保持一颗<strong>钝</strong>和<strong>粗糙</strong>的心，坚持下去并测试以验证之。</p>

<blockquote><p>在任何情况下，能够检验我们设想的是行动而非计划。只有在实践过程中才能找到自己努力的方向以及方法。</p></blockquote>

<h2>ABZ计划</h2>

<p>这是作者提出来的一种规划手段。</p>

<ul>
<li>A计划：是我们目前从事的事业，一个我们发挥竞争优势的地方。但是在计划执行过程中，我们还是需要时刻根据情况微调，还有试探性寻求B计划。</li>
<li>B计划：在执行A计划途中，如果发现目标或实现途径出现比较大的变化，甚至说客观环境发生重大变动等，就要跳到B计划了。但是B计划从哪冒出来的？其实在不断学习和调整方向中得到。它应该是和A计划不同但相关的方向。最好的方式是在执行A计划同时，从兼职开始做起，试探性去尝试一些想法。这个计划不是仔细计划出来的，而是摸索出来的。</li>
<li>Z计划：这已经是我们的最差打算了。就是万一失业了，什么都没有了，我们可以怎么做？银行剩下的钱可以支撑多少个月没工作？这段时间是否足够学新技能？</li>
</ul>


<p>其实作者强调的就是<strong>不断学习，寻找和调整方向，而且确保有救生方案支撑转变</strong>。</p>

<h2>确立身份</h2>

<blockquote><p>我们应该确立一种身份地位，使其不受老板、地域以及行业的影响。</p></blockquote>

<p>这也是文章里让我觉得很重要的一句。因为当今，及往后的职业发展环境，是＂横向＂忠于职业，而非＂纵向＂忠于老板。当然这并非说朝三暮四，到处跳槽。因为无论在哪就职，为所在企业全力拼搏，也是提高自我竞争力，打造人脉的关键。而作者想强调的是，因为世界变化太快了，每个企业，每个行业都有可能发生巨大变化和转折点，比如数码相机的到来导致柯达的没落；智能手机的出现，使得 Nokia 被抛离。所以这种独立于老板，甚至是行业的自身技能身份定位，为日后应对市场变化非常重要。</p>

<p>所以，对于我们从事 IT 的人来说，写个博客，多参于一些开源项目和活动，做些工作外的作品，是很有必要的。</p>

<p>确保自身技能跟得上变化后，剩下的就是关系问题了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一点点对提问，分享和影响力的看法]]></title>
    <link href="http://kenspirit.github.io/blog/2013/05/28/how-to-ask-share-and-influence/"/>
    <updated>2013-05-28T21:48:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/05/28/how-to-ask-share-and-influence</id>
    <content type="html"><![CDATA[<p>一晚和一位旧同事在 KFC 从10点夜谈到凌晨 3 点。很久没那么年轻过了。我们谈了什么？ 主要是提问，指导和分享，人格魅力和影响力，投资等方面。</p>

<h2>提问，指导和分享</h2>

<p>谈这个问题的起源是因为他刚换工作，觉得某些＂领导＂交代任务的时候，啥都不说清楚，什么相关文档资料都不给。所以他很郁闷地在想，到底是他太笨还是本该交待的没说清楚。后来直到他去问时，对方才像挤牙膏那么挤出来那么一点指引，和给他本该先交出的文档。</p>

<p>到底应该怎么问问题，怎样才算是好的指导和分享呢？</p>

<h3>什么该交代</h3>

<p>对于交代任务，到底什么应该说清楚？ 从我的自身体验来讲，无论对方是否对所要交代的任务有经验，任务<strong>需求</strong>和项目内<strong>约定俗成</strong>的东西，比如代码规范，公司或项目里特殊的工具环境配置，代码库结构等，是必须交代清楚，至少文档齐备。当然还有一个是任务的<strong>时间要求</strong>，因为这是提供给接收任务方做好时间安排和判断应该什么时候寻求帮助的重要条件。如果这些东西缺失了，就是交代任务的人的责任了。</p>

<p>我一般的做法，是先把文档给出去，可是不会先详细说明。这是因为不同的人，对资料吸收能力不同，我会期望任务接收者先花时间看了，心中有了问题，再针对情况进一步决定是否需要更进一步解说。这样既有针对性，还可以用以初步判断一个人的自学和领悟能力。</p>

<h3>什么可以问，怎么问</h3>

<p>对于接收任务的一方来说，如果发现上面提到的应有资料有缺失，我觉得是完全可以而且应该先索取和问清楚，因为你不具备这个责任和条件知道这方面的知识。</p>

<p>拿到资料后，通常在问问题之前，我觉得都必须<strong>认真看过资料 30 分钟到 1 小时的时间</strong>。时间短了，感觉并不能了解清楚；时间长了，如果对文档所说的还是没什么头绪的话，就不应该再闷头苦猜，而是应该求教于交代任务的人，以避免浪费无谓时间。毕竟工作任务都是有时间限制的。</p>

<p>在看资料的时候，我觉得需要了解的，是各个文档的大概内容，相互关系和在任务里各自起的作用。完后，就可以向交代任务的人确定任务开始的方向和提出看文档后产生的具体疑问了。问问题，最好是可以<strong>一次把所有问题有条理的列出来，一次去问。而不是碰到一个问题，问一个</strong>。</p>

<p>正如前面提及，你问的问题，交代任务的人可以用以推断你的能力。需求方面的问题，可以推断出你的逻辑思维能力和对业务的理解。这方面的问题，一开始的时候不懂，是情有可原的，因为毕竟缺乏业务背景。系统设计或技术方面的问题，就可以看出你的经验，技术功底了。对于行业公共技术，应先尽可能 Google 找资料，没办法了，再去问，一方面避免问了些小白问题，另一方面可以提高自己学习能力。对于公司内部特有的技术或框架，我觉得能理解当然最好，时间紧迫的话，求助也无妨。</p>

<h3>怎样才算是好的指导和分享</h3>

<p>当同事或下属向你请教，或者你发现他们有什么地方做的不够好的时候，及时向他们提供指导和经验分享，才是一位称职的专业人士。但是怎样的指导才叫好呢？那晚，那个同事和我提到他之前遇到的几种指导的风格：</p>

<ol>
<li><p>手把手风格<br/>
 这种指导方式，是每个新手最喜欢的。因为领导事无巨细，把要完成任务的每一个步骤，都详细解说一遍。最重要的是，讲到你明白为止，而且还是极有耐心，毫无怨言那种。</p></li>
<li><p>详尽风格<br/>
 这种风格，也会交代出要完成任务的主要步骤，只是没那么详尽，所以也不会向第一种那样毫无怨言的讲到明白为止啦。</p></li>
<li><p><strong>启发性风格</strong><br/>
 这种风格，只会提示重要的点或者步骤，甚至只发个网上的链接让发问者参考，可能就完事了。还是不懂的话，再针对大流程和框架解说一下。反正基本原则是怎么都不轻易把答案直接告诉你。</p></li>
</ol>


<p>你们喜欢哪种？你们觉得我是哪种呢？</p>

<p>那位旧同事说，他现在觉得最后一种，才是最好的。这是因为<strong>授人以鱼不如授人以渔</strong>。如果教会你在某个公司，某个项目里，特定的某些做法，让你可以顺利地完成任务，可能只是一时受益。但是长远来说，如果养成依赖，靠别人指导，而不是自己分析解决问题，其实一点用处都没有。相反，如果能一步步启发思考，尽量让你自己解决问题，以后无论什么环境，都能很好适应。</p>

<p>其实我的风格是第三种 (别说我自夸啊，不信去问那个家伙) 。但是当初他刚毕业，我带他做项目时，他被我折磨地痛苦的要死。他和另一个人老是在琢磨该不该问我问题。看我脸色不太对劲的话，就不敢问了。回想起来，那时候，他不会我们系统的框架，不懂 Javascript，只想写 JAVA。而我不断逼他自己主要看JS代码，教他怎么猜测代码块的上下文，在不懂全部方法的情况下，猜测 Bug 可能在什么地方，怎么忽略代码细节，领略大意等。也是难为他了。</p>

<p>其实我相信我做的是对的，可是为什么他那时那么痛苦呢？</p>

<ol>
<li><p>语气问题
 有时候我的语气感觉比较凶和严，所以他会认为我不够耐心。其实用第三种风格的话，每次提醒的点是不多的，所以一旦语气不好，别人就会认为你没耐心，不想教。我的情况是，对女的态度好点，对聊得来或关系好的朋友说话会没那么多顾虑，对一些感觉学习态度有问题，或者自己不仔细思考的人我会没耐心。他是第二种。</p></li>
<li><p>解释是否通俗易懂<br/>
 他说他现在的一个同事，在向他解释一些他不懂的技术概念的时候，讲的很通俗易懂。而我，当时给他的感觉是解释的不够容易理解。除了上面的语气和耐心也有影响外，一个人要把事情解释到通俗易懂，他必须对要解释的事物有深刻了解，然后能从听众的角度，简化概念，尽量转换成比较容易理解的事物类比。这点我确实是做得不够好的。因为以前我的技术功底确实不深厚 (当然现在也还不行)，要能做到深入浅出确实不行。而且我有时没能从听众角度出发，也是造成难理解的原因。</p></li>
</ol>


<h2>人格魅力与影响力</h2>

<p>那天晚上，我们聊到了电影中国合伙人，俞敏洪，罗永浩，马云等。我那个同事说以前他以为新东方火的原因是上课幽默。其实后来想想应该不是，主要应该是俞敏洪乐于分享，而且难能可贵的是把自己失败的地方和人分享，把自己和听众拉到同一平面上，产生共鸣，另听众感同身受。不像一些只会宣传自己成功经验的人，虽然一时能让听众产生仰慕之情，但感觉高高在上，经验之谈也飘渺不切实际。</p>

<p>我至今碰到的，和尊敬的有非凡人格魅力的人或公司，都是肯无私分享自己实际经验，技能和想法，让别人觉得能从你身上学到东西的人或公司。一旦你身边围绕着一群向你学习的忠实听众，人格魅力和影响力就出来了。像马云，罗永浩还有现在 IT 领域各种大牛等，凭借他们无私的演讲，博客，对开源贡献等积累的忠实听众，为他们的公司，产品营销，创业起了多大的作用。在 <a href="http://www.amazon.com/Rework-Jason-Fried/dp/0307463745">Rework</a> 里面 <strong>Build an Audience</strong> 那节说的很好：</p>

<blockquote><p>the most fortunate companies have <em>audiences</em>.<br/>
...<br/>
When you build an audience, you don’t have to buy people’s attention—they give it to you. This is a
huge advantage. So build an audience. Speak, write, blog, tweet, make videos, whatever. Share
information that’s valuable and you’ll slowly but surely build a loyal audience. Then, when you need
to get the word out, the right people will already be listening.</p></blockquote>

<p>在此，我也要向之前无私教导我的人，Google 公司，令我获益的各位大牛和博客致敬，努力成为分享的一员。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打造 Facebook 读后感]]></title>
    <link href="http://kenspirit.github.io/blog/2013/04/25/review-on-book-inside-the-facebook/"/>
    <updated>2013-04-25T06:10:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/04/25/review-on-book-inside-the-facebook</id>
    <content type="html"><![CDATA[<p>看完<em><a href="http://www.amazon.cn/gp/product/B0060E1LIK/ref=ox_ya_os_product">YouTube 创始人陈士俊自传</a></em>后，很快我又把<em><a href="http://www.amazon.cn/dp/B00ANI5YXW">打造 Facebook</a></em>看完了。但感觉这没上本书过＂瘾＂，我看得更快和粗略。</p>

<p>笔者王淮主要是为外部人士揭秘 Facebook  内部一些流程和机制，包括招聘，人员培养，团队合作，项目流程等。本书内容叙述直白，但略显平淡和笼统。揭秘的 Facebook 流程，其实也和其他一些关于敏捷，管理等文章提及的好的做法没太大差别。这其实也在意料之中，因为核心机密也没可能爆料，加上好的做法本来就那些，关键看怎么做，执行力如何和团队配合，而且最主要是配合不同公司文化，架构和流程作调整。</p>

<p>下面我只抽 Facebook 做得比多数公司好的其它关键说说。</p>

<h2>制胜关键</h2>

<h3>重视内部工具，平台搭建</h3>

<p>可能是和 Facebook 的工程师文化驱动文化也有关，Facebook 内部竟然还有专门的团队负责所有工程师要用的工具和平台的搭建，而且最重要的是这个团队还是被放在最高优先级和重要的位置上，而不是说把二流的人放在那。</p>

<p>这就应该和其他大多数公司很不同。很多公司都是把重心和一流人才放在产品上面，但却不知道这样一个打造工具和平台的团队，其实才是打造公司核心技术，和提高工程师生产率的重要基石。如果一个公司能为项目工程师提供一键搭建环境，和各种提高生产率以及沟通的工具，那这家公司的技术功底和自动化流程做得有多好啊。</p>

<h3>所有人以 Facebook 的整体利益为考虑出发点</h3>

<p>这可不是说那么容易的。特别是大公司，各个部门各自为政，以部门利益为出发点，在人员调配，项目进度安排上可以说是协调的噩梦。每每总要等待各个部门的老大的最顶层上司直接命令下来才能成事。想想中间要花费多少功夫。书中虽然没有提及细节，但好几处都提到和体现这个整体利益。无论在人员换组，项目人手调配，进度安排上，感觉他们都能比较好的处理好，这相当不容易。</p>

<p>作为一个曾经体验过部门之间要人和不放人，被不同 Manager 带过都被打上不同标签和不平等对待的人，真是气不打一处来。当时还是在家小公司啊。还有就是项目组之间如果有依赖，优先级和协调的重要性现在更是深有体会。</p>

<p>在 Facebook 里，整体利益的另一体现就是 Don't reinvent the wheel。  笔者提到的就是他们项目里的核心机器学习的组件，当初考虑到是放在自己支付安全组内还是放在 Anti-Spam 那边。因为那边已经有现成的框架，最后平衡考虑还是放在别组，然后协调和推进。可是很多公司，往往因为只顾部门利益，总想自己造些什么出来显露功绩。即使有现成的东西也不用，造成资源浪费。</p>

<h3>发挥工程师创意</h3>

<p>和 Google 的 20% 自由时间差不多，Facebook 也有内部的 Hackathon 来鼓励工程师做各种好玩的事情，甚至可以推迟项目时间。真是难得。</p>

<h2>八卦</h2>

<p>书里也提到了关于 Facebook 请公关公司炮制散布 Google 负面新闻的事情。Mark 在内部向所有员工说明并要求大家要支持 Marketing 部门，因为它们平常都在保护公司的利益。现在即使犯一点错，也应该得到体谅。</p>

<p>书里也提到 Mark 很在意公司保密的原则，一但有人出错，坚决处理。</p>

<p>这里隐含的意思就有点意思了。Mark 是一个很看重公司机密的人。他也很注意公司团结，员工应该一致向外。个人感觉这件事情上，Facebook 的 Marketing 应该不会在老板没出声的情况下，自己乱来吧？何况书中也说到 Mark 在关键问题的产品把控上是很严的。所以，小人之心猜测那也是 Mark 本人的意思。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我能否20个月赚130亿?]]></title>
    <link href="http://kenspirit.github.io/blog/2013/04/16/can-i-make-13-billion-in-20-months/"/>
    <updated>2013-04-16T21:36:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/04/16/can-i-make-13-billion-in-20-months</id>
    <content type="html"><![CDATA[<p>你是否看到这个标题，想鄙视我而冲进来了？呵呵，我承认是有点标题党，所以我马上告诉你答案，不能。因为看完<a href="http://www.amazon.cn/gp/product/B0060E1LIK/ref=ox_ya_os_product">YouTube 创始人陈士俊自传</a>，我发现我不具备他，或者说硅谷人的特质，至少暂时。这就是他书里反复提到的，其实看书时也强烈感受到的，＂瘾＂。</p>

<p>这本书周五在亚马逊下单，周六下午收到，周日晚就看完了。是在带儿子的零星时间看完的。之所以可以看的那么快，除了我看得快，没太关注些八卦细节外，重要的是书写的流畅，活跃，富有激情。真的使我拿起来就不想放下。感觉他就像和我对话，讲故事一样。推荐看看，也可以找我借。</p>

<h2>瘾</h2>

<p>说回这本书，如果说他的成功是因为从他打小就对计算机感兴趣，和可能内在有天才工程师的基因有关，不如说是他深深的那种写代码和创造产品的瘾。他可以在一台没有硬盘的电脑上重敲一次程序展示给父母看他的成果，可以连续写代码20小时，可以放弃 Google 工作和奖金重新出来创业＂折腾＂。这就是在他们 Paypal 帮里共同存在的因子，硅谷人的因子，也是造就成功的因子。说来也巧，他也一度面临肿瘤这样的病痛，像乔帮主一样知道自己的＂瘾＂的存在，而为之奋斗。</p>

<p>我想，除了这个不为金钱的瘾外，没任何东西是能让他们这类人如此成功的。我能否培养或者挖掘这种瘾出来，然后不顾后果的去追寻呢？我觉得很难，因为我向来的性格是求稳，做事情会想很多方面，希望求最稳妥的方式，和他极其不同。就像他说的：</p>

<blockquote><p>在创业这件事上，我不希望＂退可守＂，我不想设定好退路，过于安稳的尝试性的投入岂非过于无聊？实际上，如果有一天我在一个寂静的森林里迷失，而前面又有两条路可以选择的话，我一定会在观望很久后放弃充满车辙的那一条，接下来选择杂草丛生的那条，因为我觉得，走可以预期结果的路，那样真的没意思。</p></blockquote>

<p>暂时我还做不了这点，但我隐约感觉内心有想做点事情，和创业的冲动，或许现在，我能做的是保持内心这么点冲动，和打磨自己的技术，并紧跟潮流。</p>

<h2>书里一些我比较同意的观点</h2>

<h3>公司架构和管理</h3>

<blockquote><p>PayPal 在招聘时就刻意寻找志同道合的＂自己人＂，因此让推行这种平等自由的文化变的容易起来。
...
他们在招聘于自己类似的人。</p></blockquote>

<p>其实我非常赞同这种找人的观点。虽然管理上有说法，招聘者不应该只找自己类型的人，应该在团队里有各种不同类型的人，用以互补之类的。但我觉得，互补的，主要应该是技术专业特长，但他们还是一些拥有核心共同特质的，一些相同的原则，比如说开放和接受改变挑战的心态，积极的勤奋的负责任的态度，团队合作妥协和支持的精神等。反而技术水平，专业领域不是第一考虑。当然，那些 Level A 的工程师，选人时当然尽量只选能力也是同样 Level 的同事，这可以理解。但是就像书里那个有点极端的例子，真的到了这种心态的顶峰了：面试听到说面试者喜欢打篮球的，就不要了，因为他印象中，那些打篮球的旧同学，没几个靠谱的。</p>

<p>就敏捷来说，我也觉得必须管理层和团队里每个人都有敏捷的心态才行。不一定都要是编程高手，但一定是内心要不断求变，求改进，对敏捷的核心思想的认可，而不是简单的流程的 follow。</p>

<blockquote><p>仅仅管理者自己做到尊重团队是不够的。公司管理架构的设置，有的时候，会从一开始就决定了管理和沟通的难度。</p>

<p>潘宇的总结：＂在创业公司，你是生产创意，而在稳定的大公司，你首先得在同事当中销售这些点子，得证明你的是最好的才行。＂</p></blockquote>

<p>在小公司待了近8年时间的我，可以说，真的是很不习惯大公司的沟通和效率。大公司按职能分各种团队，导致人员项目协调费时费力，出问题还很容易导致推卸责任而不是集体负责。这在书里的例子，即使是 eBay 这样的算是软件业巨头，也不能幸免。所以说，公司架构的设置，可能就已经决定问题的存在。不改变架构，是无法改变这种情况的。</p>

<p>书中提到的潘宇的总结，其实就是看你的主意到底要说服多少人，和哪些人。如果都是在创业公司里的自己人，事情就好办了。但如果是涉及大公司里不同部门，特别是不同利益团体，那就悲催了。所以在 Conway's law 有说:</p>

<blockquote><p>organizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations.</p></blockquote>

<p>在软件工程里，沟通占据绝大多数时间和比重。公司架构这种影响沟通的客观屏障，也就不可避免的影响了系统设计。</p>

<p>我心中的理想团队，就是那么几个志同道合的人，几个工程师，一两个设计人员，当中有一个核心的令人敬仰和最后拍板的头头，说做就做，同进退。</p>

<h3>创业</h3>

<blockquote><p>每一个创业的成功当然都免不了运气的成分，<br/>
...<br/>
也就是俗称的＂在正确的时间做正确的事＂。<br/>
...<br/>
创业者们得培养自己分析和理解技术趋势的眼光，要不然只能任运气溜走。</p>

<p>新闻每天都在发生。但对于敏感的创业者来说，这些事件，如果你搞清楚它们背后的联系，总会意味着某些意想不到的机会。</p>

<p>YouTube 和点评网站 Yelp 都从 Paypal 那里学到一个有价值的经验 ---- 头一个想法往往不是最好的。</p>

<p>＂奥卡姆剃刀＂这个这个哲学原理崇尚＂如无必要，勿增实体＂，尽量简单有效。</p></blockquote>

<h3>人</h3>

<blockquote><p>在这个世界上，有的人就是擅长维持一个公司的运转，有的人则擅长不断创新突破，这两种选择本就无所谓对错，只是，要选择最适合你自己的。</p></blockquote>

<p>我还不知道自己属于哪种人。我算是有点典型工程师心态，对一些繁琐的流程和企业架构和事务感觉很没效率，不爽，也很不喜欢办公室政治等。维持公司运转要比这烦多了。作技术突破创新吧，技术底和那种专注技术难点的死劲还不够，创新能力也有待培养。再按感觉走走看，攻一下技术吧，这也算是硬通货。</p>

<h2>八卦</h2>

<ol>
<li>一个 Google 高管，跳槽去 Facebook 前，向他打探 YouTube 的战略。Facebook 还请公关公司炮制散布 Google 负面新闻。</li>
<li>他很短时间就娶了 Google 韩国第一美女。求婚过程还很有趣的。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读 Lean Startup 和观电影 Lincoln，电影 The VOW 后感]]></title>
    <link href="http://kenspirit.github.io/blog/2013/02/13/review-on-book-lean-startup-and-movie-lincoln-and-the-vow/"/>
    <updated>2013-02-13T21:40:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/02/13/review-on-book-lean-startup-and-movie-lincoln-and-the-vow</id>
    <content type="html"><![CDATA[<p>这篇 Blog 内容有点杂，是因为这是过年期间做的主要几件事情，几篇 Blog 又太多，况且只是那么些胡思乱想，加上里面确实有些相通的地方，所以还是合体吧。</p>

<h2><a href="http://www.amazon.com/Lean-Startup-Entrepreneurs-Continuous-Innovation/dp/0307887898">Lean Startup</a></h2>

<p>这本书我总体来说看的比较粗略，主要因为前面的章节在目前身处非创业型企业文化下不太容易适用得上，所以目的只是大概了解作者思想。后面的 <em>Part Three ACCELERATE</em> 部分倒是有些是可以相对容易地应用在成熟，或者说已经某程度上固化并寻求改变的企业上。我说的是不太容易和相对容易，因为任何改变，重则涉及文化，轻亦涉及利益，都是难事。那如何建立一个 Adaptive 的企业环境呢？</p>

<h3>突破点</h3>

<p>Five Whys 是在第11章 <em>Adapt</em> 里提到的一个很好的方法。其实就是中国人说的打破砂盆问到底。看来还是古人智慧无穷啊。这个 Five Whys 除了带来它显而易见的好处，也就是了解到事件的根源之外，其实还可以让一个企业或团队控制解决问题的程度和节奏。问五次，不至于太少而了解不到真相，也不至于太多，而浪费过多精力。</p>

<p>我们很常在开发或团队建设中碰到不少问题，比如说每次代码改动后要浪费很长时间部署，某某人改动代码后部署不成功了，新人不了解系统框架，部分人写代码很不好读等。很多人听到这些问题都会抛出一个大而全的答案，机器慢，没 CI 环境，没培训，没标准等。这种答案因为太笼统和没有边际，导致解决方案看起来需要大量人力物力去解决问题，后来不了了之，说了白说。</p>

<p>所以，Five Whys 的实施要求是 <strong>Be Small，Be Specific</strong>。</p>

<p>比如前面说代码改动后部署慢，原因可能是要重新编译打包和 Web 容器启动慢。那为什么要重新编译打包，可能是因为某些系统服务编译和打包的脚本绑定在一起。那可不可以把它们分开？如何分开？能否借助工具做 Hot Deploy？那为什么容器启动慢？能否不用 EAR 来部署，减少解压缩时间？能否换用轻量级容器？能否禁用不必要插件？ 这些其实就是一些细小而精确的建议和想法。再比如书本举出的很常见的例子，就是培训。多少的培训才足够，覆盖范围要多广？还是说，在碰到问题后，才写出对应的 Guideline 来避免错误再次发生？这样的 Incremental 式的累积，会否更省时间，更有效针对问题？</p>

<p>其实 Be Small，Be Specific 还有另一个好处就是避免由 Five Whys 而产生出 Five Blames。把问题精确化，细化，可以尽量避免问题扩大化，责任推诿，相互指责，无法确定责任人，最后无法解决。</p>

<h3>实施细节</h3>

<p>另两条原则呢，可以引用原话来说：</p>

<blockquote><ol>
<li>Be tolerant of all mistakes the first time.</li>
<li>Never allow the same mistake to be make twice.</li>
</ol>
</blockquote>

<p>还有一些比如说，不要带上历史包袱，把历史遗留问题等到重新出现时再解决；讨论问题原因和解决方案时，一定要所有牵扯到的人员在场，无论位处任何部门，级别等都是需要注意的事项，推荐各位去细看。</p>

<h3>后台要硬</h3>

<p>这里可能说的有点黑，但其实中国人很能理解它的含义。因为要想做事，首先必须得到领导支持。要有开明的文化和环境，必须要有开明的领导。所以，充分让领导认识到 Five Whys 的好处，实施的原则，可能带来的后果和对团队文化的冲突，并取得全力支持，才能确保有效执行。</p>

<h2><a href="http://www.imdb.com/title/tt0443272/">电影 Lincoln</a></h2>

<p>Lincoln 每次说话，要么风趣睿智，要么充满激情。那一字一顿，不紧不慢而又坚定的语气，让我感受到这位历史伟人，对解放奴隶制的理想是多么执着。从以下欧几里德定理都可以看到人人生而平等，真是可贵，或者还是只能说他对此执着到何等程度。</p>

<blockquote><p>It is a self evident truth that things which are equal to the same thing are equal to each other.</p></blockquote>

<p>电影里也描述了他作为一位父亲和丈夫的一面，那些为国而牺牲家庭对他带来的愧疚。总体来说，这是一部不错的电影，让我看到当中的一些人性转变，慷慨激昂，推荐大家看看。</p>

<h3>懂得如何前行</h3>

<p>电影里的一段他对 Mr. Steven 说的话，我觉得深有感触。听写可能有差别，但大意应该没错：</p>

<blockquote><p>A compass, I learnt when I was surfing in hill, will point you to the true north where you are standing, but it has got no advice about the swamps, deserts, chasms, along the way.  You can pursuit to go the destination, you plunge your head ahead, heedlessly of the obstacles, achieving nothing more than sinking in the swamp?  What is the use of knowing the true north?</p></blockquote>

<p>其实这里说的道理就是，即使你知道真理和正确的方向，如果因为鲁莽地直行，被途中困难所牵绊而无法到达目的地，那手握真理意义何在？</p>

<p>正如去年我的目标是 Drive the Change，如果说我只顾四处宣扬，不顾各方抵触，而不是实在的迂回实施，那意义何在？ 所以说，求变，也要懂得如何带领别人跟随而变。自己独变，往往成为异类，无法生存。带领众变，才能成为改变历史的潮流。</p>

<h2><a href="http://www.imdb.com/title/tt1606389">电影 The VOW</a></h2>

<p>这可能算是老套的爱情桥段电影了。女主角撞车失忆，她丈夫尽一切办法想她恢复，但都无能为力。放手离开后，女主角重过生活，发现后来，还是沿旧轨迹，邂逅男主角，重续前缘。</p>

<p>老婆看的纸巾浪费无数，我也被男主角的无私的爱而折服。情爱的观点基本共通，我也就不说了。此外的感悟是，一个人，即使让你重新走一次走过的路，可能你还是会沿旧有的轨迹再走一次。你就是你，无论何时何刻，那一刻的反应，那一刻的抉择，都是你内心的反映。所以，不必后悔说，如果回到某时某刻，可能你就不会那样做了。也不用对一些事情犹豫不决，不知道做了学了，对日后是否有益处。要做的，还是跟随自己的心，在当前时刻，做一个自己的决定，走自己的路。最终回首，一些看不起眼的决定，都是为你的 Destiny 而铺设的。正如乔帮主的名言，过去不起眼的点，在最后都会连成线，成就你自己。</p>

<blockquote><p>Again, you can't connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something - your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.</p></blockquote>

<p>所以说，自己认为该做的就去做，该放手时，还是应该放手。是你的，总会回来。不是你的，放手后，可能你的才会来。谋事在人，成事在天。Make things happen，but don't force things happen。</p>
]]></content>
  </entry>
  
</feed>
