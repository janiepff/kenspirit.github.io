<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Think | Thinking in Crowd / 鹄思乱想]]></title>
  <link href="http://www.thinkingincrowd.me/blog/categories/think/atom.xml" rel="self"/>
  <link href="http://www.thinkingincrowd.me/"/>
  <updated>2012-12-05T21:52:28+08:00</updated>
  <id>http://www.thinkingincrowd.me/</id>
  <author>
    <name><![CDATA[鹄思乱想]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ExtJS, Jasmine, Maven - Why I am working on them?]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/08/05/extjs-jasmine-maven-why-i-am-working-on-them/"/>
    <updated>2012-08-05T15:52:24+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/08/05/extjs-jasmine-maven-why-i-am-working-on-them</id>
    <content type="html"><![CDATA[<p>Before going into how to setup <a href="http://pivotal.github.com/jasmine/">Jasmine</a> to do Unit Test for <a href="www.sencha.com/products/extjs">ExtJS</a>, I think I should describe why I am doing this.</p>

<p>I have been using ExtJS for around 4 years.  My first company used HTML + ExtJS to build the UI while the current one use ExtJS completely to do that.  I have encountered lots of cases that well-tested behavior failed after some new features introduced in.</p>

<p>Everyone knows that it's because there lacks Unit Test.  However, there have never been any Unit Test done for Javascript in any project.  There are many of the reasons behind that, such as tight schedule, not enough attention etc.  But the most important reason that outweights or strengthens others is that Unit Test for Javascript is way too difficult than Java, especially when Javascript is used intensively to build the UI and implement business logics.</p>

<p>One of the reason makes Javascript hard to do Unit Test is due to good tools unavailability;  the other one is that most developers tend to not separating business logic from UI code quite clearly.</p>

<p>After the emergence of <a href="http://seleniumhq.org/">Selenium</a>, I have once thought it should be the right tool to address this issue.  However, after reading Selenium Doc and seeing what my previous colleagues did for recording &amp; playing, I think Selenium should be used mainly for Integration Test, not in Unit Test level.  My opinion is further strenghten after watching a video from Google Testing Expert and reading the blog from Martin Fowler:</p>

<blockquote><p><a href="http://www.infoq.com/cn/presentations/duannian-agile-test">让测试也敏捷起来</a> by 段念</p></blockquote>

<p><a href="http://martinfowler.com/bliki/TestPyramid.html">TestPyramid</a> by Martin Fowler</p>

<p><strong>The main points in TestPyramid are:</strong></p>

<blockquote><ol>
<li><p><strong>Low-level unit test should be many more than high level end-to-end testing through GUI.</strong></p></li>
<li><p><strong>Testing through UI is slow, brittle, expensive to write.</strong></p></li>
<li><p><strong>A rich javascript UI should have most of its UI behavior tested with javascript unit tests using something like Jasmine.</strong></p></li>
</ol>
</blockquote>

<p>Above is a long long purpose briefing, I hope it worthes to let you know the background and also agree with me on this.  I heard about Jasmine before reading the post by Martin Fowler, however, I kept thinking that it's quite difficult or even impossible to use Jasmine to test those ExtJS UI components.</p>

<p>Until I did sit down and really tried to use Jasmine to test the ExtJS code, I can say that Unit Test against ExtJS by Jasmine can be achieved at some level once we know what to test for.</p>

<p>In next post, I will show you the steps to bind ExtJS, Jasmine, Maven together to do the Unit Test and what I think we should test against.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[待在优秀的地方，还是把所在的地方改变的优秀]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/07/15/stay-in-good-or-change-to-be-good/"/>
    <updated>2012-07-15T17:31:25+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/07/15/stay-in-good-or-change-to-be-good</id>
    <content type="html"><![CDATA[<p>已经换了工作差不多一年，期间还有幸被派去美国学习所做的系统后台开发，趁着本博客重新启航，是时候回顾一下了。</p>

<p><strong>小公司 vs 大公司</strong></p>

<p>在小公司那么多年来，给我最大的感受就是灵活性强，行动敏捷。再加上本人后来能担当上Team Lead角色，所以，有什么好的想法，自然容易尝试和贯彻。但是公司的敏捷，一但被利用成不断高强度赶项目而忽视了人员培养，代码和框架的改进，团队和系统的问题便不断浮现。这也成为我离开的原因之一。不过，对怎么样推动改变上，我并没有做的很好。在能自己拍板范围外的事，虽然有提意见，但是推动不够，主要都在等领导的改变和决策，主动性还不够强。</p>

<p>来了大公司差不多一年了，最大的感受和没有来之前想象到的差不多，就是沟通成本非常高，行动迟缓。再加上职位上我只是小兵一名，有好的想法，也没法通过“强硬”的手段，推广出去。在哪里体现出迟缓的问题呢？</p>

<ol>
<li><p>问题达成结论难。邮件多，开会部门多，人员杂，是大公司的通病。这其实还不是主要问题。问题是一开始讨论邮件或者开会的人员，在等级或者部门上来讲，大家都是平级的。通常情况是老大级别一般先没有参于，即使有，也是各方的老大，也都在，结果还是打平。在谈一个问题的时候，除非大家对一个问题共识较多，或者各方影响不大，方案比较容易通过。但是如果主要涉及一方要其它各方做更大改变，就不容易出结论了。因为大家平级，不好说一方强行推行。那么最终可能要拉锯一段时间，最后再把老老大拉出来，才能拍板。</p></li>
<li><p>推行改变很难。改变，本来就是很难的事情。想一想睡惯懒觉的你突然要自己每天早起30分钟，跑5圈，你做的到吗？更何况如果是要改变别人，那更难了。再想象在大公司，你要改变的是多少个别人。举个例子，从10月份进公司我问为什么不用Maven，有人答我，可能今年5月，到几个星期前我再抱怨，再有人说8月。现在就放话在这，等等看什么时候实施得了。另一个原因同开会难有定调一样，涉及到影响流程，或某些人员的工作比较大的时候，就一定要有一位拍板的人物了。</p></li>
</ol>


<p>其实无论是软件还是非软件公司，大了，自然不好管了。Yahoo不是也被批官僚气氛严重，甚至连Google也不例外。Agile的提出，其中一个焦点也致于减少沟通环节。我们也引入了Agile，但是，感觉形式多于内容，反而更乱。</p>

<p><strong>如何改变，如何敏捷</strong></p>

<p>个人认为，要做到Agile，很重要的一个思想就是行动迅速，不断反省，找出不完善的地方，加以改正。这里面，非常需要的一个手段，就是试错。但是很多大公司，很难实现Agile的原因，一个原因是人多难协调，行动缓慢，另一个原因就是不敢试错。一般来说，大公司除了客观原因由于子系统杂，多，乱外，更是因为人员求稳，怕担责的思想，不敢随意做改变。怕错了，出问题，承担后果。</p>

<p>之前看了一本David J. Anderson写的关于<a href="http://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402/ref=sr_1_1?ie=UTF8&amp;qid=1342343902&amp;sr=8-1&amp;keywords=Kanban+David+J">Kanban</a>的书，个人感觉是非常适合大公司引用来进行流程，甚至是文化的改进的，甚至比Agile更有效。其中一个重要的原因是Agile的推行，一般意味着对现有流程的一次大的变革。如果人员思想跟不上，或者没有抓住重点，流于形式的话，问题更多。反而，Kanban强调的是在现有流程上的不断发现各个部位的瓶颈，不断进行细微改善和调整。里面推崇的Kaizen文化，更是精华：“任何人对流程改进的尝试，即使失败，或者出问题，都不会被追究。” 要做到这点，虽然需要有良好的衡量机制，更重要的是一种开放和允许尝试的文化。当每个人都不必惧怕所谓的承担责任时，甚至鼓励自发的对流程进行改善的时候，力量可是不容小看的。</p>

<p>具体操作上来说，要推行改变，首先要对你提出的东西，有深刻的理解，它的优缺点都要清楚，必须强调改变带来的好处是远大于它的缺点的。因为抵制的人，总会拿它的缺点说事。而且，你也必须要有坚实的论证，才能说服同事，甚至是你的老板。之前看了一本书《<a href="http://www.amazon.com/Driving-Technical-Change-Terrence-Ryan/dp/1934356603/ref=sr_1_1?ie=UTF8&amp;qid=1342343784&amp;sr=8-1&amp;keywords=Driving+Technical+Change">Driving Technical Change</a>》by Terrence Ryan，主要正是教人如何推行改变。最后，当然得期望你上面的领导是英明的，你就事半功倍了。</p>

<p><strong>改变才是永恒</strong></p>

<p>其实，没有哪里可以永恒保持优秀，重要的是如何不断的改变，来追寻优秀。小公司可以变得臃肿，大公司也可以敏捷。重要的是，首先自己要有一颗秉持Kaizen的心，和同一班同样追寻改变和优秀的人合作。</p>

<p>所以，今年我的目标就是"Push for Change; Act as Model” - “推行改变，以身作则”。其实这作为每一年的目标都是正确的，但是，对于现在的我来说，是迫切的。这正是针对自己之前的不足，也是针对目前的环境。问题多的地方，机会才多。这么一段时间以来，我感觉也确实推动了一些东西，无论直接还是间接，甚至方法上可能并不正确，或者为自己留下后患，我都无所畏惧，将继续前进。</p>

<p>可喜的是，新任的Team Lead，对问题上和我有比较一致的看法，也很积极推动团队的前进，感觉非常高兴。同时，可以在他身上，学习如何在大公司内推动改变，确实难得。前景暂时还是光明的，只需要继续努力。</p>

<p>接下来，具体的想改变的事项，我希望能在目前项目的前端开发引入Unit Test，以验证自己对前端开发和测试的想法，以及作为发展自己前端开发能力的一项手段。敬请期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[曾经，最后]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/02/15/ever-never/"/>
    <updated>2012-02-15T02:42:33+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/02/15/ever-never</id>
    <content type="html"><![CDATA[<p>曾经真心相待，换来质疑无奈。只能痛心离去，送上最后祝福。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[到底是前进还是后退？]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2012/02/05/forward-or-backward/"/>
    <updated>2012-02-05T02:07:56+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2012/02/05/forward-or-backward</id>
    <content type="html"><![CDATA[<p>自从我离开旧公司以来，都有旧同事问我新公司这边有没有什么好的职位。</p>

<p>一开始，其实都系正常，因为问我的人，都已经在那做了和我差不多那么多年，甚至都还是第一份工作。所以，希望出去闯闯也理所当然。但是近来，好像人数还有增多的倾向，而且是服役多长时间的都有，有扩散的倾向。这还不是让我最担心的，更重要的是，从每个人身上，我都听到些怨言。这样，感觉情况就不妙了。</p>

<p>我走的时候，就听说公司，上至大老板开始更加重视起和员工的沟通，员工培养上面来。</p>

<p>本想我走了后，可能还真是做了件好事，但为什么所谓“更加重视员工”的做法还会引起那么多怨言和激发人员要走的想法呢？</p>

<p>拿我听到的两点来说吧:</p>

<p><strong>1.  加薪方面</strong></p>

<p>本来人员流失后，加薪是正常和需要的，尤其是我之前还在职并还能发表一下意见的时候，已经和上层说过这个问题了。公司开发部中层方面（3年左右）的人员，薪酬水平有点偏低的。但我听到的很多怨言，都说这次加薪幅度，很多人都不满意。估计主要是中层加的不多。像一些做了5年以上的，公司里非常重视的少数，好像并没太大声音听到，因为我也知道有一些加的好像真不少，我也和他们说其实公司对他们已经很不薄，不要以为外面真的高很多而跟风轻率跳槽。</p>

<p>所以我感觉，可能中层普遍加的都并不多，薪酬集中到某些人上面去了。这里是一个问题，因为感觉公司以前一直有一个想法就是，最重要的那么年资老的，能干活的人，保住就行了。其它人就无所谓了。反正有老员工带着干。</p>

<p>其实这样的想法是错误的，会引起下面的问题。要保住和发展公司，不是只要有老员工就行的了。</p>

<ul>
<li><p>新员工感觉不受重视，没发挥空间。因为上层，也只认得老员工，有事也找他们。新员工Turn over太快。其实这也和上层缺乏和下面的员工进行沟通有关。我就听一个新员工说过：“我们这些新人，其实都不重要，都是堆砖头的，老员工在就行了。”</p></li>
<li><p>老员工经常要带新员工，但因为他们流动太快，老员工都有培训疲劳症了。公司的产品本来是有一个比较好的框架的，做的事情，一部份是重复性劳动，一部份是业务逻辑或复杂的customization。如果一直要老员工培训新人来做重复性的劳动，老员工就会很烦，而且因为项目紧还要忙于处理剩下的部分，还没有时间去改进框架和产品。框架很快就被毁了。</p></li>
<li><p>公司总不招一些有经验的人，这样，老员工学习新知识，新文化只能靠上层，或者自学了。可是，因为忙，基本哪还有时间，有时周末都还要加班。上层也少和下面的沟通，更不要说创造培训的机会了。这样，久而久之，老员工感觉学不到东西了，你工资又不比别人有吸引力，那为什么还要留着呢，更何况连本来保留着的一些感情，还被一些人，一点一点的摧毁了。老员工的流失也成了必然。听一个老员工说，他临走前问上层为什么不招有经验的人，那个竟然答，我们不需要有经验的，进来还不是要教他？我真是无语了。</p></li>
</ul>


<p>还有另一方面是，有人说这次加薪幅度不高，但是搞了个什么类似奖金的东西，就是做满一年后，会再拿到双薪外可能多一个月左右的工资吧。但据他们算过以后，觉得如果分摊到每一个月现拿，才差不多达到他们觉得理想的水平。所以普遍让人觉得，又想让人留下，又一点诚意都没有。</p>

<p>其实这种压后拿钱，和别人给个什么期权是一样道理，是有用的，但要看什么时候。如果别人都很不爽了，或者觉得你没有前途了，还要来干什么呢？所谓乱世用重典，重要时候，一定要用让人一击即倒的手段，让人无法拒绝，而不是还谈什么感情，理想的。过年那段时间，我刚好看了一本关于人脑学习特性的书(Brain Bugs)里面有说到，人普遍来说是比较看重眼前利益的，你说现在得到20元，或者一个月后拿到40元。基本都是选现拿的。因为远期目标并不多多少，而且还要看你说话算话不。所以，如果真如我听到的，要等上一年，而且即使现在分摊出来，才是理想的价格，可以说是没有多少吸引力的。</p>

<p><strong>2.  请假方面</strong></p>

<p>听说现在请假很不容易，要提前一个有，还真有人被reject了，可能多是一两天那种情况吧，我不知道是真的那么忙呢，还是专门出这种政策来防人出去面试找工作的。如果真是后一种情况，还真是脑残做法。所谓上有政策，肯定下有对策，请个病假不就行了，还不用提前说呢。退一步说，如果真是那么忙，据我所知，以前一起工作的同事，基本和我熟悉的，每个人工作都是很负责任的。有需要的话，晚上周末自觉加班，过年过节被点名要开电话或加班，最多抱怨一下，也还是这样。到真有事要请假，相信也是有急事，事后也会补回来。再退一步说，现在公司那么多怨言的情况下，还出这样的政策，真是还怕不够多吗？想走的人，真不爽了，没找到新工作，也会走。真搞不懂他们是怎么想的。</p>

<p>之前，我在LinkedIn里还看了两篇文章：</p>

<p><a href="http://www.linkedin.com/news?actionBar=&amp;articleID=5562842806801670153&amp;ids=cPATdjAPe3wSdj0PczkMd3oRdiMPczcNd3AMdz0Sd30MdjsOdzkRb34Me30Rdj8Scj8Uej0Vej8SdjkIcj8Td3gRej0UdzoOc3AQczoRdiMPdj4MdPoNc3wSc3wOd3wOdzkR&amp;aag=true&amp;freq=weekly&amp;trk=eml-tod2-b-ttl-0&amp;ut=2yCqJXsKqFql41">Six Reason Why You Should Give Your Employee a 4-Day Week</a></p>

<p><a href="http://www.linkedin.com/news?actionBar=&amp;articleID=1026708525&amp;ids=cPsOdzoVdj8MciMTdzcScPoVdzATe3wTcj4NdzkRb34Tdj8PcjgOc34Idj8Re30Tdz8MciMPcPsMe3sMcz0N&amp;aag=true&amp;freq=weekly&amp;trk=eml-tod2-b-ttl-1&amp;ut=0D2UlrYgjNgR41">Why You Should Give Your Employee Unlimited Vacation</a></p>

<p>里面其实说的都是为什么这样会更尊重员工，减少公司成本，激起员工工作热情，还可以从中找出积极向上的人。其实想起来何尝不是呢？想起我们平时不是有很多假期都没有放，要堆到年后才清吗？放个长一点的假，其实也是觉得无聊，想干活了。其实有些时候，放松了，可能更好管。</p>

<p>本来既然已经离开，就不好再说什么，但是看到这种情况，还是忍不住要发泄一下。也不知道那些那么另人不爽的政策，是不是又是那个人想出来的。真是“成也萧何 败也萧何”。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[9种比钱更好的激励员工的方法]]></title>
    <link href="http://www.thinkingincrowd.me/blog/2011/12/17/9-things-that-motivate-employee-more-than-money/"/>
    <updated>2011-12-17T00:24:26+08:00</updated>
    <id>http://www.thinkingincrowd.me/blog/2011/12/17/9-things-that-motivate-employee-more-than-money</id>
    <content type="html"><![CDATA[<p>激励员工的士气</p>

<p>最近看到篇文章：“<a href="http://goo.gl/ushlH">9种比钱更好的激励员工的方法</a> (9 Things That Motivate Employees More Than Money)”。</p>

<p>第1、6点，展示了公司的高层有没有真正的关心过下属，是真的把他们做的事都看在眼里，放在心上，还是只是说说而已。表扬不应该是空泛的，应该很具体，让下属知道，原来我的老板真的看在眼里，知道我在做什么的，还肯特意抽时间和他吃饭，谈话。如果真的关心，员工是感觉的到的。很多别的都是浮云。说到底，还是有没有心，就像关心自己朋友，家人一样。</p>

<p>第2、3、9，其实还是让员工有“当家做主”的感觉，把他和公司联系在一起。生死共存。尽量减少中间层管理人员，也是希望减少一种被命令的感觉。</p>

<p>下面是译文：</p>

<p><strong>别简单的向他们展示钱(即使你有). 下面有9种更好的方法来提升士气.</strong></p>

<p><strong>激励员工的能力</strong>是一个企业家需要具备的最重要的能力之一. 两年前, 我认识到我并不具备这种能力. 所以,我请了一个有这种能力的CEO.</p>

<p>Josh在企业界已经有12年的经验, 包括在Comcast公司运营一个重要的部门. 我知道他已经很老练, 但一开始的时候我还是对他有点怀疑. 当时我们正在经历一些成长的危机, 我认为我们并不充足的现金非常难提高公司和员工的士气.</p>

<p>我错了.</p>

<p>在他和他任命的团队领袖的帮助下, Josh不单单重建了公司的文化, 还打造了一个充满激情, 奋力拼搏的团队. 而这正是我希望致力于为发展和改善公司想做的.</p>

<p>下面是我从他身上学到的9件事:</p>

<ol>
<li><p><strong>不要吝惜表扬.</strong> 每一个人都渴望得到表扬, 而这也是最容易做到的一件事情. 再说, 从一个CEO那得到表扬, 比你想像的要有效得多. 为你的团队成员取得的任何改进提出表扬. 当你适应了一对一下为员工提出表扬, 你可以尝试在其他所有人的面前表扬那些值得表扬的人.</p></li>
<li><p><strong>把管理人员都去掉.</strong> 项目里没有项目经理? 不对吧! 请试一下. 我明白把项目经理或管理人员去掉, 让你的员工以一个团队的形式紧紧的工作而不是向某一个人汇报的做法会有点让人怀疑. 请想一想. 比让你的管理人员失望更糟糕的事情是什么? 是让你的团队失望! 让一个团队的人平等的于同事一起工作, 项目通常会做得更好更快. 他们会很早来到办公室, 留得很晚, 并把他们所有的精力集中在解决问题上面来.</p></li>
<li><p><strong>把你的想法变成是他们的.</strong> 人们都不愿意被人命令做事. 与其告诉别人你想做不什么出来; 通过一些方式让他们觉得你提出的要求好像是他们自己想出来的一样. “我想你这样做”可以说成”你不觉得如果我们这样做的话更好吗?”</p></li>
<li><p><strong>绝不批评或纠正.</strong> 任何人, 是的, 我说的是任何人, 都不愿意听到别人说他们做错了. 如果你在找一个打压士气的人, 这就是了. 要尝试一种委婉的方式让人们去提高, 从他们的错误中学习, 并解决问题. 你可以问:”这是解决问题的最好办法吗?” 这种情况下,你们是在谈论解决方案的对话中, 而不是互相指责.</p></li>
<li><p><strong>让所有的人成为领袖.</strong> 指出你下面的最出色人员的强项, 并让他们知道正是因为他们的出色表现, 你希望他们成为其它人的榜样. 这样, 定出高标准, 那他们自然而然得被激励并为了保持作为一名领袖的名声而努力.</p></li>
<li><p><strong>一星期带一名员工出吃午饭.</strong> 让他们得到惊喜. 别发公告来说明制定出这样一个政策. 走到一名员工面前, 然后邀请他和你共进午餐. 这是非常简单的方法让他们知道你有关注和感激他们的辛勤工作.</p></li>
<li><p><strong>认可并给于奖励.</strong> 这两件事有很多形式: 大声在公司会议点名说出他成功的为公司做了什么事情. 比赛或举办游戏并把结果记录在白板上,让任何人都可以看到. 有形的奖励也行, 但别太昂贵了. 尝试一些事情像晚餐, 奖杯, spa服务和牌匾等.</p></li>
<li><p><strong>举办公司派队.</strong> 以一个团队来做事情可以维系一个团队很长时间. 举办公司郊游活动, 生日派队, 快乐时光时间. 别只是等到节假日才举办公司活动. 一年内不间断的举办活动可以让你的员工知道所有人都在一起.</p></li>
<li><p><strong>分享荣誉和痛苦.</strong> 当你的公司表现好的时候,庆祝. 这是最好的时间来让所以人知道你感激他们每一个人的辛勤劳动. 当人们帮助你的公司成功的时候, 尽你的最大努力让人们知道你是会怎么来感激他们的. 如果有什么让人失望的事情, 同样于所有人分享. 当你期望有很好的表现的时候, 你的团队应该知道公司当前的位置. 要坦白和透明.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
