<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sword | Thinking in Crowd / 鹄思乱想]]></title>
  <link href="http://kenspirit.github.io/blog/categories/sword/atom.xml" rel="self"/>
  <link href="http://kenspirit.github.io/"/>
  <updated>2013-08-29T20:35:15+08:00</updated>
  <id>http://kenspirit.github.io/</id>
  <author>
    <name><![CDATA[鹄思乱想]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to support page content i18n in AngularJS]]></title>
    <link href="http://kenspirit.github.io/blog/2013/08/29/how-to-support-page-content-i18n-in-angularjs/"/>
    <updated>2013-08-29T20:16:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/08/29/how-to-support-page-content-i18n-in-angularjs</id>
    <content type="html"><![CDATA[<p><a href="http://code.angularjs.org/1.0.8/docs/guide/i18n">i18n</a> (Internationalization) is one of the development guide section in AngularJS.  However, the doc doesn't really help us a lot to do what we want basically for i18n, language change support of the web page content.</p>

<p>As an <a href="http://en.wikipedia.org/wiki/Single-page_application">SPA</a> (Single Page Application), the view in <a href="http://angularjs.org">AngularJS</a> is partially loaded, rendered and even cached at client side.  When user switches the language, how can we rerender the page with another language?</p>

<p>My idea is to make the label or web page content as a binding model linked with the language.  If the language value is changed when users switch language, those label models should be updated.  It works smoothly but I haven't done performance test for extremely large page yet.</p>

<p>Let's see how it's done.</p>

<p>First, I need to define a Service which is used to fetch language resource file, cache them locally, and do the translation.</p>

<p>```javascript</p>

<pre><code>factory('LocaleManager', function($resource, $rootScope) {
    var langs = {},
        LocaleManager = $resource('/js/i18n/resources-locale_:lang.js',
            {port: ':3000', lang: 'en_US'});

    LocaleManager.load = function(language) {
        if (langs[language]) {
            if ($rootScope.language !== language) {
                $rootScope.language = language;
            }
            return;
        }

        return LocaleManager.get({lang: language}, function(data) {
            langs[language] = data;
            $rootScope.language = language;
        });
    };

    LocaleManager.getText = function(text, language) {
        if (language === 'en_US') {
            return text;
        }
        if (langs[language] &amp;&amp; langs[language][text]) {
            return langs[language][text];
        }
        return text;
    };

    return LocaleManager;
})
</code></pre>

<p>```</p>

<p>You can find that there is a <a href="http://code.angularjs.org/1.0.8/docs/api/ng.$rootScope">$rootScope</a> level variable <em>language</em>  which is set to the user selected language when <em>LocaleManager.load</em> is called.</p>

<p>Later if we use the <a href="http://code.angularjs.org/1.0.8/docs/api/ng.$interpolate">$interpolate</a> like below in the view, the text value can be updated whenever the <em>$rootScope.language</em> is changed.</p>

<p></p>

<pre><code>{{ LocaleManager.getText('Login', language) }}
</code></pre>

<p></p>

<p>An alternative approach is to define a <a href="http://docs.angularjs.org/api/ng.$filter">$filter</a> for translation instead of calling a method from Service class.  Haven't tried that yet and will give an update here once done.</p>

<p>Do you have experience on i18n in AngularJS?  Thoughts and comments are appreciated.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function definition, this and bind in JavaScript]]></title>
    <link href="http://kenspirit.github.io/blog/2013/06/14/function-definition-this-and-bind-in-javascript/"/>
    <updated>2013-06-14T20:00:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/06/14/function-definition-this-and-bind-in-javascript</id>
    <content type="html"><![CDATA[<p>I thought I know the Function definition, execution context and the behavior of <em>this</em> in JavaScript.  However, I realized that actually I don't or the knowlege is still not firmly grounded in my mind when I wrote some code similar to below snippet but have no instinct of the error.</p>

<p>```javascript
var TestObj = {</p>

<pre><code>a: function() {
    console.log('A');
},
b: function() {
    console.log('B');
    this.a();
}
</code></pre>

<p>};</p>

<p>TestObj.b();</p>

<p>var c = TestObj.b;
c();
```</p>

<p>The result will be as below, right?</p>

<p><code>javascript
B
A
B
A
</code></p>

<p>You might suspiciously answer No but If your instint doesnot tell you that and why, then you don't know JavasScript well either like me.  The result actually is:</p>

<p><code>javascript
B
A
B
TypeError: Object [object global] has no method 'a'
</code></p>

<p>It is a little bit awkward or counterintuitive at first glance but it's JavaScript.  It's the feature and amazing part.  Let's break it down piece by piece and see why.</p>

<h2>Function definition</h2>

<p>The <em>TestObj</em> includes two methods.  The Function definition there actually creates two anonymous functions and then the references to the functions are assigned to the properties <em>a</em> and <em>b</em>.  Those two functions are not owned by <em>TestObj</em> and just referred by the two properties of <em>TestObj</em>.  This is the most important part causes the confusion.  Hence, above code has not much difference than below except now we assign a name <em>B</em> for one of the function:</p>

<p>```javascript
function B() {</p>

<pre><code>console.log('B');
this.a();
</code></pre>

<p>};</p>

<p>var TestObj = {</p>

<pre><code>a: function() {
    console.log('A');
},
b: B
</code></pre>

<p>};
```</p>

<h2>this</h2>

<p>In <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</a> edition 5.1:</p>

<blockquote><p><strong>10.4.3 Entering Function Code</strong><br/>
The following steps are performed when control enters the execution context for function code contained in
function object F, a caller provided thisArg, and a caller provided argumentsList:</p>

<ol>
<li>If the function code is strict code, set the ThisBinding to thisArg.</li>
<li>Else if thisArg is null or undefined, set the ThisBinding to the global object.</li>
<li>Else if Type(thisArg) is not Object, set the ThisBinding to ToObject(thisArg).</li>
<li>Else set the ThisBinding to thisArg.<br/>
...</li>
</ol>
</blockquote>

<p><em>this</em> is a special keyword refers to the binding object in the current execution context of the Function.</p>

<p>Once we invoke the Function through Object method, the <em>this</em> inside the Function body actually has been set to the <em>TestObj</em> instance.  Hence, <em>TestObj.b()</em> logs B and A consecutively because <em>this.a</em> exists as a property of <em>TestObj</em>.</p>

<p>However, below statements mean differently.</p>

<p><code>javascript
var c = TestObj.b;
c();
</code></p>

<p>Actually, variable <em>c</em>  is just another reference pointing to Function B.  Hence <em>c()</em> is same as <em>B()</em>.  When directly invoking Function B, the <em>this</em> is bound to global object.  Because there is no <em>a</em> defined in the global object, error occurs.</p>

<h2>How to set a particular object as <em>this</em> to function</h2>

<p>It's commonly known that <em>call</em> and <em>apply</em> method can be called on the Function object providing a specific object as <em>this</em>, say:</p>

<p><code>javascript
var c = TestObj.b;
c.call(TestObj);
</code></p>

<p>The result is desirable.  However, this approach invokes the Function immediately.  This is normally not the case that a Function has to be assigned to a Reference and passed around which is meant to be executed dynamically, like:</p>

<p>```javascript
function dynamic(fn) {
  fn();
}</p>

<p>dynamic(TestObj.b);
```</p>

<p>In this case, we should not use <em>fn.call(TestObj)</em> or <em>fn.apply(TestObj)</em> because it's a generic Function which should have no knowledge on the Function passed in.  Hence, above is not working.</p>

<p>There is still another lifesaver though.  The <em>bind</em> method of Function.  This method can take the passed in Object like what <em>call</em> or <em>apply</em> does, but it returns a new Function whose <em>this</em> binding is set to the Object passed in.  So, above code can be revised as:</p>

<p>```javascript
function dynamic(fn) {
  fn();
}</p>

<p>dynamic(TestObj.b.bind(TestObj));
```</p>

<p>It's fun, isn't it?</p>

<p>[Edited on 2013/06/17]: Today, I saw another case which maybe confusing too.</p>

<p>```javascript
var length = 3;</p>

<p>function logLength() {
  console.log(this.length);
}</p>

<p>var TestObj = {</p>

<pre><code>length: 2,
b: logLength,
c: function() {
    (function(fn) {
        arguments[0]();
    })(logLength);
}
</code></pre>

<p>};</p>

<p>TestObj.b();
TestObj.c();
```</p>

<p>What do you think the console should log?  Will it be <em>2</em> and <em>3</em>?  Actually, the result is <em>2</em> and <em>1</em>.  Because the <em>TestObj.c()</em> actually is calling the function <em>logLength</em> on the arguments Object, and then the <em>this.length</em> is referring to its own length, which is <em>1</em>.</p>

<p>More fun, right?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to verify JSON data with AngularJS $httpBackend]]></title>
    <link href="http://kenspirit.github.io/blog/2013/06/08/how-to-verify-json-data-with-angularjs-httpbackend/"/>
    <updated>2013-06-08T22:17:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/06/08/how-to-verify-json-data-with-angularjs-httpbackend</id>
    <content type="html"><![CDATA[<p>When we are writing Unit Test for AngularJS Controller or Service, it's pretty common to verify the data posted to server using <a href="http://docs.angularjs.org/api/ngMock.$httpBackend">$httpBackend</a> in ngMock module.</p>

<p>Consider the most common method: <em>expect(method, url, data, headers)</em>, from the doc, we find that the data is expected to be either <em>String</em> or <em>RegExp</em>.</p>

<blockquote><p><strong>expect(method, url, data, headers)</strong><br/>
Creates a new request expectation.</p>

<p>Parameters<br/>
* method – {string} – HTTP method.<br/>
* url – {string|RegExp} – HTTP url.<br/>
* data(optional) – {(string|RegExp)=} – HTTP request body.</p></blockquote>

<p>So normally, below simple case is working as expected:</p>

<p>```javascript</p>

<pre><code>$httpBackend.expect('POST', 'http://localhost/timeEntry', 'hello').respond(200, 'Done');
$resource('http://localhost/timeEntry/').save('hello');
$httpBackend.flush();

$httpBackend.expect('POST', 'http://localhost/timeEntry', /te/g).respond(200, 'Done');
$resource('http://localhost/timeEntry/').save('test');
$httpBackend.flush();
</code></pre>

<p>```</p>

<p>However, in real application, the data posted to server is normally in JSON format.  How do we verify JSON data then?  Actually, if we look into the source of the <em>angular-mocks.js</em>, it supports JSON data too although it's not documented.</p>

<p>```javascript
  this.matchData = function(d) {</p>

<pre><code>if (angular.isUndefined(data)) return true;
if (data &amp;&amp; angular.isFunction(data.test)) return data.test(d);
if (data &amp;&amp; !angular.isString(data)) return angular.toJson(data) == d;
return data == d;
</code></pre>

<p>  };
```</p>

<p>So below sample also works.</p>

<p>```javascript</p>

<pre><code>$httpBackend.expect('POST', 'http://localhost/timeEntry', {firstName: 'Ken', lastName: 'Chen'}).respond(200, 'Done');
$resource('http://localhost/timeEntry/').save({firstName: 'Ken', lastName: 'Chen'});
$httpBackend.flush();
</code></pre>

<p>```</p>

<p>As we see, the JSON data validation requires the JSON data posted to be exactly the same as the expect value provided.  How if the JSON data posted is different on each posting, say guid or timestamp field is contained, and we want to verify whether the JSON data is valid based on our special valiation logic?</p>

<p>Here is the hack to make AngularJS take our special validation logic.</p>

<p>```javascript</p>

<pre><code>var Validator = (function() {
    return {
        hasMinimumFields: function(entry) {
            return StringUtil.isNotBlank(entry.id) &amp;&amp; StringUtil.isNotBlank(entry.desc) &amp;&amp;
                StringUtil.isNotBlank(entry.lastUpdateOn) &amp;&amp; StringUtil.isNotBlank(entry.status);
        },
        isNewEntry: function(entry) {
            return this.hasMinimumFields(entry) &amp;&amp; entry.status === 'P';
        }
    };
})();

$scope.desc = 'Hello there';

var data = {
    test: function(data) {
        var entry = angular.fromJson(data);
        return (entry.desc === $scope.desc) &amp;&amp; Validator.isNewEntry(entry);
    }
};
$httpBackend.expect('POST', 'http://localhost/timeEntry', data).respond(200, 'Done');
$scope.saveEntry(); // Let's assume this method will post the data with model $scope.desc
$httpBackend.flush();
</code></pre>

<p>```</p>

<p>The hacking as you see is to take advantage of the <em>test</em> method which the <em>RegExp</em> has and AngularJS uses for data matching.  But when the data is not posted as expected, the Unit Test fails with below message:</p>

<p>```javascript</p>

<pre><code>Chrome 27.0 (Linux) Unit: Controllers Test EntryCtrl should start entry in correct format if only entry desc is filled. FAILED
Error: Expected POST http://localhost/timeEntry with different data
EXPECTED: {}
GOT:      {"status":"P","actualStartOn":"2013/06/08T21:24+0800","desc":"First Unit Test","id":"3849ae1a-4b9c-40be-baa0-60eeaf3af430","lastUpdateOn":"2013/06/08T13:24:44.104+0000"}
</code></pre>

<p>```</p>

<p>This error message is not quite developer friendly and it doesn't tell you much about why it failed at first glance.  However, if we make the test data contain the JSON value too, the expect message would be more meaningful.</p>

<p>```javascript</p>

<pre><code>var data = {
    desc: $scope.desc,
    status: 'P',
    id: 'SHOULD NOT BLANK',
    lastUpdateOn: 'SHOULD NOT BLANK',
    test: function(data) {
        var entry = angular.fromJson(data);
        return (entry.desc !== $scope.desc) &amp;&amp; Validator.isNewEntry(entry);
    }
};
</code></pre>

<p>```</p>

<p><code>javascript
EXPECTED: {"desc":"First Unit Test","status":"P","id":"SHOULD NOT BLANK","lastUpdateOn":"SHOULD NOT BLANK"}
</code></p>

<p><em>[Edited on Aug 09th 2013]</em>: After AngularJS accepted my <a href="https://github.com/angular/angular.js/pull/2981">pull request</a> to support Function as validation data last week, we don't need to use duck-typing for the hack.  The validation logic can be simplified as below and we can even override the Function's <em>toString()</em> method to give more expressive error message in a cleaner way.</p>

<p>```javascript</p>

<pre><code>var data = function(data) {
    var entry = angular.fromJson(data);
    return (entry.desc !== $scope.desc) &amp;&amp; Validator.isNewEntry(entry);
};
data.toString = function() {
    return 'The status of the new entry should be "P", desc should be "' + $scope.desc +
        '" and its id &amp; lastUpdateOn should not be blank.';
};
</code></pre>

<p>```</p>

<p><code>javascript
EXPECTED: The status of the new entry should be "P", desc should be "First Unit Test" and its id &amp; lastUpdateOn should not be blank.
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Share code between Node.js and browser]]></title>
    <link href="http://kenspirit.github.io/blog/2013/04/13/share-code-between-nodejs-and-browser/"/>
    <updated>2013-04-13T12:59:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/04/13/share-code-between-nodejs-and-browser</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>When you are writing a Node.js based web application, it comes to a demand to share code between Node.js and browser because both the frontend and backend are written in JavaScript.  Some utility APIs, such as validation, data processing, are the common cases.</p>

<p>The philosophy of organizing code in Node.js, current trend also, is modularization.  Each module file has its own execution context, requires its dependent APIs from other modules and publishes its own APIs out for other modules.</p>

<p>Hence, the code sharing between Node.js and browser requires the code to be used as the same way in browser.</p>

<h2>Situations and Solutions</h2>

<p>Things work differently regarding the JS and modules loading mechanism.  Because in browser, it works asynchronously while in Node.js it is synchronous.  In browser, we cannot directly do inline require like Node.js:</p>

<p>```javascript
var a = xxx;
a.foo();</p>

<p>var b = require('b');
b.bar();
```</p>

<p>There are two kinds of situations:</p>

<h3>Modularization already realized for browser code</h3>

<p>If you have already modularized your JS code for browser and used some AMD / CMD script loader, such as <a href="http://requirejs.org/">RequireJS</a>, or <a href="http://seajs.org/">SeaJS</a>, you might expect your life would be easier.  However, this is not the case.</p>

<p>The require must be like below in order to make sure all dependent modules to be loaded successfully and then execute the code which uses them.</p>

<p>```javascript
define(['./b'], function (b) {</p>

<pre><code>var a = xxx;
a.foo();
b.bar();

return {
    bla: function(){
        console.log('bla');
    }
};
</code></pre>

<p>});
```</p>

<p>We can see that there is quite some syntax different between Node.js style and the AMD / CMD one in browser.</p>

<p>To overcome this incompatibility, there are two main approaches.</p>

<ul>
<li><p>Directly add boilerplate code in one side to fit the other</p>

<ol>
<li>Some sample manual boilerplate code and also more explanation can be found <a href="http://www.2ality.com/2011/11/module-gap.html">here</a>.</li>
<li><a href="https://github.com/ajaxorg/node-amd-loader">node-amd-loader</a>: Add one extra line in Node.js module to load AMD style module.</li>
<li>The <a href="https://github.com/jrburke/amdefine">amdefine</a> for RequireJS: Special boilerplate code in Node.js module and then can be stripped out by <a href="https://github.com/jrburke/amdefine#optimizer">RequireJS Optimizer</a>.</li>
</ol>
</li>
<li><p>Build process to handle the boilerplate</p>

<ol>
<li><a href="https://github.com/substack/node-browserify">browserify</a>: Recursively analyze all the <code>require()</code> calls in your app in order to build a bundle you can serve up to the browser in a single <code>&lt;script&gt;</code> tag.</li>
<li><a href="https://github.com/medikoo/modules-webmake">modules-webmake</a>: Bundle CommonJS/Node.js modules for web browsers.</li>
<li><a href="https://github.com/kenspirit/webassemble">webassemble</a>: Based on modules-webmake.  Auto bundle CommonJS/Node.js packages for web browsers.</li>
</ol>
</li>
</ul>


<p>Personally, I prefer introducing extra build process to handle the boilerplate for me.</p>

<p>The advantages of build process boilerplate are:</p>

<ol>
<li>Boilerplate code is brittle and subject to change.  Adding it to every file makes future change harder.  If some build process can automatically remove them, why not use the build process to automatically add them?</li>
<li>Modularization is good but for production environment in browser, it is always better to minimize network request to load JS file.  Most of the time, module files are bundled into single package for one call.  If build process need to be introduced to handle it, it would be great to integrate sharing logic into it also.</li>
<li>If the boilerplate is introduced in build process, it is better to discover potential error during development cycle instead of last minute preproduction testing.</li>
</ol>


<p>You may have concern on effectiveness during development cycle.  However, if you can make good use of a good IDE, say <a href="http://www.sublimetext.com/">Sublime Text</a> and some task runner, say <a href="http://gruntjs.com/">Grunt</a>, it's just a couple of seconds' waiting after a hotkey command after saving your JS file in IDE.  It might just be the time you switch from IDE to browser and press F5.</p>

<h3>Legacy or namespace browser code style</h3>

<p>Although it's seldom the case that when you are using such hot tech of Node.js but still need to stick to the old style in browser, it's actually easier to share your Node.js code under this circumstance.</p>

<p>The webmake and webassemble mentioned above is easy to bundle your modules under global or a particular namespace.</p>

<p>So, what is my favorite choice?  Write the Node.js style code and share them to browser by webassemble.  Why not webmake?  Because the webassemble is made by me. :P</p>

<p>So tell me what is yours.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expression in AngularJS must be idempotent and for multiple calls]]></title>
    <link href="http://kenspirit.github.io/blog/2013/02/02/expression-in-angularjs-must-be-idempotent-and-for-multiple-calls/"/>
    <updated>2013-02-02T14:32:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/02/02/expression-in-angularjs-must-be-idempotent-and-for-multiple-calls</id>
    <content type="html"><![CDATA[<p>Recently, I encounter two very interesting issues when using ng-repeat in <a href="http://angularjs.org">AngularJS</a>.  Not completely understanding the <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch">$watch</a> and <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest">$digest()</a> is the root cause.</p>

<h2>Requirement</h2>

<p>I am making some workout entries as a list and one special requirement is to group the records by the date.</p>

<p>In order to break the entries to different groups, I use a scope level variable <em>$scope.lastActionDate</em> to keep track of the last actionDate of the entry to decide whether I should add the actionDateGroup DIV.  The source is as below.  The debug messages are used to explain the issues I encountered.  You can safely ignore them now.  Actually, you may already guess what one of the issues is after seeing them.  Yes, only one.  I bet you can never guess the second one and why.</p>

<p>
``` html</p>

<pre><code>&lt;style&gt;
    body {font-family: 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;}
    ul li {list-style-type: none;}
    .actionDateGroup {font-weight: bold; color: red}
&lt;/style&gt;
&lt;div id="content" ng-controller="EntryCtrl"&gt;
    &lt;div id="entries"&gt;
        &lt;ul&gt;
            &lt;li ng-repeat="entry in entries"&gt;
                &lt;div ng-switch on="isNewDateGroup(entry.actionDate)"&gt;
                    &lt;div ng-switch-when="true" class="actionDateGroup"&gt;{{entry.actionDate}}&lt;/div&gt;
                &lt;/div&gt;
                &lt;span&gt;{{entry.desc}}&lt;/span&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;script type="text/javascript" src="./js/angular/angular.js"&gt;&lt;/script&gt;
&lt;script&gt;
    function EntryCtrl($scope, $location) {
        $scope.entries = [{
            desc: 'Rope jumping count 1000',
            actionDate: '2012-01-31',
        },{
            desc: 'Jogging 3000M',
            actionDate: '2012-01-31'
        },{
            desc: 'Situp 40 * 3',
            actionDate: '2012-01-30'
        }];
        $scope.lastActionDate = null;
        $scope.calledCount = 0;

        $scope.isNewDateGroup = function(actionDate) {
            $scope.calledCount++;
            console.log('Function called count: ' + $scope.calledCount);
            console.log('Entry date vs Scope date: ' + actionDate + ' vs ' + $scope.lastActionDate);
            if ($scope.lastActionDate === null || $scope.lastActionDate !== actionDate) {
                $scope.lastActionDate = actionDate;
                return true;
            }
            return false;
        };
    }
&lt;/script&gt;
</code></pre>

<p>```
</p>

<h2>Expectation</h2>

<ol>
<li><em>actionDate</em> of the first entry will always be shown as it's the first group.</li>
<li><em>actionDate</em> of the remaining entries will be shown if its value is not the same as the previous one.</li>
</ol>


<h2>Phenomenon</h2>

<p>When the sample data is as above (case #1), the effect looks like it's behaving correctly as below:</p>

<ul>
    <li style="list-style-type: none;">
        <div style="font-weight: bold; color: red">2012-01-31</div>
        <span>Rope jumping count 1000</span>
    </li>
    <li style="list-style-type: none;">
        <span>Jogging 3000M</span>
    </li>
    <li style="list-style-type: none;">
        <div style="font-weight: bold; color: red">2012-01-30</div>
        <span>Situp 40 * 3</span>
    </li>
</ul>


<p>However, if you change the <em>actionDate</em> of the last entry to be also <strong>2012-01-31</strong> (case #2), you will find the result is that no date group is shown.  Why?  Isn't it supposed to show only the first one as all entries have the same <em>actionDate</em>?</p>

<h4>Expected result:</h4>

<ul>
    <li style="list-style-type: none;">
        <div style="font-weight: bold; color: red">2012-01-31</div>
        <span>Rope jumping count 1000</span>
    </li>
    <li style="list-style-type: none;">
        <span>Jogging 3000M</span>
    </li>
    <li style="list-style-type: none;">
        <span>Situp 40 * 3</span>
    </li>
</ul>


<h4>Actual result:</h4>

<ul>
    <li style="list-style-type: none;">
        <span>Rope jumping count 1000</span>
    </li>
    <li style="list-style-type: none;">
        <span>Jogging 3000M</span>
    </li>
    <li style="list-style-type: none;">
        <span>Situp 40 * 3</span>
    </li>
</ul>


<p>Now if you check the calledCount in the debug message, you will find that it's called 6 times (double the entry count) in case #1 and 9 times in case #2.  There are two issues I never thought they should happen:</p>

<ol>
<li>The <em>isNewDateGroup</em> function is called more than the entries' count.  (Guess this, right?)</li>
<li>The called count is different when the data is different.  (how about this?)</li>
</ol>


<h2>Causes</h2>

<p>In AngularJS <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch">$watch</a> API:</p>

<blockquote><ul>
<li>Since <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest">$digest()</a> reruns when it detects changes the watchExpression can execute multiple times per <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest">$digest()</a> and should be <strong>idempotent</strong>.</li>
<li>The listener is called only when the value from the current watchExpression and the previous call to watchExpression are not equal <strong>(with the exception of the initial run, see below)</strong> ...</li>
<li>The watch listener may change the model, which may trigger other listeners to fire. This is achieved by <strong>rerunning the watchers until no changes are detected</strong>. The rerun iteration limit is 10 to prevent an infinite loop deadlock.
...
(Since watchExpression can execute multiple times per $digest cycle when a change is detected, be prepared for multiple calls to your listener.)</li>
</ul>
</blockquote>

<h3>Issue #1</h3>

<p>The <em>isNewDateGroup</em> being watched whose calculation relies on value of <em>lastActionDate</em> is not idempotent and so during initial run stage, <em>lastActionDate</em> is set to 2012-01-30 at the end of case #1 which causes the illusion of working, while it is set to 2012-01-31 at the end of case #2 which illustrates the error.</p>

<h3>Issue #2</h3>

<p>In below code, if I comment out <strong>$scope.lastActionDate = actionDate;</strong> or change the <strong>return true;</strong> to <strong>return false;</strong>, the called count will be 6, same as case #1.  This implies that the return value of the expression is the cause.</p>

<p>``` javascript</p>

<pre><code>if ($scope.lastActionDate === null || $scope.lastActionDate !== actionDate) {
    $scope.lastActionDate = actionDate;
    return true;
}
</code></pre>

<p>```</p>

<p>Remember what the API states: <strong>rerunning the watchers until no changes are detected</strong>?  Let's see what the return value is for watch expression <em>isNewDateGroup</em> after each run.</p>

<p>If the <em>actionDate</em> of the last entry is <strong>2012-01-30</strong>:</p>

<p>
<table style="font-size: 0.85em;">
    <tr>
        <td style="padding: 5px; border: 1px solid black;"></td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Rope jumping</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Jogging</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Situp</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">1st <br/>(initial)</td>
        <td style="padding: 5px; border: 1px solid black;">true ($scope.lastActionDate === null)</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">true ('2012-01-31' !== '2012-01-30';<br/>
        $scope.lastActionDate = '2012-01-30')
        </td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">2nd</td>
        <td style="padding: 5px; border: 1px solid black;">true ($scope.lastActionDate !== '2012-01-31')</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">true</td>
    </tr>
</table>
</p>


<p>If the <em>actionDate</em> of the last entry is <strong>2012-01-31</strong>:</p>

<p>
<table style="font-size: 0.85em;">
    <tr>
        <td style="padding: 5px; border: 1px solid black;"></td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Rope jumping</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Jogging</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Situp</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">1st <br/>(initial)</td>
        <td style="padding: 5px; border: 1px solid black;">true ($scope.lastActionDate === null)</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">2nd</td>
        <td style="padding: 5px; border: 1px solid black;">false (change compared to last run)</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">3rd</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
    </tr>
</table>
</p>


<p>So now you see why changing the last entry to 2012-01-31 causes the 3rd time to evaluate the expression again.</p>
]]></content>
  </entry>
  
</feed>
