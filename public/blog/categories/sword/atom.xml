<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sword | Thinking in Crowd / 鹄思乱想]]></title>
  <link href="http://kenspirit.github.io/blog/categories/sword/atom.xml" rel="self"/>
  <link href="http://kenspirit.github.io/"/>
  <updated>2013-06-08T22:15:53+08:00</updated>
  <id>http://kenspirit.github.io/</id>
  <author>
    <name><![CDATA[鹄思乱想]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to verify JSON data with AngularJS $httpBackend]]></title>
    <link href="http://kenspirit.github.io/blog/2013/06/08/how-to-verify-json-data-with-angularjs-httpbackend/"/>
    <updated>2013-06-08T22:17:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/06/08/how-to-verify-json-data-with-angularjs-httpbackend</id>
    <content type="html"><![CDATA[<p>When we are writing Unit Test for AngularJS Controller or Service, it's pretty common to verify the data posted to server using <a href="http://docs.angularjs.org/api/ngMock.$httpBackend">$httpBackend</a> in ngMock module.</p>

<p>Consider the most common method: <em>expect(method, url, data, headers)</em>, from the doc, we find that the data is expected to be either <em>String</em> or <em>RegExp</em>.</p>

<blockquote><p><strong>expect(method, url, data, headers)</strong><br/>
Creates a new request expectation.</p>

<p>Parameters<br/>
* method – {string} – HTTP method.<br/>
* url – {string|RegExp} – HTTP url.<br/>
* data(optional) – {(string|RegExp)=} – HTTP request body.</p></blockquote>

<p>So normally, below simple case is working as expected:</p>

<p>```javascript</p>

<pre><code>$httpBackend.expect('POST', 'http://localhost/timeEntry', 'hello').respond(200, 'Done');
$resource('http://localhost/timeEntry/').save('hello');
$httpBackend.flush();

$httpBackend.expect('POST', 'http://localhost/timeEntry', /te/g).respond(200, 'Done');
$resource('http://localhost/timeEntry/').save('test');
$httpBackend.flush();
</code></pre>

<p>```</p>

<p>However, in real application, the data posted to server is normally in JSON format.  How do we verify JSON data then?  Actually, if we look into the source of the <em>angular-mocks.js</em>, it supports JSON data too although it's not documented.</p>

<p>```javascript
  this.matchData = function(d) {</p>

<pre><code>if (angular.isUndefined(data)) return true;
if (data &amp;&amp; angular.isFunction(data.test)) return data.test(d);
if (data &amp;&amp; !angular.isString(data)) return angular.toJson(data) == d;
return data == d;
</code></pre>

<p>  };
```</p>

<p>So below sample also works.</p>

<p>```javascript</p>

<pre><code>$httpBackend.expect('POST', 'http://localhost/timeEntry', {firstName: 'Ken', lastName: 'Chen'}).respond(200, 'Done');
$resource('http://localhost/timeEntry/').save({firstName: 'Ken', lastName: 'Chen'});
$httpBackend.flush();
</code></pre>

<p>```</p>

<p>As we see, the JSON data validation requires the JSON data posted to be exactly the same as the expect value provided.  How if the JSON data posted is different on each posting, say guid or timestamp field is contained, and we want to verify whether the JSON data is valid based on our special valiation logic?</p>

<p>Here is the hack to make AngularJS take our special validation logic.</p>

<p>```javascript</p>

<pre><code>var Validator = (function() {
    return {
        hasMinimumFields: function(entry) {
            return StringUtil.isNotBlank(entry.id) &amp;&amp; StringUtil.isNotBlank(entry.desc) &amp;&amp;
                StringUtil.isNotBlank(entry.lastUpdateOn) &amp;&amp; StringUtil.isNotBlank(entry.status);
        },
        isNewEntry: function(entry) {
            return this.hasMinimumFields(entry) &amp;&amp; entry.status === 'P';
        }
    };
})();

$scope.desc = 'Hello there';

var data = {
    test: function(data) {
        var entry = angular.fromJson(data);
        return (entry.desc === $scope.desc) &amp;&amp; Validator.isNewEntry(entry);
    }
};
$httpBackend.expect('POST', 'http://localhost/timeEntry', data).respond(200, 'Done');
$scope.saveEntry(); // Let's assume this method will post the data with model $scope.desc
$httpBackend.flush();
</code></pre>

<p>```</p>

<p>The hacking as you see is to take advantage of the <em>test</em> method which the <em>RegExp</em> has and AngularJS uses for data matching.  But when the data is not posted as expected, the Unit Test fails with below message:</p>

<p>```javascript</p>

<pre><code>Chrome 27.0 (Linux) Unit: Controllers Test EntryCtrl should start entry in correct format if only entry desc is filled. FAILED
Error: Expected POST http://localhost/timeEntry with different data
EXPECTED: {}
GOT:      {"status":"P","actualStartOn":"2013/06/08T21:24+0800","desc":"First Unit Test","id":"3849ae1a-4b9c-40be-baa0-60eeaf3af430","lastUpdateOn":"2013/06/08T13:24:44.104+0000"}
</code></pre>

<p>```</p>

<p>This error message is not quite developer friendly and it doesn't tell you much about why it failed at first glance.  However, if we make the test data contain the JSON value too, the expect message would be more meaningful.</p>

<p>```javascript</p>

<pre><code>var data = {
    desc: $scope.desc,
    status: 'P',
    id: 'NOT BLANK',
    lastUpdateOn: 'NOT BLANK',
    test: function(data) {
        var entry = angular.fromJson(data);
        return (entry.desc !== $scope.desc) &amp;&amp; Validator.isNewEntry(entry);
    }
};
</code></pre>

<p>```</p>

<p><code>javascript
EXPECTED: {"desc":"First Unit Test","status":"P","id":"NOT BLANK","lastUpdateOn":"NOT BLANK"}
</code></p>

<p>Or we write the expect data like this, then the expect message becomes the tips we supply:<br/>
```javascript</p>

<pre><code>var data = {
    toString: function() {
        return 'id &amp; lastUpdateOn should not be blank; status should be P';
    },
    test: function(data) {
        var entry = angular.fromJson(data);
        return (entry.desc === $scope.desc) &amp;&amp; Validator.isNewEntry(entry);
    }
};
</code></pre>

<p>```</p>

<p><code>javascript
EXPECTED: id &amp; lastUpdateOn should not be blank; status should be P
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Share code between Node.js and browser]]></title>
    <link href="http://kenspirit.github.io/blog/2013/04/13/share-code-between-nodejs-and-browser/"/>
    <updated>2013-04-13T12:59:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/04/13/share-code-between-nodejs-and-browser</id>
    <content type="html"><![CDATA[<h2>Background</h2>

<p>When you are writing a Node.js based web application, it comes to a demand to share code between Node.js and browser because both the frontend and backend are written in JavaScript.  Some utility APIs, such as validation, data processing, are the common cases.</p>

<p>The philosophy of organizing code in Node.js, current trend also, is modularization.  Each module file has its own execution context, requires its dependent APIs from other modules and publishes its own APIs out for other modules.</p>

<p>Hence, the code sharing between Node.js and browser requires the code to be used as the same way in browser.</p>

<h2>Situations and Solutions</h2>

<p>Things work differently regarding the JS and modules loading mechanism.  Because in browser, it works asynchronously while in Node.js it is synchronous.  In browser, we cannot directly do inline require like Node.js:</p>

<p>```javascript
var a = xxx;
a.foo();</p>

<p>var b = require('b');
b.bar();
```</p>

<p>There are two kinds of situations:</p>

<h3>Modularization already realized for browser code</h3>

<p>If you have already modularized your JS code for browser and used some AMD / CMD script loader, such as <a href="http://requirejs.org/">RequireJS</a>, or <a href="http://seajs.org/">SeaJS</a>, you might expect your life would be easier.  However, this is not the case.</p>

<p>The require must be like below in order to make sure all dependent modules to be loaded successfully and then execute the code which uses them.</p>

<p>```javascript
define(['./b'], function (b) {</p>

<pre><code>var a = xxx;
a.foo();
b.bar();

return {
    bla: function(){
        console.log('bla');
    }
};
</code></pre>

<p>});
```</p>

<p>We can see that there is quite some syntax different between Node.js style and the AMD / CMD one in browser.</p>

<p>To overcome this incompatibility, there are two main approaches.</p>

<ul>
<li><p>Directly add boilerplate code in one side to fit the other</p>

<ol>
<li>Some sample manual boilerplate code and also more explanation can be found <a href="http://www.2ality.com/2011/11/module-gap.html">here</a>.</li>
<li><a href="https://github.com/ajaxorg/node-amd-loader">node-amd-loader</a>: Add one extra line in Node.js module to load AMD style module.</li>
<li>The <a href="https://github.com/jrburke/amdefine">amdefine</a> for RequireJS: Special boilerplate code in Node.js module and then can be stripped out by <a href="https://github.com/jrburke/amdefine#optimizer">RequireJS Optimizer</a>.</li>
</ol>
</li>
<li><p>Build process to handle the boilerplate</p>

<ol>
<li><a href="https://github.com/substack/node-browserify">browserify</a>: Recursively analyze all the <code>require()</code> calls in your app in order to build a bundle you can serve up to the browser in a single <code>&lt;script&gt;</code> tag.</li>
<li><a href="https://github.com/medikoo/modules-webmake">modules-webmake</a>: Bundle CommonJS/Node.js modules for web browsers.</li>
<li><a href="https://github.com/kenspirit/webassemble">webassemble</a>: Based on modules-webmake.  Auto bundle CommonJS/Node.js packages for web browsers.</li>
</ol>
</li>
</ul>


<p>Personally, I prefer introducing extra build process to handle the boilerplate for me.</p>

<p>The advantages of build process boilerplate are:</p>

<ol>
<li>Boilerplate code is brittle and subject to change.  Adding it to every file makes future change harder.  If some build process can automatically remove them, why not use the build process to automatically add them?</li>
<li>Modularization is good but for production environment in browser, it is always better to minimize network request to load JS file.  Most of the time, module files are bundled into single package for one call.  If build process need to be introduced to handle it, it would be great to integrate sharing logic into it also.</li>
<li>If the boilerplate is introduced in build process, it is better to discover potential error during development cycle instead of last minute preproduction testing.</li>
</ol>


<p>You may have concern on effectiveness during development cycle.  However, if you can make good use of a good IDE, say <a href="http://www.sublimetext.com/">Sublime Text</a> and some task runner, say <a href="http://gruntjs.com/">Grunt</a>, it's just a couple of seconds' waiting after a hotkey command after saving your JS file in IDE.  It might just be the time you switch from IDE to browser and press F5.</p>

<h3>Legacy or namespace browser code style</h3>

<p>Although it's seldom the case that when you are using such hot tech of Node.js but still need to stick to the old style in browser, it's actually easier to share your Node.js code under this circumstance.</p>

<p>The webmake and webassemble mentioned above is easy to bundle your modules under global or a particular namespace.</p>

<p>So, what is my favorite choice?  Write the Node.js style code and share them to browser by webassemble.  Why not webmake?  Because the webassemble is made by me. :P</p>

<p>So tell me what is yours.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expression in AngularJS must be idempotent and for multiple calls]]></title>
    <link href="http://kenspirit.github.io/blog/2013/02/02/expression-in-angularjs-must-be-idempotent-and-for-multiple-calls/"/>
    <updated>2013-02-02T14:32:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/02/02/expression-in-angularjs-must-be-idempotent-and-for-multiple-calls</id>
    <content type="html"><![CDATA[<p>Recently, I encounter two very interesting issues when using ng-repeat in <a href="http://angularjs.org">AngularJS</a>.  Not completely understanding the <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch">$watch</a> and <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest">$digest()</a> is the root cause.</p>

<h2>Requirement</h2>

<p>I am making some workout entries as a list and one special requirement is to group the records by the date.</p>

<p>In order to break the entries to different groups, I use a scope level variable <em>$scope.lastActionDate</em> to keep track of the last actionDate of the entry to decide whether I should add the actionDateGroup DIV.  The source is as below.  The debug messages are used to explain the issues I encountered.  You can safely ignore them now.  Actually, you may already guess what one of the issues is after seeing them.  Yes, only one.  I bet you can never guess the second one and why.</p>

<p>
``` html</p>

<pre><code>&lt;style&gt;
    body {font-family: 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;}
    ul li {list-style-type: none;}
    .actionDateGroup {font-weight: bold; color: red}
&lt;/style&gt;
&lt;div id="content" ng-controller="EntryCtrl"&gt;
    &lt;div id="entries"&gt;
        &lt;ul&gt;
            &lt;li ng-repeat="entry in entries"&gt;
                &lt;div ng-switch on="isNewDateGroup(entry.actionDate)"&gt;
                    &lt;div ng-switch-when="true" class="actionDateGroup"&gt;{{entry.actionDate}}&lt;/div&gt;
                &lt;/div&gt;
                &lt;span&gt;{{entry.desc}}&lt;/span&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;script type="text/javascript" src="./js/angular/angular.js"&gt;&lt;/script&gt;
&lt;script&gt;
    function EntryCtrl($scope, $location) {
        $scope.entries = [{
            desc: 'Rope jumping count 1000',
            actionDate: '2012-01-31',
        },{
            desc: 'Jogging 3000M',
            actionDate: '2012-01-31'
        },{
            desc: 'Situp 40 * 3',
            actionDate: '2012-01-30'
        }];
        $scope.lastActionDate = null;
        $scope.calledCount = 0;

        $scope.isNewDateGroup = function(actionDate) {
            $scope.calledCount++;
            console.log('Function called count: ' + $scope.calledCount);
            console.log('Entry date vs Scope date: ' + actionDate + ' vs ' + $scope.lastActionDate);
            if ($scope.lastActionDate === null || $scope.lastActionDate !== actionDate) {
                $scope.lastActionDate = actionDate;
                return true;
            }
            return false;
        };
    }
&lt;/script&gt;
</code></pre>

<p>```
</p>

<h2>Expectation</h2>

<ol>
<li><em>actionDate</em> of the first entry will always be shown as it's the first group.</li>
<li><em>actionDate</em> of the remaining entries will be shown if its value is not the same as the previous one.</li>
</ol>


<h2>Phenomenon</h2>

<p>When the sample data is as above (case #1), the effect looks like it's behaving correctly as below:</p>

<ul>
    <li style="list-style-type: none;">
        <div style="font-weight: bold; color: red">2012-01-31</div>
        <span>Rope jumping count 1000</span>
    </li>
    <li style="list-style-type: none;">
        <span>Jogging 3000M</span>
    </li>
    <li style="list-style-type: none;">
        <div style="font-weight: bold; color: red">2012-01-30</div>
        <span>Situp 40 * 3</span>
    </li>
</ul>


<p>However, if you change the <em>actionDate</em> of the last entry to be also <strong>2012-01-31</strong> (case #2), you will find the result is that no date group is shown.  Why?  Isn't it supposed to show only the first one as all entries have the same <em>actionDate</em>?</p>

<h4>Expected result:</h4>

<ul>
    <li style="list-style-type: none;">
        <div style="font-weight: bold; color: red">2012-01-31</div>
        <span>Rope jumping count 1000</span>
    </li>
    <li style="list-style-type: none;">
        <span>Jogging 3000M</span>
    </li>
    <li style="list-style-type: none;">
        <span>Situp 40 * 3</span>
    </li>
</ul>


<h4>Actual result:</h4>

<ul>
    <li style="list-style-type: none;">
        <span>Rope jumping count 1000</span>
    </li>
    <li style="list-style-type: none;">
        <span>Jogging 3000M</span>
    </li>
    <li style="list-style-type: none;">
        <span>Situp 40 * 3</span>
    </li>
</ul>


<p>Now if you check the calledCount in the debug message, you will find that it's called 6 times (double the entry count) in case #1 and 9 times in case #2.  There are two issues I never thought they should happen:</p>

<ol>
<li>The <em>isNewDateGroup</em> function is called more than the entries' count.  (Guess this, right?)</li>
<li>The called count is different when the data is different.  (how about this?)</li>
</ol>


<h2>Causes</h2>

<p>In AngularJS <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch">$watch</a> API:</p>

<blockquote><ul>
<li>Since <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest">$digest()</a> reruns when it detects changes the watchExpression can execute multiple times per <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$digest">$digest()</a> and should be <strong>idempotent</strong>.</li>
<li>The listener is called only when the value from the current watchExpression and the previous call to watchExpression are not equal <strong>(with the exception of the initial run, see below)</strong> ...</li>
<li>The watch listener may change the model, which may trigger other listeners to fire. This is achieved by <strong>rerunning the watchers until no changes are detected</strong>. The rerun iteration limit is 10 to prevent an infinite loop deadlock.
...
(Since watchExpression can execute multiple times per $digest cycle when a change is detected, be prepared for multiple calls to your listener.)</li>
</ul>
</blockquote>

<h3>Issue #1</h3>

<p>The <em>isNewDateGroup</em> being watched whose calculation relies on value of <em>lastActionDate</em> is not idempotent and so during initial run stage, <em>lastActionDate</em> is set to 2012-01-30 at the end of case #1 which causes the illusion of working, while it is set to 2012-01-31 at the end of case #2 which illustrates the error.</p>

<h3>Issue #2</h3>

<p>In below code, if I comment out <strong>$scope.lastActionDate = actionDate;</strong> or change the <strong>return true;</strong> to <strong>return false;</strong>, the called count will be 6, same as case #1.  This implies that the return value of the expression is the cause.</p>

<p>``` javascript</p>

<pre><code>if ($scope.lastActionDate === null || $scope.lastActionDate !== actionDate) {
    $scope.lastActionDate = actionDate;
    return true;
}
</code></pre>

<p>```</p>

<p>Remember what the API states: <strong>rerunning the watchers until no changes are detected</strong>?  Let's see what the return value is for watch expression <em>isNewDateGroup</em> after each run.</p>

<p>If the <em>actionDate</em> of the last entry is <strong>2012-01-30</strong>:</p>

<p>
<table style="font-size: 0.85em;">
    <tr>
        <td style="padding: 5px; border: 1px solid black;"></td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Rope jumping</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Jogging</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Situp</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">1st <br/>(initial)</td>
        <td style="padding: 5px; border: 1px solid black;">true ($scope.lastActionDate === null)</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">true ('2012-01-31' !== '2012-01-30';<br/>
        $scope.lastActionDate = '2012-01-30')
        </td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">2nd</td>
        <td style="padding: 5px; border: 1px solid black;">true ($scope.lastActionDate !== '2012-01-31')</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">true</td>
    </tr>
</table>
</p>


<p>If the <em>actionDate</em> of the last entry is <strong>2012-01-31</strong>:</p>

<p>
<table style="font-size: 0.85em;">
    <tr>
        <td style="padding: 5px; border: 1px solid black;"></td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Rope jumping</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Jogging</td>
        <td style="padding: 5px; border: 1px solid black; font-weight: bold;">Situp</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">1st <br/>(initial)</td>
        <td style="padding: 5px; border: 1px solid black;">true ($scope.lastActionDate === null)</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">2nd</td>
        <td style="padding: 5px; border: 1px solid black;">false (change compared to last run)</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
    </tr>
    <tr>
        <td style="padding: 5px; border: 1px solid black;">3rd</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
        <td style="padding: 5px; border: 1px solid black;">false</td>
    </tr>
</table>
</p>


<p>So now you see why changing the last entry to 2012-01-31 causes the 3rd time to evaluate the expression again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String interpolation should not be used with Class Directive in AngularJS]]></title>
    <link href="http://kenspirit.github.io/blog/2013/01/30/string-interpolation-should-not-be-used-with-class-directive-in-angularjs/"/>
    <updated>2013-01-30T07:02:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2013/01/30/string-interpolation-should-not-be-used-with-class-directive-in-angularjs</id>
    <content type="html"><![CDATA[<p>Do you see any issue in below HTML snippet with <a href="http://angularjs.org">AngularJS</a> code?<br/>

``` html</p>

<pre><code>&lt;span ng-class="task-{{task.type}}"&gt;{{task.type}}&lt;/span&gt;
&lt;input type="text" ng-model="task.type"/&gt;
</code></pre>

<p>```
</p>

<p>Do you see what is the difference between the one below and above?<br/>

``` html</p>

<pre><code>&lt;span ng-class="'task-' + task.type"&gt;{{task.type}}&lt;/span&gt;
&lt;input type="text" ng-model="task.type"/&gt;
</code></pre>

<p>```
</p>

<p>The first one use String interpolation in Class <a href="http://docs.angularjs.org/guide/directive">Directive</a>.  The result is that the css class you expect to got based on model value <em>task.type</em> will not be applied to the <em>span</em> element. It took me a long time to figure out why.</p>

<p>Before furher reading, it's better if you have read the Developer Guide, <a href="http://docs.angularjs.org/guide/directive">Directive</a> section which explains the concept of <strong>String interpolation</strong> and <strong>Compilation process, and directive matching</strong>, although honestly, it doesn't quite clearly say how the String interpolation should or can be used.  Before, I just have the rough idea that it can be evaluated and replaced in String and also reflect the change from model.</p>

<p>If you use the first code snippet to create sample AngularJS page and bind an <em>task</em> model to it, you can see that the String Interpolation "<em>works</em>": the ng-class attribute and the content of the span tag can be replaced correctly with model value.  Even if you change the model value through the input field, they can be updated accordingly.  However, the CSS is not applied as expected.</p>

<p>Why?  Let's take a look at AngularJS source:</p>

<p>In function <em>collectDirectives</em>, when it checks the element's attribute, it calls <em>addAttrInterpolateDirective</em> before <em>addDirective</em>.  In <em>addAttrInterpolateDirective</em>, the <a href="http://docs.angularjs.org/guide/expression">Expression</a> in String interpolation will be converted to a new directive with compile function to watch the change and set new value to the attribute which is the class directive in this case.  There are two important things need to be aware of:</p>

<ol>
<li>A new directive is ad-hoc created before the class directive it's inspecting.</li>
<li>The new directive's linking function is watching the expression change to update the class directive value itself.</li>
</ol>


<p>```javascript</p>

<pre><code>function collectDirectives(node, directives, attrs, maxPriority) {
  var nodeType = node.nodeType,
      attrsMap = attrs.$attr,
      match,
      className;

  switch(nodeType) {
    case 1: /* Element */
      // use the node name: &lt;directive&gt;
      addDirective(directives,
          directiveNormalize(nodeName_(node).toLowerCase()), 'E', maxPriority);

      // iterate over the attributes
      for (var attr, name, nName, value, nAttrs = node.attributes,
               j = 0, jj = nAttrs &amp;&amp; nAttrs.length; j &lt; jj; j++) {
        attr = nAttrs[j];
        if (attr.specified) {
          name = attr.name;
          nName = directiveNormalize(name.toLowerCase());
          ...
          addAttrInterpolateDirective(node, directives, value, nName);
          addDirective(directives, nName, 'A', maxPriority);
        }
      }
      ...
    }
    ...
}

function addAttrInterpolateDirective(node, directives, value, name) {
  var interpolateFn = $interpolate(value, true);

  // no interpolation found -&gt; ignore
  if (!interpolateFn) return;

  directives.push({
    priority: 100,
    compile: valueFn(function(scope, element, attr) {
      var $$observers = (attr.$$observers || (attr.$$observers = {}));
      ...
      attr[name] = undefined;
      ($$observers[name] || ($$observers[name] = [])).$$inter = true;
      (attr.$$observers &amp;&amp; attr.$$observers[name].$$scope || scope).
        $watch(interpolateFn, function(value) {
          attr.$set(name, value);
        });
    })
  });
}
</code></pre>

<p>```</p>

<p>Let's see how class directive works now.  It's at function <em>classDirective</em>.  If you put an expression in class directive, it will watch that.  Once there is any value change, it adds/removes class from element.  Hence, the second example above works correctly.</p>

<p>```javascript</p>

<pre><code>function classDirective(name, selector) {
  name = 'ngClass' + name;
  return ngDirective(function(scope, element, attr) {
    scope.$watch(attr[name], function(newVal, oldVal) {
      if (selector === true || scope.$index % 2 === selector) {
        if (oldVal &amp;&amp; (newVal !== oldVal)) {
           if (isObject(oldVal) &amp;&amp; !isArray(oldVal))
             oldVal = map(oldVal, function(v, k) { if (v) return k });
           element.removeClass(isArray(oldVal) ? oldVal.join(' ') : oldVal);
         }
         if (isObject(newVal) &amp;&amp; !isArray(newVal))
            newVal = map(newVal, function(v, k) { if (v) return k });
         if (newVal) element.addClass(isArray(newVal) ? newVal.join(' ') : newVal);      }
    }, true);
  });
}
</code></pre>

<p>```</p>

<p>However, if you put String interpolation into it, it will be watching <strong>undefined</strong>.  Why?  Remember what <em>addAttrInterpolateDirective</em> does?  An extra directive is added before this class directive and so its linking function runs before the one for class directive.  And one more thing I omit above: its linking function explicitly sets <strong>attr[name] = undefined;</strong>.  Hence, when the linking functions run sequentially, the class directive's linking function doesn't watch the expression in String interpolation or the value derived although the String interpolation itself works correctly to set the value to class directive.</p>

<p>Hence, in order to set CSS class on HTML element dynamically, we should either use:</p>

<ul>
<li>ng-class / ng-class-odd / ng-class-even without String interpolation by directly using model value or Expression.</li>
</ul>


<p>or</p>

<ul>
<li>HTML class attribute directly with String interpolation.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UED in my pet project - Take Time (Part 1)]]></title>
    <link href="http://kenspirit.github.io/blog/2012/12/25/ued-in-my-pet-project-take-time-part-1/"/>
    <updated>2012-12-25T21:41:00+08:00</updated>
    <id>http://kenspirit.github.io/blog/2012/12/25/ued-in-my-pet-project-take-time-part-1</id>
    <content type="html"><![CDATA[<h2>What is it and why I want to work on that</h2>

<p>I hope the name is brief and clear on what it should be although I was worrying whether it brings an illusion that it's telling you to <em>"Take your time.  Slow down."</em>.  Actually, it's where to take the time seriously and you can keep track of your time.</p>

<p>Why would I want to do such a seemingly boring thing?  There are three reasons:</p>

<ul>
<li><p>For those who really cares about their time, they really want to find some effective way to make their time used effectively.</p></li>
<li><p>I have been working in two software companies which both require staffs to input TIMESHEET!  Yes, we all know it's bullshit, meaningless and most of the figures are made up, but it's just required.</p>

<p>  I can understand that part of the objective is good, just like what this pet project is made for. However, mostly it's just some policy or resource monitoring required by boss.</p></li>
<li><p>Practice my development skills with some of my favorite tools by doing real work.</p></li>
</ul>


<p>Hence, I am trying to make an easy-to-use application for those who want an effective time management.  The design is basically following my <a href="http://www.thinkingincrowd.me/blog/2012/12/24/my-practices-on-time-management/">practices</a> of it and the principle of simplicity.</p>

<h2>What does it look like</h2>

<p>It should be simple in general.</p>

<ul>
<li>It's a GTD-style task web application.</li>
<li>It can plan, track and retrospect the tasks.</li>
</ul>


<h2>How to capture the time</h2>

<p>No matter you are planning tasks or actually tracking the tasks done.  You need to capture it.  There are many elements need to write down:</p>

<ul>
<li>For planning tasks: Task content, Start/End date and Estimated how long it needs.</li>
<li>For tracking tasks: Task content, Start/End date, Start/End time and how long it takes.</li>
</ul>


<p>The elements in tracking tasks covers all we need for planning tasks, hence the capturing UI should be able to unified.  Below is the draft UI designed:<br/>
<img src="https://dl.dropbox.com/u/17182499/blog/2012/12/task_capture.png" alt="Capture UI" /></p>

<ul>
<li>By default, there is a task content textbox.</li>
<li>After you input something, some additional text and input boxes are shown.</li>
</ul>


<p>You should probably be able to guess how to use it already (if not, let me know how to make it happen):</p>

<ul>
<li>If you input the task name and press "<em>Enter</em>", you start your task immediately.</li>
<li>If you input the task name and the duration it takes and press "<em>Enter</em>", you are tracking a task just finished.  It's calculated based on the current time and the duration you input.</li>
<li>If you also fills a specific date in "<em>yyyy-MM-dd</em>", you are planning tasks if it's a future date; you are tracking tasks if it's a historical date.  The last "<em>hh:mm</em>" field is optional for the task start time.</li>
</ul>


<h2>Why design like this</h2>

<p><em>4</em> fields with some easy to explain text made it can be read as a sentence.  It should be natural to fill in what is required.  And when you press "Enter" at any field, it will do different things automatically.  It should be simple enough but satisfy all the requirement.</p>

<p>I have been thinking how to capture the duration.</p>

<ul>
<li>Two fields separately for hours and mins (This app is not designed for those crazy people who need to capture seconds).</li>
<li>One field for all.</li>
</ul>


<p>Approach <em>#1</em> looks natural but needs an extra field and more key-stroke.  By taking <em>#3</em>, decimal number need to be used to express minutes.  You may question me that calculating decimal is even harder.  But think it this way:  <em>.25</em> is <em>15</em> mins; <em>.5</em> is <em>30</em> mins; <em>.75</em> is <em>45</em> mins; <em>.1</em> is around <em>5</em> mins.</p>

<p>I think it's not that difficult to use decimal to express it.  What is more, when you are actually tracking your task this way, you are guessing or trying to remember how long it took.  Your mental power is "calculating" somehow to get a number.  If it's one field, you just need to do one calculation and input.  If it's two fields, you might possibly calculating two fields, especially when your task start time is say from <em>2:35</em> to <em>4:08</em>.  I think it just doesn't matter if there is minor inaccurate.</p>
]]></content>
  </entry>
  
</feed>
